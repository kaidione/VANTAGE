// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.4.0.0
//      SpecFlow Generator Version:3.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace LenovoVantageTest.Features.UWP.Vantage_HardwareSettings
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("VAN18694_Part1_ECourseForDolby")]
    public partial class VAN18694_Part1_ECourseForDolbyFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "VAN18694_Part1_ECourseForDolby.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/UWP/Vantage_HardwareSettings", "VAN18694_Part1_ECourseForDolby", "\tTest Case：https://lnvusjira.lenovonet.lenovo.local/browse/VAN-18694\r\n\tAuthor： He" +
                    "len / Pengjie Chen", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
#line 6
 testRunner.Given("check the ECourse Feature on the supported system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
 testRunner.Given("go to Audio page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.Given("Jump to audio smart settings section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18694_TestStep01_Check E-Course can show on the supported system")]
        [NUnit.Framework.CategoryAttribute("ECourse")]
        [NUnit.Framework.CategoryAttribute("SmokeECourse")]
        public virtual void VAN18694_TestStep01_CheckE_CourseCanShowOnTheSupportedSystem()
        {
            string[] tagsOfScenario = new string[] {
                    "ECourse",
                    "SmokeECourse"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18694_TestStep01_Check E-Course can show on the supported system", null, tagsOfScenario, argumentsOfScenario);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 12
 testRunner.Then("ECourse can show or hide \'show\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18694_TestStep02_Check the UI of Dolby Audio and eCourse mode for first time l" +
            "aunch Vantage")]
        [NUnit.Framework.CategoryAttribute("ECourse")]
        public virtual void VAN18694_TestStep02_CheckTheUIOfDolbyAudioAndECourseModeForFirstTimeLaunchVantage()
        {
            string[] tagsOfScenario = new string[] {
                    "ECourse"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18694_TestStep02_Check the UI of Dolby Audio and eCourse mode for first time l" +
                    "aunch Vantage", null, tagsOfScenario, argumentsOfScenario);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 16
     testRunner.Given("Install Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 17
  testRunner.Given("go to Audio page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 18
  testRunner.Given("Jump to audio smart settings section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 19
  testRunner.Then("The UI of Dolby Audio and eCourse mode for first time launch Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18694_TestStep03_Check the ui display position of eCourse mode follow UI spec")]
        [NUnit.Framework.CategoryAttribute("ECourse")]
        public virtual void VAN18694_TestStep03_CheckTheUiDisplayPositionOfECourseModeFollowUISpec()
        {
            string[] tagsOfScenario = new string[] {
                    "ECourse"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18694_TestStep03_Check the ui display position of eCourse mode follow UI spec", null, tagsOfScenario, argumentsOfScenario);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 23
 testRunner.Then("The UI display position of eCourse mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 24
 testRunner.Then("Take Screen Shot TestStep03 in 18694 under HSScreenShotResult", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18694_TestStep04_Check the description of E-Course")]
        [NUnit.Framework.CategoryAttribute("ECourse")]
        public virtual void VAN18694_TestStep04_CheckTheDescriptionOfE_Course()
        {
            string[] tagsOfScenario = new string[] {
                    "ECourse"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18694_TestStep04_Check the description of E-Course", null, tagsOfScenario, argumentsOfScenario);
#line 27
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "desc"});
                table28.AddRow(new string[] {
                            "E-Course",
                            @"This function is useful for on-line courses when there are voice interactions between teachers and students. When enabled, Dolby audio automatically changes to Voice mode. Meanwhile, features such as beamforming, acoustic echo cancellation, and keyboard noise suppression will be turned on to improve the voice input."});
#line 28
 testRunner.Then("The Audio Smart settings description should be correct", ((string)(null)), table28, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18694_TestStep05_Check minimize refresh pages reopen Vantage and E-Course can " +
            "show")]
        [NUnit.Framework.CategoryAttribute("ECourse")]
        public virtual void VAN18694_TestStep05_CheckMinimizeRefreshPagesReopenVantageAndE_CourseCanShow()
        {
            string[] tagsOfScenario = new string[] {
                    "ECourse"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18694_TestStep05_Check minimize refresh pages reopen Vantage and E-Course can " +
                    "show", null, tagsOfScenario, argumentsOfScenario);
#line 33
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 34
 testRunner.Then("ECourse can show or hide \'show\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 35
 testRunner.Given("go to Audio page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 36
 testRunner.Given("Jump to audio smart settings section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 37
 testRunner.Then("ECourse can show or hide \'show\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "desc"});
                table29.AddRow(new string[] {
                            "E-Course",
                            @"This function is useful for on-line courses when there are voice interactions between teachers and students. When enabled, Dolby audio automatically changes to Voice mode. Meanwhile, features such as beamforming, acoustic echo cancellation, and keyboard noise suppression will be turned on to improve the voice input."});
#line 38
 testRunner.Then("The Audio Smart settings description should be correct", ((string)(null)), table29, "Then ");
#line hidden
#line 41
 testRunner.When("Get audio smart settings section toggle states", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 42
 testRunner.Given("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 43
 testRunner.Given("go to Audio page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 44
 testRunner.Given("Jump to audio smart settings section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 45
 testRunner.Then("audio smart settings section toggle states not change", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 46
 testRunner.Then("ECourse can show or hide \'show\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "desc"});
                table30.AddRow(new string[] {
                            "E-Course",
                            @"This function is useful for on-line courses when there are voice interactions between teachers and students. When enabled, Dolby audio automatically changes to Voice mode. Meanwhile, features such as beamforming, acoustic echo cancellation, and keyboard noise suppression will be turned on to improve the voice input."});
#line 47
 testRunner.Then("The Audio Smart settings description should be correct", ((string)(null)), table30, "Then ");
#line hidden
#line 50
 testRunner.When("Minimize vantage conservation mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 51
 testRunner.Then("audio smart settings section toggle states not change", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 52
 testRunner.Then("ECourse can show or hide \'show\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "desc"});
                table31.AddRow(new string[] {
                            "E-Course",
                            @"This function is useful for on-line courses when there are voice interactions between teachers and students. When enabled, Dolby audio automatically changes to Voice mode. Meanwhile, features such as beamforming, acoustic echo cancellation, and keyboard noise suppression will be turned on to improve the voice input."});
#line 53
 testRunner.Then("The Audio Smart settings description should be correct", ((string)(null)), table31, "Then ");
#line hidden
#line 56
 testRunner.When("Relaungh vantage conservation mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 57
 testRunner.Given("go to Audio page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 58
 testRunner.Given("Jump to audio smart settings section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 59
 testRunner.Then("audio smart settings section toggle states not change", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 60
 testRunner.Then("ECourse can show or hide \'show\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "desc"});
                table32.AddRow(new string[] {
                            "E-Course",
                            @"This function is useful for on-line courses when there are voice interactions between teachers and students. When enabled, Dolby audio automatically changes to Voice mode. Meanwhile, features such as beamforming, acoustic echo cancellation, and keyboard noise suppression will be turned on to improve the voice input."});
#line 61
 testRunner.Then("The Audio Smart settings description should be correct", ((string)(null)), table32, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18694_TestStep06_Check resize Vantage and E-Course can show")]
        [NUnit.Framework.CategoryAttribute("ECourse")]
        public virtual void VAN18694_TestStep06_CheckResizeVantageAndE_CourseCanShow()
        {
            string[] tagsOfScenario = new string[] {
                    "ECourse"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18694_TestStep06_Check resize Vantage and E-Course can show", null, tagsOfScenario, argumentsOfScenario);
#line 66
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                            "isSession",
                            "width",
                            "height",
                            "classname",
                            "windowname"});
                table33.AddRow(new string[] {
                            "yes",
                            "500",
                            "500",
                            "",
                            ""});
#line 67
 testRunner.Given("Resize the window", ((string)(null)), table33, "Given ");
#line hidden
#line 70
 testRunner.Given("Jump to audio smart settings section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 71
 testRunner.Given("Type in \"{PGDN}\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 72
 testRunner.Then("Take Screen Shot TestStep06 in 18694 under HSScreenShotResult", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 73
 testRunner.Then("ECourse can show or hide \'show\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18694_TestStep08_Check Dolby Audio description and E-Course can keep and Dolby" +
            " Audio other elements hide")]
        [NUnit.Framework.CategoryAttribute("ECourse")]
        public virtual void VAN18694_TestStep08_CheckDolbyAudioDescriptionAndE_CourseCanKeepAndDolbyAudioOtherElementsHide()
        {
            string[] tagsOfScenario = new string[] {
                    "ECourse"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18694_TestStep08_Check Dolby Audio description and E-Course can keep and Dolby" +
                    " Audio other elements hide", null, tagsOfScenario, argumentsOfScenario);
#line 76
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table34.AddRow(new string[] {
                            "Dolby audio",
                            "on"});
                table34.AddRow(new string[] {
                            "E-Course",
                            "on"});
#line 77
 testRunner.Given("Turn on or off the master toggle within Audio smart settings", ((string)(null)), table34, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table35.AddRow(new string[] {
                            "Dolby audio",
                            "off"});
                table35.AddRow(new string[] {
                            "E-Course",
                            "off"});
#line 81
 testRunner.When("Turn on or off the master toggle within Audio smart settings", ((string)(null)), table35, "When ");
#line hidden
#line 85
 testRunner.Then("only keep the description of Dolby Audio other elements of Dolby Audio will hide " +
                        "or show \'hide\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 86
 testRunner.Then("ECourse can show or hide \'show\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "desc"});
                table36.AddRow(new string[] {
                            "E-Course",
                            @"This function is useful for on-line courses when there are voice interactions between teachers and students. When enabled, Dolby audio automatically changes to Voice mode. Meanwhile, features such as beamforming, acoustic echo cancellation, and keyboard noise suppression will be turned on to improve the voice input."});
                table36.AddRow(new string[] {
                            "Dolby audio",
                            "Select the mode as you desired from the following. You also can check the \"Automa" +
                                "tically optimize audio for ...\" checkbox. When selected, Dolby audio automatical" +
                                "ly picks up the best audio effect for you according to the modes you are in."});
#line 87
 testRunner.Then("The Audio Smart settings description should be correct", ((string)(null)), table36, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18694_TestStep09_Check Dolby Audio description and E-Course can keep and Dolby" +
            " Audio other elements show")]
        [NUnit.Framework.CategoryAttribute("ECourse")]
        public virtual void VAN18694_TestStep09_CheckDolbyAudioDescriptionAndE_CourseCanKeepAndDolbyAudioOtherElementsShow()
        {
            string[] tagsOfScenario = new string[] {
                    "ECourse"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18694_TestStep09_Check Dolby Audio description and E-Course can keep and Dolby" +
                    " Audio other elements show", null, tagsOfScenario, argumentsOfScenario);
#line 93
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 94
 testRunner.Given("\"Get\" Dolby audio two checkbox states", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table37.AddRow(new string[] {
                            "Dolby audio",
                            "off"});
                table37.AddRow(new string[] {
                            "E-Course",
                            "off"});
#line 95
 testRunner.Given("Turn on or off the master toggle within Audio smart settings", ((string)(null)), table37, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table38.AddRow(new string[] {
                            "Dolby audio",
                            "on"});
#line 99
 testRunner.When("Turn on or off the master toggle within Audio smart settings", ((string)(null)), table38, "When ");
#line hidden
#line 102
 testRunner.Given("\"Check\" Dolby audio two checkbox states", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 103
 testRunner.Then("only keep the description of Dolby Audio other elements of Dolby Audio will hide " +
                        "or show \'show\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 104
 testRunner.Then("ECourse can show or hide \'show\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "desc"});
                table39.AddRow(new string[] {
                            "E-Course",
                            @"This function is useful for on-line courses when there are voice interactions between teachers and students. When enabled, Dolby audio automatically changes to Voice mode. Meanwhile, features such as beamforming, acoustic echo cancellation, and keyboard noise suppression will be turned on to improve the voice input."});
                table39.AddRow(new string[] {
                            "Dolby audio",
                            "Select the mode as you desired from the following. You also can check the \"Automa" +
                                "tically optimize audio for ...\" checkbox. When selected, Dolby audio automatical" +
                                "ly picks up the best audio effect for you according to the modes you are in."});
#line 105
 testRunner.Then("The Audio Smart settings description should be correct", ((string)(null)), table39, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18694_TestStep10_Check E-Course is off and Dolby audio is on and Audio smart s" +
            "ettings elements status show incorrect")]
        [NUnit.Framework.CategoryAttribute("ECourse")]
        public virtual void VAN18694_TestStep10_CheckE_CourseIsOffAndDolbyAudioIsOnAndAudioSmartSettingsElementsStatusShowIncorrect()
        {
            string[] tagsOfScenario = new string[] {
                    "ECourse"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18694_TestStep10_Check E-Course is off and Dolby audio is on and Audio smart s" +
                    "ettings elements status show incorrect", null, tagsOfScenario, argumentsOfScenario);
#line 111
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table40.AddRow(new string[] {
                            "Dolby audio",
                            "off"});
                table40.AddRow(new string[] {
                            "E-Course",
                            "off"});
#line 112
 testRunner.Given("Turn on or off the master toggle within Audio smart settings", ((string)(null)), table40, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table41.AddRow(new string[] {
                            "E-Course",
                            "on"});
#line 116
 testRunner.When("Turn on or off the master toggle within Audio smart settings", ((string)(null)), table41, "When ");
#line hidden
                TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table42.AddRow(new string[] {
                            "Dolby audio",
                            "on"});
                table42.AddRow(new string[] {
                            "Movie",
                            "disable"});
                table42.AddRow(new string[] {
                            "Music",
                            "disable"});
                table42.AddRow(new string[] {
                            "Game",
                            "disable"});
                table42.AddRow(new string[] {
                            "Voice",
                            "disable"});
                table42.AddRow(new string[] {
                            "Voice",
                            "on"});
                table42.AddRow(new string[] {
                            "Automatic Voip",
                            "disable"});
                table42.AddRow(new string[] {
                            "Automatic Entertainment",
                            "disable"});
                table42.AddRow(new string[] {
                            "E-Course",
                            "on"});
#line 119
 testRunner.Then("the master toggle is on or off or enable or disable within Audio smart settings", ((string)(null)), table42, "Then ");
#line hidden
#line 131
 testRunner.Then("only keep the description of Dolby Audio other elements of Dolby Audio will hide " +
                        "or show \'show\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 132
 testRunner.Given("Turn on or off the narrator \'on\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 134
 testRunner.Given("Pin toolbar to taskbar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 135
 testRunner.Given("launch toolbar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 136
 testRunner.Given("Waiting 10 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 137
 testRunner.Then("the ECourse toggle status is on or off within toolbar \'on\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 139
 testRunner.Given("Turn on or off the narrator \'off\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18694_TestStep11_Check E-Course is on and Dolby audio is on and Audio smart se" +
            "ttings elements status show incorrect")]
        [NUnit.Framework.CategoryAttribute("ECourse")]
        public virtual void VAN18694_TestStep11_CheckE_CourseIsOnAndDolbyAudioIsOnAndAudioSmartSettingsElementsStatusShowIncorrect()
        {
            string[] tagsOfScenario = new string[] {
                    "ECourse"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18694_TestStep11_Check E-Course is on and Dolby audio is on and Audio smart se" +
                    "ttings elements status show incorrect", null, tagsOfScenario, argumentsOfScenario);
#line 143
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table43.AddRow(new string[] {
                            "Dolby audio",
                            "on"});
                table43.AddRow(new string[] {
                            "E-Course",
                            "off"});
#line 144
 testRunner.Given("Turn on or off the master toggle within Audio smart settings", ((string)(null)), table43, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table44.AddRow(new string[] {
                            "E-Course",
                            "on"});
#line 148
 testRunner.When("Turn on or off the master toggle within Audio smart settings", ((string)(null)), table44, "When ");
#line hidden
                TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table45.AddRow(new string[] {
                            "Dolby audio",
                            "on"});
                table45.AddRow(new string[] {
                            "Movie",
                            "disable"});
                table45.AddRow(new string[] {
                            "Music",
                            "disable"});
                table45.AddRow(new string[] {
                            "Game",
                            "disable"});
                table45.AddRow(new string[] {
                            "Voice",
                            "disable"});
                table45.AddRow(new string[] {
                            "Voice",
                            "on"});
                table45.AddRow(new string[] {
                            "Automatic Voip",
                            "disable"});
                table45.AddRow(new string[] {
                            "Automatic Entertainment",
                            "disable"});
                table45.AddRow(new string[] {
                            "E-Course",
                            "on"});
#line 151
 testRunner.Then("the master toggle is on or off or enable or disable within Audio smart settings", ((string)(null)), table45, "Then ");
#line hidden
#line 163
 testRunner.Given("Turn on or off the narrator \'on\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 165
 testRunner.Given("Pin toolbar to taskbar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 166
 testRunner.Given("launch toolbar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 167
 testRunner.Given("Waiting 10 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 168
 testRunner.Then("the ECourse toggle status is on or off within toolbar \'on\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 170
 testRunner.Given("Turn on or off the narrator \'off\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18694_TestStep12_Check E-Course is off and Dolby audio is on and movie is sele" +
            "ct and Audio smart settings elements status show incorrect")]
        [NUnit.Framework.CategoryAttribute("ECourse")]
        public virtual void VAN18694_TestStep12_CheckE_CourseIsOffAndDolbyAudioIsOnAndMovieIsSelectAndAudioSmartSettingsElementsStatusShowIncorrect()
        {
            string[] tagsOfScenario = new string[] {
                    "ECourse"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18694_TestStep12_Check E-Course is off and Dolby audio is on and movie is sele" +
                    "ct and Audio smart settings elements status show incorrect", null, tagsOfScenario, argumentsOfScenario);
#line 173
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table46.AddRow(new string[] {
                            "Dolby audio",
                            "on"});
                table46.AddRow(new string[] {
                            "E-Course",
                            "off"});
                table46.AddRow(new string[] {
                            "Movie",
                            "on"});
                table46.AddRow(new string[] {
                            "E-Course",
                            "on"});
#line 174
 testRunner.Given("Turn on or off the master toggle within Audio smart settings", ((string)(null)), table46, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table47.AddRow(new string[] {
                            "E-Course",
                            "off"});
#line 180
 testRunner.When("Turn on or off the master toggle within Audio smart settings", ((string)(null)), table47, "When ");
#line hidden
                TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table48.AddRow(new string[] {
                            "Dolby audio",
                            "on"});
                table48.AddRow(new string[] {
                            "Movie",
                            "enable"});
                table48.AddRow(new string[] {
                            "Music",
                            "enable"});
                table48.AddRow(new string[] {
                            "Game",
                            "enable"});
                table48.AddRow(new string[] {
                            "Voice",
                            "enable"});
                table48.AddRow(new string[] {
                            "Movie",
                            "on"});
                table48.AddRow(new string[] {
                            "Voice",
                            "off"});
                table48.AddRow(new string[] {
                            "Automatic Voip",
                            "enable"});
                table48.AddRow(new string[] {
                            "Automatic Entertainment",
                            "enable"});
                table48.AddRow(new string[] {
                            "E-Course",
                            "off"});
#line 183
 testRunner.Then("the master toggle is on or off or enable or disable within Audio smart settings", ((string)(null)), table48, "Then ");
#line hidden
#line 196
 testRunner.Given("Turn on or off the narrator \'on\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 198
 testRunner.Given("Pin toolbar to taskbar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 199
 testRunner.Given("launch toolbar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 200
 testRunner.Given("Waiting 10 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 201
 testRunner.Then("the ECourse toggle status is on or off within toolbar \'off\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 203
 testRunner.Given("Turn on or off the narrator \'off\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18694_TestStep13_Check E-Course is off and Dolby audio is off and Audio smart " +
            "settings elements status show incorrect")]
        [NUnit.Framework.CategoryAttribute("ECourse")]
        public virtual void VAN18694_TestStep13_CheckE_CourseIsOffAndDolbyAudioIsOffAndAudioSmartSettingsElementsStatusShowIncorrect()
        {
            string[] tagsOfScenario = new string[] {
                    "ECourse"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18694_TestStep13_Check E-Course is off and Dolby audio is off and Audio smart " +
                    "settings elements status show incorrect", null, tagsOfScenario, argumentsOfScenario);
#line 206
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table49.AddRow(new string[] {
                            "Dolby audio",
                            "on"});
                table49.AddRow(new string[] {
                            "E-Course",
                            "on"});
#line 207
 testRunner.Given("Turn on or off the master toggle within Audio smart settings", ((string)(null)), table49, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table50.AddRow(new string[] {
                            "Dolby audio",
                            "off"});
#line 211
 testRunner.When("Turn on or off the master toggle within Audio smart settings", ((string)(null)), table50, "When ");
#line hidden
                TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table51.AddRow(new string[] {
                            "Dolby audio",
                            "off"});
                table51.AddRow(new string[] {
                            "E-Course",
                            "off"});
#line 214
 testRunner.Then("the master toggle is on or off or enable or disable within Audio smart settings", ((string)(null)), table51, "Then ");
#line hidden
#line 218
 testRunner.Then("only keep the description of Dolby Audio other elements of Dolby Audio will hide " +
                        "or show \'hide\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 219
 testRunner.Then("ECourse can show or hide \'show\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "desc"});
                table52.AddRow(new string[] {
                            "E-Course",
                            @"This function is useful for on-line courses when there are voice interactions between teachers and students. When enabled, Dolby audio automatically changes to Voice mode. Meanwhile, features such as beamforming, acoustic echo cancellation, and keyboard noise suppression will be turned on to improve the voice input."});
                table52.AddRow(new string[] {
                            "Dolby audio",
                            "Select the mode as you desired from the following. You also can check the \"Automa" +
                                "tically optimize audio for ...\" checkbox. When selected, Dolby audio automatical" +
                                "ly picks up the best audio effect for you according to the modes you are in."});
#line 220
 testRunner.Then("The Audio Smart settings description should be correct", ((string)(null)), table52, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table53.AddRow(new string[] {
                            "E-Course",
                            "off"});
#line 224
 testRunner.Then("the master toggle is on or off or enable or disable within Audio smart settings", ((string)(null)), table53, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18694_TestStep14_Check E-Course is off and Dolby audio is off and Audio smart " +
            "settings elements status show incorrect")]
        [NUnit.Framework.CategoryAttribute("ECourse")]
        public virtual void VAN18694_TestStep14_CheckE_CourseIsOffAndDolbyAudioIsOffAndAudioSmartSettingsElementsStatusShowIncorrect()
        {
            string[] tagsOfScenario = new string[] {
                    "ECourse"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18694_TestStep14_Check E-Course is off and Dolby audio is off and Audio smart " +
                    "settings elements status show incorrect", null, tagsOfScenario, argumentsOfScenario);
#line 229
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table54.AddRow(new string[] {
                            "Dolby audio",
                            "on"});
                table54.AddRow(new string[] {
                            "E-Course",
                            "on"});
#line 230
 testRunner.Given("Turn on or off the master toggle within Audio smart settings", ((string)(null)), table54, "Given ");
#line hidden
#line 234
 testRunner.When("Turn on or off the Dolby Audio button within Dolby Audio app \'off\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 235
 testRunner.Then("only keep the description of Dolby Audio other elements of Dolby Audio will hide " +
                        "or show \'hide\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 236
 testRunner.Then("ECourse can show or hide \'show\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "desc"});
                table55.AddRow(new string[] {
                            "E-Course",
                            @"This function is useful for on-line courses when there are voice interactions between teachers and students. When enabled, Dolby audio automatically changes to Voice mode. Meanwhile, features such as beamforming, acoustic echo cancellation, and keyboard noise suppression will be turned on to improve the voice input."});
                table55.AddRow(new string[] {
                            "Dolby audio",
                            "Select the mode as you desired from the following. You also can check the \"Automa" +
                                "tically optimize audio for ...\" checkbox. When selected, Dolby audio automatical" +
                                "ly picks up the best audio effect for you according to the modes you are in."});
#line 237
 testRunner.Then("The Audio Smart settings description should be correct", ((string)(null)), table55, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table56.AddRow(new string[] {
                            "E-Course",
                            "off"});
#line 241
 testRunner.Then("the master toggle is on or off or enable or disable within Audio smart settings", ((string)(null)), table56, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18694_TestStep15_Check E-Course is off and Dolby audio is off and Audio smart " +
            "settings elements status show incorrect")]
        [NUnit.Framework.CategoryAttribute("ECourse")]
        public virtual void VAN18694_TestStep15_CheckE_CourseIsOffAndDolbyAudioIsOffAndAudioSmartSettingsElementsStatusShowIncorrect()
        {
            string[] tagsOfScenario = new string[] {
                    "ECourse"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18694_TestStep15_Check E-Course is off and Dolby audio is off and Audio smart " +
                    "settings elements status show incorrect", null, tagsOfScenario, argumentsOfScenario);
#line 246
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table57.AddRow(new string[] {
                            "Dolby audio",
                            "on"});
                table57.AddRow(new string[] {
                            "E-Course",
                            "on"});
#line 247
 testRunner.Given("Turn on or off the master toggle within Audio smart settings", ((string)(null)), table57, "Given ");
#line hidden
#line 251
 testRunner.When("Get audio smart settings section toggle states", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 252
 testRunner.Given("Install Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 253
 testRunner.Given("go to Audio page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 254
 testRunner.Given("Jump to audio smart settings section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 255
 testRunner.Then("audio smart settings section toggle states not change", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table58.AddRow(new string[] {
                            "Movie",
                            "enable"});
                table58.AddRow(new string[] {
                            "Music",
                            "enable"});
                table58.AddRow(new string[] {
                            "Game",
                            "enable"});
                table58.AddRow(new string[] {
                            "Voice",
                            "enable"});
                table58.AddRow(new string[] {
                            "Automatic Voip",
                            "enable"});
                table58.AddRow(new string[] {
                            "Automatic Entertainment",
                            "enable"});
                table58.AddRow(new string[] {
                            "Automatic Entertainment",
                            "off"});
                table58.AddRow(new string[] {
                            "Dolby audio",
                            "on"});
                table58.AddRow(new string[] {
                            "E-Course",
                            "off"});
#line 256
 testRunner.Then("the master toggle is on or off or enable or disable within Audio smart settings", ((string)(null)), table58, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
