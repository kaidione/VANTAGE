// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.4.0.0
//      SpecFlow Generator Version:3.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace LenovoVantageTest.Features.UWP.Vantage_HardwareSettings
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("VAN18719_SmartMotionAlarm")]
    public partial class VAN18719_SmartMotionAlarmFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "VAN18719_SmartMotionAlarm.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/UWP/Vantage_HardwareSettings", "VAN18719_SmartMotionAlarm", "\tTest Case： https://lnvusjira.lenovonet.lenovo.local/browse/VAN-18719\r\n\tAuthor： M" +
                    "arcus", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18719_Step00_Enable Camera Status for SmartMotionAlarm")]
        [NUnit.Framework.CategoryAttribute("SmartMotionAlarm")]
        public virtual void VAN18719_Step00_EnableCameraStatusForSmartMotionAlarm()
        {
            string[] tagsOfScenario = new string[] {
                    "SmartMotionAlarm"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18719_Step00_Enable Camera Status for SmartMotionAlarm", null, tagsOfScenario, argumentsOfScenario);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.Given("turn on narrator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.Given("turn on the Allow access to the camera toggle on this device", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
 testRunner.Given("turn on the Allow apps to access your camera", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 10
 testRunner.Given("turn on the Allow desktop apps to access your camera", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 11
 testRunner.Given("turn on Lenovo Vantage permission for Camera from system settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 12
 testRunner.When("Launch toolbar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 13
 testRunner.When("turn off Camera Privacy from Toolbar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
 testRunner.When("Close toolbar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18719_Step1_Step45_Step46_default value for SmartMotionAlarm")]
        [NUnit.Framework.CategoryAttribute("SmartMotionAlarm")]
        [NUnit.Framework.CategoryAttribute("Marcus")]
        public virtual void VAN18719_Step1_Step45_Step46_DefaultValueForSmartMotionAlarm()
        {
            string[] tagsOfScenario = new string[] {
                    "SmartMotionAlarm",
                    "Marcus"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18719_Step1_Step45_Step46_default value for SmartMotionAlarm", null, tagsOfScenario, argumentsOfScenario);
#line 17
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 18
 testRunner.Given("Close Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 19
 testRunner.And("Uninstall the lenovo vatage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 20
 testRunner.And("Install Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
 testRunner.And("Hover the mouse on the \'Device\' button using the automationId specified with json" +
                        " path \'$.Navbar.device\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 23
 testRunner.And("Go to Smart Assist page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
 testRunner.And("verify intelligent sensing \'exists\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
 testRunner.When("click intelligent sensing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 26
 testRunner.Then("verify default status is \'Disabled\' for Smart Motion Alarm toggle", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 27
 testRunner.Then("verify default time is \'10 seconds\' for Alarm", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 28
 testRunner.When("The \'alarm\' drop down list will be hidden or shown \'shown\' for SmartMotionAlarm", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 30
 testRunner.When("wait 30 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table110 = new TechTalk.SpecFlow.Table(new string[] {
                            "Time Options"});
                table110.AddRow(new string[] {
                            "10 seconds"});
                table110.AddRow(new string[] {
                            "20 seconds"});
                table110.AddRow(new string[] {
                            "30 seconds"});
                table110.AddRow(new string[] {
                            "1 minute"});
                table110.AddRow(new string[] {
                            "Never stop"});
#line 31
 testRunner.Then("verify photo or time list Item", ((string)(null)), table110, "Then ");
#line hidden
#line 38
 testRunner.When("The \'alarm\' drop down list will be hidden or shown \'hidden\' for SmartMotionAlarm", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 40
 testRunner.Then("verify default status is \'Disabled\' for Enable Feature", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 41
 testRunner.When("\'Enable\' Enable Feature", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 42
 testRunner.Then("verify default number is \'5\' for Photo number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 43
 testRunner.When("The \'photo\' drop down list will be hidden or shown \'shown\' for SmartMotionAlarm", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 45
 testRunner.When("wait 30 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table111 = new TechTalk.SpecFlow.Table(new string[] {
                            "Photo Options"});
                table111.AddRow(new string[] {
                            "5"});
                table111.AddRow(new string[] {
                            "10"});
                table111.AddRow(new string[] {
                            "15"});
                table111.AddRow(new string[] {
                            "20"});
                table111.AddRow(new string[] {
                            "25"});
                table111.AddRow(new string[] {
                            "30"});
#line 46
 testRunner.Then("verify photo or time list Item", ((string)(null)), table111, "Then ");
#line hidden
#line 54
 testRunner.When("The \'photo\' drop down list will be hidden or shown \'hidden\' for SmartMotionAlarm", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18719_Step39_ReinstallLISSDriver_DefaultValueReturn")]
        [NUnit.Framework.CategoryAttribute("Marcus")]
        [NUnit.Framework.CategoryAttribute("SmartMotionAlarm")]
        public virtual void VAN18719_Step39_ReinstallLISSDriver_DefaultValueReturn()
        {
            string[] tagsOfScenario = new string[] {
                    "Marcus",
                    "SmartMotionAlarm"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18719_Step39_ReinstallLISSDriver_DefaultValueReturn", null, tagsOfScenario, argumentsOfScenario);
#line 58
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 59
 testRunner.Given("Hover the mouse on the \'Device\' button using the automationId specified with json" +
                        " path \'$.Navbar.device\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 60
 testRunner.And("Go to Smart Assist page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 61
 testRunner.And("click intelligent sensing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 62
 testRunner.And("toggle \'On\' for Smart Motion Alarm", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 63
 testRunner.When("The \'alarm\' drop down list will be hidden or shown \'shown\' for SmartMotionAlarm", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 65
 testRunner.When("wait 5 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 66
 testRunner.When("select time option \'20 seconds\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 67
 testRunner.And("\'Enable\' Enable Feature", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 68
 testRunner.When("The \'photo\' drop down list will be hidden or shown \'shown\' for SmartMotionAlarm", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 70
 testRunner.When("wait 30 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 71
 testRunner.And("select photo number \'15\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 72
 testRunner.And("close lenovo vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 73
 testRunner.And("uninstall \'Lenovo Intelligent Sensing\' from device manager", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 74
 testRunner.And("install \'Lenovo Intelligent Sensing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 75
 testRunner.And("ReLaunch Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 76
 testRunner.And("Hover the mouse on the \'Device\' button using the automationId specified with json" +
                        " path \'$.Navbar.device\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 77
 testRunner.And("Go to Smart Assist page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 78
 testRunner.And("click intelligent sensing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 79
 testRunner.Then("verify default status is \'Disabled\' for Smart Motion Alarm toggle", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 80
 testRunner.Then("verify default time is \'10 seconds\' for Alarm", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 81
 testRunner.Then("verify default status is \'Disabled\' for Enable Feature", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 82
 testRunner.When("\'Enable\' Enable Feature", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 83
 testRunner.When("wait 30 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 84
 testRunner.Then("verify default number is \'5\' for Photo number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18719_Step43_NO smart assist link on unsupport machines")]
        [NUnit.Framework.CategoryAttribute("Marcus")]
        [NUnit.Framework.CategoryAttribute("NotSupportSmartAlarm")]
        [NUnit.Framework.CategoryAttribute("SmokeNoSmartMotionAlarm")]
        public virtual void VAN18719_Step43_NOSmartAssistLinkOnUnsupportMachines()
        {
            string[] tagsOfScenario = new string[] {
                    "Marcus",
                    "NotSupportSmartAlarm",
                    "SmokeNoSmartMotionAlarm"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18719_Step43_NO smart assist link on unsupport machines", null, tagsOfScenario, argumentsOfScenario);
#line 87
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 88
 testRunner.Given("Hover the mouse on the \'Device\' button using the automationId specified with json" +
                        " path \'$.Navbar.device\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 89
 testRunner.And("Go to Smart Assist page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 90
 testRunner.And("verify intelligent sensing \'NOT exist\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18719_Step44_compare with GUI spec for defined strings")]
        [NUnit.Framework.CategoryAttribute("SmartMotionAlarm")]
        [NUnit.Framework.CategoryAttribute("Marcus")]
        [NUnit.Framework.CategoryAttribute("SmokeSmartMotionAlarm")]
        public virtual void VAN18719_Step44_CompareWithGUISpecForDefinedStrings()
        {
            string[] tagsOfScenario = new string[] {
                    "SmartMotionAlarm",
                    "Marcus",
                    "SmokeSmartMotionAlarm"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18719_Step44_compare with GUI spec for defined strings", null, tagsOfScenario, argumentsOfScenario);
#line 93
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 94
 testRunner.Given("Hover the mouse on the \'Device\' button using the automationId specified with json" +
                        " path \'$.Navbar.device\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 95
 testRunner.Given("turn on narrator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 96
 testRunner.Given("turn on the Allow access to the camera toggle on this device", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 97
 testRunner.Given("turn on the Allow apps to access your camera", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 98
 testRunner.Given("turn on the Allow desktop apps to access your camera", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 99
 testRunner.Given("turn on Lenovo Vantage permission for Camera from system settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 100
 testRunner.Given("Launch toolbar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 101
 testRunner.When("turn off Camera Privacy from Toolbar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 102
 testRunner.When("Close toolbar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 103
 testRunner.And("Go to Smart Assist page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 104
 testRunner.When("click intelligent sensing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table112 = new TechTalk.SpecFlow.Table(new string[] {
                            "title or describe",
                            "des"});
                table112.AddRow(new string[] {
                            "title",
                            "$.device.smartAssist.antiTheft.title"});
                table112.AddRow(new string[] {
                            "describe1",
                            "$.device.smartAssist.antiTheft.desc1"});
                table112.AddRow(new string[] {
                            "describe2",
                            "$.device.smartAssist.antiTheft.desc2"});
                table112.AddRow(new string[] {
                            "attention1",
                            "$.device.smartAssist.antiTheft.note.description1"});
                table112.AddRow(new string[] {
                            "attention2",
                            "$.device.smartAssist.antiTheft.note.description2"});
                table112.AddRow(new string[] {
                            "alarmtimetitle",
                            "$.device.smartAssist.antiTheft.alarm.title"});
                table112.AddRow(new string[] {
                            "takephotostitle",
                            "$.device.smartAssist.antiTheft.allowCamera.title"});
                table112.AddRow(new string[] {
                            "describe3",
                            "$.device.smartAssist.antiTheft.allowCamera.describe"});
#line 115
 testRunner.Then("verify title or describe Item", ((string)(null)), table112, "Then ");
#line hidden
#line 125
 testRunner.When("\'Enable\' Enable Feature", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table113 = new TechTalk.SpecFlow.Table(new string[] {
                            "title or describe",
                            "des"});
                table113.AddRow(new string[] {
                            "showPhoto",
                            "$.device.smartAssist.antiTheft.showPhoto.title"});
                table113.AddRow(new string[] {
                            "ViewPhotos",
                            "$.device.smartAssist.antiTheft.showPhoto.link"});
#line 129
 testRunner.Then("verify title or describe Item", ((string)(null)), table113, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18719_Step45_default value for SmartMotionAlarm")]
        [NUnit.Framework.CategoryAttribute("SmartMotionAlarm")]
        [NUnit.Framework.CategoryAttribute("Marcus")]
        public virtual void VAN18719_Step45_DefaultValueForSmartMotionAlarm()
        {
            string[] tagsOfScenario = new string[] {
                    "SmartMotionAlarm",
                    "Marcus"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18719_Step45_default value for SmartMotionAlarm", null, tagsOfScenario, argumentsOfScenario);
#line 135
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 136
 testRunner.When("Only Print \'Please check TestStep01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18719_Step46_default value for SmartMotionAlarm")]
        [NUnit.Framework.CategoryAttribute("SmartMotionAlarm")]
        [NUnit.Framework.CategoryAttribute("Marcus")]
        public virtual void VAN18719_Step46_DefaultValueForSmartMotionAlarm()
        {
            string[] tagsOfScenario = new string[] {
                    "SmartMotionAlarm",
                    "Marcus"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18719_Step46_default value for SmartMotionAlarm", null, tagsOfScenario, argumentsOfScenario);
#line 139
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 140
 testRunner.When("Only Print \'Please check TestStep01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18719_Step47_changed value last to next launch SmartMotionAlarm")]
        [NUnit.Framework.CategoryAttribute("SmartMotionAlarm")]
        [NUnit.Framework.CategoryAttribute("Marcus")]
        public virtual void VAN18719_Step47_ChangedValueLastToNextLaunchSmartMotionAlarm()
        {
            string[] tagsOfScenario = new string[] {
                    "SmartMotionAlarm",
                    "Marcus"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18719_Step47_changed value last to next launch SmartMotionAlarm", null, tagsOfScenario, argumentsOfScenario);
#line 143
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 144
 testRunner.Given("Hover the mouse on the \'Device\' button using the automationId specified with json" +
                        " path \'$.Navbar.device\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 145
 testRunner.And("Go to Smart Assist page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 146
 testRunner.And("click intelligent sensing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 147
 testRunner.When("The \'alarm\' drop down list will be hidden or shown \'shown\' for SmartMotionAlarm", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 149
 testRunner.When("wait 30 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 150
 testRunner.When("select time option \'20 seconds\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 151
 testRunner.And("\'Enable\' Enable Feature", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 152
 testRunner.When("The \'photo\' drop down list will be hidden or shown \'shown\' for SmartMotionAlarm", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 154
 testRunner.When("wait 30 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 155
 testRunner.And("select photo number \'15\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 156
 testRunner.When("wait 5 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 157
 testRunner.And("close lenovo vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 158
 testRunner.And("ReLaunch Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 159
 testRunner.And("Hover the mouse on the \'Device\' button using the automationId specified with json" +
                        " path \'$.Navbar.device\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 160
 testRunner.And("Go to Smart Assist page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 161
 testRunner.And("click intelligent sensing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 162
 testRunner.Then("verify default time is \'20 seconds\' for Alarm", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 163
 testRunner.And("verify default number is \'15\' for Photo number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18719_Step48_Step49_Step50_without access to camera, a hint and link display")]
        [NUnit.Framework.CategoryAttribute("SmartMotionAlarm")]
        [NUnit.Framework.CategoryAttribute("Marcus")]
        public virtual void VAN18719_Step48_Step49_Step50_WithoutAccessToCameraAHintAndLinkDisplay()
        {
            string[] tagsOfScenario = new string[] {
                    "SmartMotionAlarm",
                    "Marcus"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18719_Step48_Step49_Step50_without access to camera, a hint and link display", null, tagsOfScenario, argumentsOfScenario);
#line 166
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 167
 testRunner.Given("turn on the Allow apps to access your camera", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 169
 testRunner.And("Hover the mouse on the \'Device\' button using the automationId specified with json" +
                        " path \'$.Navbar.device\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 170
 testRunner.And("Go to Smart Assist page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 171
 testRunner.And("turn off the Allow apps to access your camera", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 172
 testRunner.When("click intelligent sensing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 173
 testRunner.Then("verify Enable Feature toggle is \'disabled\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 176
 testRunner.And("verify discribe \'noCameraAccess\' is \'display\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 177
 testRunner.And("verify link \'Go to Windows Settings to give access\' for Camera is \'enabled\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 178
 testRunner.When("click link \'Go to Windows Settings to give access\' for camera access", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 179
 testRunner.Then("verify Camera access with Settings is launched", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 180
 testRunner.When("turn on the Allow apps to access your camera", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 181
 testRunner.Then("verify link \'Go to Windows Settings to give access\' for Camera is \'gone\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 182
 testRunner.And("verify \'Lenovo Vantage doesn\'t have access to Camera. The function of the checkbo" +
                        "x won\'t work\' is GONE on Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 183
 testRunner.And("verify Enable Feature toggle is \'enabled\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18719_Step49_without access to camera, a hint and link display")]
        [NUnit.Framework.CategoryAttribute("SmartMotionAlarm")]
        [NUnit.Framework.CategoryAttribute("Marcus")]
        public virtual void VAN18719_Step49_WithoutAccessToCameraAHintAndLinkDisplay()
        {
            string[] tagsOfScenario = new string[] {
                    "SmartMotionAlarm",
                    "Marcus"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18719_Step49_without access to camera, a hint and link display", null, tagsOfScenario, argumentsOfScenario);
#line 186
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 187
 testRunner.When("Only Print \'Please check TestStep48\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18719_Step50_without access to camera, a hint and link display")]
        [NUnit.Framework.CategoryAttribute("SmartMotionAlarm")]
        [NUnit.Framework.CategoryAttribute("Marcus")]
        public virtual void VAN18719_Step50_WithoutAccessToCameraAHintAndLinkDisplay()
        {
            string[] tagsOfScenario = new string[] {
                    "SmartMotionAlarm",
                    "Marcus"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18719_Step50_without access to camera, a hint and link display", null, tagsOfScenario, argumentsOfScenario);
#line 190
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 191
 testRunner.When("Only Print \'Please check TestStep48\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18719_Step51_Step52_Step53_WithCameraPrivacyOn_CameraAccess")]
        [NUnit.Framework.CategoryAttribute("SmartMotionAlarm")]
        [NUnit.Framework.CategoryAttribute("Marcus")]
        public virtual void VAN18719_Step51_Step52_Step53_WithCameraPrivacyOn_CameraAccess()
        {
            string[] tagsOfScenario = new string[] {
                    "SmartMotionAlarm",
                    "Marcus"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18719_Step51_Step52_Step53_WithCameraPrivacyOn_CameraAccess", null, tagsOfScenario, argumentsOfScenario);
#line 194
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 195
 testRunner.Given("turn on the Allow apps to access your camera", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 197
 testRunner.And("Hover the mouse on the \'Device\' button using the automationId specified with json" +
                        " path \'$.Navbar.device\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 198
 testRunner.And("Go to My Device Settings page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 199
 testRunner.And("turn on Camera Privacy from Display and Camera page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 200
 testRunner.And("Hover the mouse on the \'Device\' button using the automationId specified with json" +
                        " path \'$.Navbar.device\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 201
 testRunner.And("Go to Smart Assist page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 202
 testRunner.And("click intelligent sensing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 203
 testRunner.Then("verify Enable Feature toggle is \'disabled\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 206
 testRunner.And("verify discribe \'privacyModeOn\' is \'display\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 207
 testRunner.And("verify link \'Go to Camera privacy mode to turn it off\' is \'enabled\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 208
 testRunner.When("click link \'Go to Camera privacy mode to turn it off\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 209
 testRunner.Then("verify \'Camera Privacy Mode\' toggle shows up", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 210
 testRunner.When("turn off Camera Privacy from Display and Camera page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 211
 testRunner.And("Hover the mouse on the \'Device\' button using the automationId specified with json" +
                        " path \'$.Navbar.device\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 212
 testRunner.And("Go to Smart Assist page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 213
 testRunner.And("click intelligent sensing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 214
 testRunner.Then("verify Enable Feature toggle is \'enabled\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 217
 testRunner.And("verify discribe \'privacyModeOn\' is \'Not display\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 218
 testRunner.And("verify link \'Go to Camera privacy mode to turn it off\' is \'GONE\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18719_Step52_WithCameraPrivacyOn_CameraAccess")]
        [NUnit.Framework.CategoryAttribute("SmartMotionAlarm")]
        [NUnit.Framework.CategoryAttribute("Marcus")]
        public virtual void VAN18719_Step52_WithCameraPrivacyOn_CameraAccess()
        {
            string[] tagsOfScenario = new string[] {
                    "SmartMotionAlarm",
                    "Marcus"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18719_Step52_WithCameraPrivacyOn_CameraAccess", null, tagsOfScenario, argumentsOfScenario);
#line 221
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 222
 testRunner.When("Only Print \'Please check TestStep51\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18719_Step53_WithCameraPrivacyOn_CameraAccess")]
        [NUnit.Framework.CategoryAttribute("SmartMotionAlarm")]
        [NUnit.Framework.CategoryAttribute("Marcus")]
        public virtual void VAN18719_Step53_WithCameraPrivacyOn_CameraAccess()
        {
            string[] tagsOfScenario = new string[] {
                    "SmartMotionAlarm",
                    "Marcus"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18719_Step53_WithCameraPrivacyOn_CameraAccess", null, tagsOfScenario, argumentsOfScenario);
#line 225
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 226
 testRunner.When("Only Print \'Please check TestStep51\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18719_Step54_Step55_WithCameraPrivacyOn_NoCameraAccess")]
        [NUnit.Framework.CategoryAttribute("SmartMotionAlarm")]
        [NUnit.Framework.CategoryAttribute("Marcus")]
        public virtual void VAN18719_Step54_Step55_WithCameraPrivacyOn_NoCameraAccess()
        {
            string[] tagsOfScenario = new string[] {
                    "SmartMotionAlarm",
                    "Marcus"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18719_Step54_Step55_WithCameraPrivacyOn_NoCameraAccess", null, tagsOfScenario, argumentsOfScenario);
#line 229
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 230
 testRunner.Given("Hover the mouse on the \'Device\' button using the automationId specified with json" +
                        " path \'$.Navbar.device\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 231
 testRunner.And("Go to My Device Settings page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 232
 testRunner.And("wait 10 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 233
 testRunner.And("turn on Camera Privacy from Display and Camera page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 234
 testRunner.And("turn off the Allow apps to access your camera", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 235
 testRunner.And("Hover the mouse on the \'Device\' button using the automationId specified with json" +
                        " path \'$.Navbar.device\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 236
 testRunner.And("Go to Smart Assist page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 237
 testRunner.And("click intelligent sensing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 238
 testRunner.Then("verify Enable Feature toggle is \'disabled\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 241
 testRunner.And("verify discribe \'noCameraAccess\' is \'display\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 242
 testRunner.And("verify link \'Go to Windows Settings to give access\' for Camera is \'enabled\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 243
 testRunner.When("click link \'Go to Windows Settings to give access\' for camera access", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 244
 testRunner.When("turn on the Allow apps to access your camera", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 245
 testRunner.Then("verify Enable Feature toggle is \'disabled\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 248
 testRunner.And("verify discribe \'privacyModeOn\' is \'display\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 249
 testRunner.And("verify link \'Go to Camera privacy mode to turn it off\' is \'enabled\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 250
 testRunner.And("click link \'Go to Camera privacy mode to turn it off\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 251
 testRunner.And("turn off Camera Privacy from Display and Camera page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18719_Step55_WithCameraPrivacyOn_NoCameraAccess")]
        [NUnit.Framework.CategoryAttribute("SmartMotionAlarm")]
        [NUnit.Framework.CategoryAttribute("Marcus")]
        public virtual void VAN18719_Step55_WithCameraPrivacyOn_NoCameraAccess()
        {
            string[] tagsOfScenario = new string[] {
                    "SmartMotionAlarm",
                    "Marcus"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18719_Step55_WithCameraPrivacyOn_NoCameraAccess", null, tagsOfScenario, argumentsOfScenario);
#line 254
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 255
 testRunner.When("Only Print \'Please check TestStep54\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18719_Step56_Step57_Step59_WithFSAccess")]
        [NUnit.Framework.CategoryAttribute("SmartMotionAlarm")]
        [NUnit.Framework.CategoryAttribute("Marcus")]
        public virtual void VAN18719_Step56_Step57_Step59_WithFSAccess()
        {
            string[] tagsOfScenario = new string[] {
                    "SmartMotionAlarm",
                    "Marcus"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18719_Step56_Step57_Step59_WithFSAccess", null, tagsOfScenario, argumentsOfScenario);
#line 258
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 259
 testRunner.Given("Hover the mouse on the \'Device\' button using the automationId specified with json" +
                        " path \'$.Navbar.device\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 260
 testRunner.And("Go to Smart Assist page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 261
 testRunner.And("click intelligent sensing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 262
 testRunner.And("turn off the Allow apps to access your file system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 263
 testRunner.When("click photo link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 266
 testRunner.Then("verify discribe \'noFileAccess\' is \'display\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 267
 testRunner.And("verify link \'Go to Windows Settings to give access\' for FileSystem is \'enabled\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 268
 testRunner.When("click link \'Go to Windows Settings to give access\' for file system access", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 270
 testRunner.Then("verify discribe \'noFileAccess\' is \'Not display\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 271
 testRunner.And("verify link \'Go to Windows Settings to give access\' for FileSystem is \'GONE\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 272
 testRunner.When("turn on the Allow apps to access your file system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 273
 testRunner.And("ensure no \'public\\pictures\' folder is open", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 274
 testRunner.When("click photo link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 275
 testRunner.Then("verify photo folder is open", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 276
 testRunner.And("ensure no \'public\\pictures\' folder is open", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18719_Step57_WithFSAccess")]
        [NUnit.Framework.CategoryAttribute("SmartMotionAlarm")]
        [NUnit.Framework.CategoryAttribute("Marcus")]
        public virtual void VAN18719_Step57_WithFSAccess()
        {
            string[] tagsOfScenario = new string[] {
                    "SmartMotionAlarm",
                    "Marcus"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18719_Step57_WithFSAccess", null, tagsOfScenario, argumentsOfScenario);
#line 279
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 280
 testRunner.When("Only Print \'Please check TestStep56\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18719_Step58_FSAccess")]
        [NUnit.Framework.CategoryAttribute("SmartMotionAlarm")]
        public virtual void VAN18719_Step58_FSAccess()
        {
            string[] tagsOfScenario = new string[] {
                    "SmartMotionAlarm"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18719_Step58_FSAccess", null, tagsOfScenario, argumentsOfScenario);
#line 283
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 284
 testRunner.Given("Hover the mouse on the \'Device\' button using the automationId specified with json" +
                        " path \'$.Navbar.device\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 285
 testRunner.And("Go to Smart Assist page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 286
 testRunner.And("click intelligent sensing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 287
 testRunner.And("turn off the Allow apps to access your file system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 288
 testRunner.And("click photo link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 289
 testRunner.When("turn on the Allow apps to access your file system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 290
 testRunner.And("Go to Support page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 291
 testRunner.And("Hover the mouse on the \'Device\' button using the automationId specified with json" +
                        " path \'$.Navbar.device\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 292
 testRunner.And("Go to Smart Assist page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 293
 testRunner.And("click intelligent sensing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 295
 testRunner.And("verify discribe \'noCameraAccess\' is \'Not display\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 296
 testRunner.And("verify link \'Go to Windows Settings to give access\' for FileSystem is \'GONE\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18719_Step59_WithFSAccess")]
        [NUnit.Framework.CategoryAttribute("SmartMotionAlarm")]
        [NUnit.Framework.CategoryAttribute("Marcus")]
        public virtual void VAN18719_Step59_WithFSAccess()
        {
            string[] tagsOfScenario = new string[] {
                    "SmartMotionAlarm",
                    "Marcus"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18719_Step59_WithFSAccess", null, tagsOfScenario, argumentsOfScenario);
#line 299
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 300
 testRunner.When("Only Print \'Please check TestStep56\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
