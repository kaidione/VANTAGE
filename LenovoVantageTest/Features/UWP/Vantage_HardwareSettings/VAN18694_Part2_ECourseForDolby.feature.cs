// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.4.0.0
//      SpecFlow Generator Version:3.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace LenovoVantageTest.Features.UWP.Vantage_HardwareSettings
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("VAN18694_Part2_ECourseForDolby")]
    public partial class VAN18694_Part2_ECourseForDolbyFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "VAN18694_Part2_ECourseForDolby.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/UWP/Vantage_HardwareSettings", "VAN18694_Part2_ECourseForDolby", "\tTest Case：https://lnvusjira.lenovonet.lenovo.local/browse/VAN-18694\r\n\tAuthor： He" +
                    "len / Pengjie Chen", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
#line 6
 testRunner.Given("check the ECourse Feature on the supported system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
 testRunner.Then("Stop play music movie game voice app etc", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 8
 testRunner.Given("go to Audio page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
 testRunner.Given("Jump to audio smart settings section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18694_TestStep16_Check E-Course is on and Only my voice Suppress Keyboard Nois" +
            "e Acoustic Echo Cancellation status show incorrect")]
        [NUnit.Framework.CategoryAttribute("ECourse")]
        public virtual void VAN18694_TestStep16_CheckE_CourseIsOnAndOnlyMyVoiceSuppressKeyboardNoiseAcousticEchoCancellationStatusShowIncorrect()
        {
            string[] tagsOfScenario = new string[] {
                    "ECourse"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18694_TestStep16_Check E-Course is on and Only my voice Suppress Keyboard Nois" +
                    "e Acoustic Echo Cancellation status show incorrect", null, tagsOfScenario, argumentsOfScenario);
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table59.AddRow(new string[] {
                            "E-Course",
                            "off"});
#line 13
 testRunner.When("Turn on or off the master toggle within Audio smart settings", ((string)(null)), table59, "When ");
#line hidden
#line 16
 testRunner.When("Lunch Smart microphone settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 17
 testRunner.When("Select \"Environmental Mode\" on Smart microphone settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table60.AddRow(new string[] {
                            "E-Course",
                            "on"});
#line 18
 testRunner.When("Turn on or off the master toggle within Audio smart settings", ((string)(null)), table60, "When ");
#line hidden
#line 21
 testRunner.Then("Smart microphone settings \"Private Mode\" is select", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 22
 testRunner.Then("Close Smart Microphone settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18694_TestStep17_Check E-Course is on and Only my voice Suppress Keyboard Nois" +
            "e Acoustic Echo Cancellation status show incorrect")]
        [NUnit.Framework.CategoryAttribute("ECourse")]
        public virtual void VAN18694_TestStep17_CheckE_CourseIsOnAndOnlyMyVoiceSuppressKeyboardNoiseAcousticEchoCancellationStatusShowIncorrect()
        {
            string[] tagsOfScenario = new string[] {
                    "ECourse"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18694_TestStep17_Check E-Course is on and Only my voice Suppress Keyboard Nois" +
                    "e Acoustic Echo Cancellation status show incorrect", null, tagsOfScenario, argumentsOfScenario);
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table61.AddRow(new string[] {
                            "E-Course",
                            "off"});
#line 26
 testRunner.When("Turn on or off the master toggle within Audio smart settings", ((string)(null)), table61, "When ");
#line hidden
#line 29
 testRunner.When("Lunch Smart microphone settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 30
 testRunner.Then("Smart microphone settings \"Environmental Mode\" is select", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 31
 testRunner.Then("Close Smart Microphone settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18694_TestStep18_Check E-Course is off and Dolby audio is off and Dolby Audio " +
            "app UI is greyed out and Dolby cannot take effect")]
        [NUnit.Framework.CategoryAttribute("ECourse")]
        public virtual void VAN18694_TestStep18_CheckE_CourseIsOffAndDolbyAudioIsOffAndDolbyAudioAppUIIsGreyedOutAndDolbyCannotTakeEffect()
        {
            string[] tagsOfScenario = new string[] {
                    "ECourse"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18694_TestStep18_Check E-Course is off and Dolby audio is off and Dolby Audio " +
                    "app UI is greyed out and Dolby cannot take effect", null, tagsOfScenario, argumentsOfScenario);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table62.AddRow(new string[] {
                            "Dolby audio",
                            "off"});
                table62.AddRow(new string[] {
                            "E-Course",
                            "off"});
#line 35
 testRunner.Given("Turn on or off the master toggle within Audio smart settings", ((string)(null)), table62, "Given ");
#line hidden
#line 39
 testRunner.When("Play music top", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 40
 testRunner.Then("The Dolby Audio app ui is enable or disable \'disable\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 41
 testRunner.Then("Stop play music movie game voice app etc", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 42
 testRunner.When("Play movie top", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 43
 testRunner.Then("The Dolby Audio app ui is enable or disable \'disable\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 44
 testRunner.Then("Stop play music movie game voice app etc", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18694_TestStep19_Check E-Course is off and Dolby audio is off and Dolby mode c" +
            "annot change automatically")]
        [NUnit.Framework.CategoryAttribute("ECourse")]
        public virtual void VAN18694_TestStep19_CheckE_CourseIsOffAndDolbyAudioIsOffAndDolbyModeCannotChangeAutomatically()
        {
            string[] tagsOfScenario = new string[] {
                    "ECourse"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18694_TestStep19_Check E-Course is off and Dolby audio is off and Dolby mode c" +
                    "annot change automatically", null, tagsOfScenario, argumentsOfScenario);
#line 47
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table63.AddRow(new string[] {
                            "Dolby audio",
                            "on"});
                table63.AddRow(new string[] {
                            "E-Course",
                            "off"});
                table63.AddRow(new string[] {
                            "Automatic Voip",
                            "off"});
                table63.AddRow(new string[] {
                            "Automatic Entertainment",
                            "off"});
                table63.AddRow(new string[] {
                            "Game",
                            "on"});
#line 48
 testRunner.Given("Turn on or off the master toggle within Audio smart settings", ((string)(null)), table63, "Given ");
#line hidden
#line 56
 testRunner.When("Play movie top", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table64.AddRow(new string[] {
                            "Movie",
                            "off"});
                table64.AddRow(new string[] {
                            "Music",
                            "off"});
                table64.AddRow(new string[] {
                            "Game",
                            "on"});
                table64.AddRow(new string[] {
                            "Voice",
                            "off"});
#line 57
 testRunner.Then("the master toggle is on or off or enable or disable within Audio smart settings", ((string)(null)), table64, "Then ");
#line hidden
#line 64
 testRunner.Then("Stop play music movie game voice app etc", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18694_TestStep20_Check Dolby mode will change to Movie or Music or Game automa" +
            "tically")]
        [NUnit.Framework.CategoryAttribute("ECourse")]
        public virtual void VAN18694_TestStep20_CheckDolbyModeWillChangeToMovieOrMusicOrGameAutomatically()
        {
            string[] tagsOfScenario = new string[] {
                    "ECourse"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18694_TestStep20_Check Dolby mode will change to Movie or Music or Game automa" +
                    "tically", null, tagsOfScenario, argumentsOfScenario);
#line 67
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table65.AddRow(new string[] {
                            "Dolby audio",
                            "on"});
                table65.AddRow(new string[] {
                            "E-Course",
                            "off"});
                table65.AddRow(new string[] {
                            "Game",
                            "on"});
#line 68
 testRunner.Given("Turn on or off the master toggle within Audio smart settings", ((string)(null)), table65, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table66.AddRow(new string[] {
                            "Automatic Entertainment",
                            "on"});
#line 74
 testRunner.When("Turn on or off the master toggle within Audio smart settings", ((string)(null)), table66, "When ");
#line hidden
#line 77
 testRunner.When("Play movie top", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table67.AddRow(new string[] {
                            "Movie",
                            "on"});
                table67.AddRow(new string[] {
                            "Music",
                            "off"});
                table67.AddRow(new string[] {
                            "Game",
                            "off"});
                table67.AddRow(new string[] {
                            "Voice",
                            "off"});
#line 78
 testRunner.Then("the master toggle is on or off or enable or disable within Audio smart settings", ((string)(null)), table67, "Then ");
#line hidden
#line 85
 testRunner.Then("Stop play music movie game voice app etc", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 86
 testRunner.When("Play music top", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table68.AddRow(new string[] {
                            "Movie",
                            "off"});
                table68.AddRow(new string[] {
                            "Music",
                            "on"});
                table68.AddRow(new string[] {
                            "Game",
                            "off"});
                table68.AddRow(new string[] {
                            "Voice",
                            "off"});
#line 87
 testRunner.Then("the master toggle is on or off or enable or disable within Audio smart settings", ((string)(null)), table68, "Then ");
#line hidden
#line 94
 testRunner.Then("Stop play music movie game voice app etc", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18694_TestStep21_Check Dolby mode will change to voice automatically")]
        [NUnit.Framework.CategoryAttribute("ECourse")]
        public virtual void VAN18694_TestStep21_CheckDolbyModeWillChangeToVoiceAutomatically()
        {
            string[] tagsOfScenario = new string[] {
                    "ECourse"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18694_TestStep21_Check Dolby mode will change to voice automatically", null, tagsOfScenario, argumentsOfScenario);
#line 97
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table69.AddRow(new string[] {
                            "Dolby audio",
                            "on"});
                table69.AddRow(new string[] {
                            "E-Course",
                            "off"});
                table69.AddRow(new string[] {
                            "Game",
                            "on"});
#line 98
 testRunner.Given("Turn on or off the master toggle within Audio smart settings", ((string)(null)), table69, "Given ");
#line hidden
#line 104
 testRunner.When("The user make a voip call via voice recorder app", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table70.AddRow(new string[] {
                            "Automatic Voip",
                            "on"});
#line 105
 testRunner.When("Turn on or off the master toggle within Audio smart settings", ((string)(null)), table70, "When ");
#line hidden
                TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table71.AddRow(new string[] {
                            "Movie",
                            "off"});
                table71.AddRow(new string[] {
                            "Music",
                            "off"});
                table71.AddRow(new string[] {
                            "Game",
                            "off"});
                table71.AddRow(new string[] {
                            "Voice",
                            "on"});
#line 108
 testRunner.Then("the master toggle is on or off or enable or disable within Audio smart settings", ((string)(null)), table71, "Then ");
#line hidden
#line 115
 testRunner.Then("Stop play music movie game voice app etc", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18694_TestStep22_Check Dolby mode can select any mode manually")]
        [NUnit.Framework.CategoryAttribute("ECourse")]
        public virtual void VAN18694_TestStep22_CheckDolbyModeCanSelectAnyModeManually()
        {
            string[] tagsOfScenario = new string[] {
                    "ECourse"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18694_TestStep22_Check Dolby mode can select any mode manually", null, tagsOfScenario, argumentsOfScenario);
#line 118
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table72.AddRow(new string[] {
                            "Dolby audio",
                            "on"});
                table72.AddRow(new string[] {
                            "E-Course",
                            "off"});
#line 119
 testRunner.Given("Turn on or off the master toggle within Audio smart settings", ((string)(null)), table72, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table73.AddRow(new string[] {
                            "Music",
                            "on"});
#line 123
 testRunner.When("Turn on or off the master toggle within Audio smart settings", ((string)(null)), table73, "When ");
#line hidden
                TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table74.AddRow(new string[] {
                            "Movie",
                            "enable"});
                table74.AddRow(new string[] {
                            "Music",
                            "enable"});
                table74.AddRow(new string[] {
                            "Music",
                            "on"});
                table74.AddRow(new string[] {
                            "Game",
                            "enable"});
                table74.AddRow(new string[] {
                            "Voice",
                            "enable"});
#line 126
 testRunner.Then("the master toggle is on or off or enable or disable within Audio smart settings", ((string)(null)), table74, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table75.AddRow(new string[] {
                            "Movie",
                            "on"});
#line 134
 testRunner.When("Turn on or off the master toggle within Audio smart settings", ((string)(null)), table75, "When ");
#line hidden
                TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table76.AddRow(new string[] {
                            "Movie",
                            "enable"});
                table76.AddRow(new string[] {
                            "Movie",
                            "on"});
                table76.AddRow(new string[] {
                            "Music",
                            "enable"});
                table76.AddRow(new string[] {
                            "Game",
                            "enable"});
                table76.AddRow(new string[] {
                            "Voice",
                            "enable"});
#line 137
 testRunner.Then("the master toggle is on or off or enable or disable within Audio smart settings", ((string)(null)), table76, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table77.AddRow(new string[] {
                            "Game",
                            "on"});
#line 145
 testRunner.When("Turn on or off the master toggle within Audio smart settings", ((string)(null)), table77, "When ");
#line hidden
                TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table78.AddRow(new string[] {
                            "Movie",
                            "enable"});
                table78.AddRow(new string[] {
                            "Game",
                            "on"});
                table78.AddRow(new string[] {
                            "Music",
                            "enable"});
                table78.AddRow(new string[] {
                            "Game",
                            "enable"});
                table78.AddRow(new string[] {
                            "Voice",
                            "enable"});
#line 148
 testRunner.Then("the master toggle is on or off or enable or disable within Audio smart settings", ((string)(null)), table78, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table79.AddRow(new string[] {
                            "Voice",
                            "on"});
#line 156
 testRunner.When("Turn on or off the master toggle within Audio smart settings", ((string)(null)), table79, "When ");
#line hidden
                TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table80.AddRow(new string[] {
                            "Movie",
                            "enable"});
                table80.AddRow(new string[] {
                            "Voice",
                            "on"});
                table80.AddRow(new string[] {
                            "Music",
                            "enable"});
                table80.AddRow(new string[] {
                            "Game",
                            "enable"});
                table80.AddRow(new string[] {
                            "Voice",
                            "enable"});
#line 159
 testRunner.Then("the master toggle is on or off or enable or disable within Audio smart settings", ((string)(null)), table80, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18694_TestStep23_Check Dolby mode will change to voice automatically")]
        [NUnit.Framework.CategoryAttribute("ECourse")]
        public virtual void VAN18694_TestStep23_CheckDolbyModeWillChangeToVoiceAutomatically()
        {
            string[] tagsOfScenario = new string[] {
                    "ECourse"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18694_TestStep23_Check Dolby mode will change to voice automatically", null, tagsOfScenario, argumentsOfScenario);
#line 170
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table81 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table81.AddRow(new string[] {
                            "Dolby audio",
                            "on"});
                table81.AddRow(new string[] {
                            "E-Course",
                            "off"});
                table81.AddRow(new string[] {
                            "Automatic Voip",
                            "on"});
#line 171
 testRunner.Given("Turn on or off the master toggle within Audio smart settings", ((string)(null)), table81, "Given ");
#line hidden
#line 176
 testRunner.When("The user make a voip call via voice recorder app", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table82 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table82.AddRow(new string[] {
                            "Movie",
                            "off"});
                table82.AddRow(new string[] {
                            "Music",
                            "off"});
                table82.AddRow(new string[] {
                            "Game",
                            "off"});
                table82.AddRow(new string[] {
                            "Voice",
                            "on"});
#line 177
 testRunner.Then("the master toggle is on or off or enable or disable within Audio smart settings", ((string)(null)), table82, "Then ");
#line hidden
#line 184
 testRunner.Then("Stop play music movie game voice app etc", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18694_TestStep24_Check Dolby mode will change to Movie or Music or Game automa" +
            "tically")]
        [NUnit.Framework.CategoryAttribute("ECourse")]
        public virtual void VAN18694_TestStep24_CheckDolbyModeWillChangeToMovieOrMusicOrGameAutomatically()
        {
            string[] tagsOfScenario = new string[] {
                    "ECourse"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18694_TestStep24_Check Dolby mode will change to Movie or Music or Game automa" +
                    "tically", null, tagsOfScenario, argumentsOfScenario);
#line 187
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table83 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table83.AddRow(new string[] {
                            "Dolby audio",
                            "on"});
                table83.AddRow(new string[] {
                            "E-Course",
                            "off"});
                table83.AddRow(new string[] {
                            "Automatic Entertainment",
                            "on"});
                table83.AddRow(new string[] {
                            "Game",
                            "on"});
#line 188
 testRunner.Given("Turn on or off the master toggle within Audio smart settings", ((string)(null)), table83, "Given ");
#line hidden
#line 195
 testRunner.When("Play music top", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table84 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table84.AddRow(new string[] {
                            "Movie",
                            "off"});
                table84.AddRow(new string[] {
                            "Music",
                            "on"});
                table84.AddRow(new string[] {
                            "Game",
                            "off"});
                table84.AddRow(new string[] {
                            "Voice",
                            "off"});
#line 196
 testRunner.Then("the master toggle is on or off or enable or disable within Audio smart settings", ((string)(null)), table84, "Then ");
#line hidden
#line 203
 testRunner.Then("Stop play music movie game voice app etc", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 204
 testRunner.When("Play movie top", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table85 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table85.AddRow(new string[] {
                            "Movie",
                            "on"});
                table85.AddRow(new string[] {
                            "Music",
                            "off"});
                table85.AddRow(new string[] {
                            "Game",
                            "off"});
                table85.AddRow(new string[] {
                            "Voice",
                            "off"});
#line 205
 testRunner.Then("the master toggle is on or off or enable or disable within Audio smart settings", ((string)(null)), table85, "Then ");
#line hidden
#line 212
 testRunner.Then("Stop play music movie game voice app etc", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18694_TestStep25_Check Automatic Entertainment checked and voip call and Dolby" +
            " mode not change")]
        [NUnit.Framework.CategoryAttribute("ECourse")]
        public virtual void VAN18694_TestStep25_CheckAutomaticEntertainmentCheckedAndVoipCallAndDolbyModeNotChange()
        {
            string[] tagsOfScenario = new string[] {
                    "ECourse"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18694_TestStep25_Check Automatic Entertainment checked and voip call and Dolby" +
                    " mode not change", null, tagsOfScenario, argumentsOfScenario);
#line 215
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table86 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table86.AddRow(new string[] {
                            "Dolby audio",
                            "on"});
                table86.AddRow(new string[] {
                            "E-Course",
                            "off"});
                table86.AddRow(new string[] {
                            "Automatic Entertainment",
                            "on"});
                table86.AddRow(new string[] {
                            "Automatic Voip",
                            "off"});
                table86.AddRow(new string[] {
                            "Game",
                            "on"});
#line 216
 testRunner.Given("Turn on or off the master toggle within Audio smart settings", ((string)(null)), table86, "Given ");
#line hidden
#line 224
 testRunner.When("The user make a voip call via voice recorder app", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table87 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table87.AddRow(new string[] {
                            "Movie",
                            "off"});
                table87.AddRow(new string[] {
                            "Music",
                            "off"});
                table87.AddRow(new string[] {
                            "Game",
                            "on"});
                table87.AddRow(new string[] {
                            "Voice",
                            "off"});
#line 225
 testRunner.Then("the master toggle is on or off or enable or disable within Audio smart settings", ((string)(null)), table87, "Then ");
#line hidden
#line 232
 testRunner.Then("Stop play music movie game voice app etc", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18694_TestStep26_Check play music and voip call and Dolby mode only change to " +
            "Voice mode")]
        [NUnit.Framework.CategoryAttribute("ECourse")]
        public virtual void VAN18694_TestStep26_CheckPlayMusicAndVoipCallAndDolbyModeOnlyChangeToVoiceMode()
        {
            string[] tagsOfScenario = new string[] {
                    "ECourse"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18694_TestStep26_Check play music and voip call and Dolby mode only change to " +
                    "Voice mode", null, tagsOfScenario, argumentsOfScenario);
#line 235
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table88 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table88.AddRow(new string[] {
                            "Dolby audio",
                            "on"});
                table88.AddRow(new string[] {
                            "E-Course",
                            "off"});
                table88.AddRow(new string[] {
                            "Automatic Entertainment",
                            "on"});
                table88.AddRow(new string[] {
                            "Automatic Voip",
                            "on"});
                table88.AddRow(new string[] {
                            "Game",
                            "on"});
#line 236
 testRunner.Given("Turn on or off the master toggle within Audio smart settings", ((string)(null)), table88, "Given ");
#line hidden
#line 244
 testRunner.When("Play music top", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 245
 testRunner.When("The user make a voip call via voice recorder app", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table89 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table89.AddRow(new string[] {
                            "Movie",
                            "off"});
                table89.AddRow(new string[] {
                            "Music",
                            "off"});
                table89.AddRow(new string[] {
                            "Game",
                            "off"});
                table89.AddRow(new string[] {
                            "Voice",
                            "on"});
#line 246
 testRunner.Then("the master toggle is on or off or enable or disable within Audio smart settings", ((string)(null)), table89, "Then ");
#line hidden
#line 253
 testRunner.Then("Stop play music movie game voice app etc", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18694_TestStep27_Check voip call and uncheck Automatic Voip and Voice mode bac" +
            "k to Game mode")]
        [NUnit.Framework.CategoryAttribute("ECourse")]
        public virtual void VAN18694_TestStep27_CheckVoipCallAndUncheckAutomaticVoipAndVoiceModeBackToGameMode()
        {
            string[] tagsOfScenario = new string[] {
                    "ECourse"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18694_TestStep27_Check voip call and uncheck Automatic Voip and Voice mode bac" +
                    "k to Game mode", null, tagsOfScenario, argumentsOfScenario);
#line 256
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table90 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table90.AddRow(new string[] {
                            "Dolby audio",
                            "on"});
                table90.AddRow(new string[] {
                            "E-Course",
                            "off"});
                table90.AddRow(new string[] {
                            "Automatic Voip",
                            "on"});
                table90.AddRow(new string[] {
                            "Game",
                            "on"});
#line 257
 testRunner.Given("Turn on or off the master toggle within Audio smart settings", ((string)(null)), table90, "Given ");
#line hidden
#line 264
 testRunner.When("The user make a voip call via voice recorder app", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table91 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table91.AddRow(new string[] {
                            "Movie",
                            "off"});
                table91.AddRow(new string[] {
                            "Music",
                            "off"});
                table91.AddRow(new string[] {
                            "Game",
                            "off"});
                table91.AddRow(new string[] {
                            "Voice",
                            "on"});
#line 265
 testRunner.Then("the master toggle is on or off or enable or disable within Audio smart settings", ((string)(null)), table91, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table92 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table92.AddRow(new string[] {
                            "Automatic Voip",
                            "off"});
#line 272
 testRunner.When("Turn on or off the master toggle within Audio smart settings", ((string)(null)), table92, "When ");
#line hidden
                TechTalk.SpecFlow.Table table93 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table93.AddRow(new string[] {
                            "Movie",
                            "off"});
                table93.AddRow(new string[] {
                            "Music",
                            "off"});
                table93.AddRow(new string[] {
                            "Game",
                            "on"});
                table93.AddRow(new string[] {
                            "Voice",
                            "off"});
#line 275
 testRunner.Then("the master toggle is on or off or enable or disable within Audio smart settings", ((string)(null)), table93, "Then ");
#line hidden
#line 282
 testRunner.Then("Stop play music movie game voice app etc", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18694_TestStep28_Check uncheck Automatic Voip and Automatic Entertainment and " +
            "Dynamic mode change to Voice mode")]
        [NUnit.Framework.CategoryAttribute("ECourse")]
        public virtual void VAN18694_TestStep28_CheckUncheckAutomaticVoipAndAutomaticEntertainmentAndDynamicModeChangeToVoiceMode()
        {
            string[] tagsOfScenario = new string[] {
                    "ECourse"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18694_TestStep28_Check uncheck Automatic Voip and Automatic Entertainment and " +
                    "Dynamic mode change to Voice mode", null, tagsOfScenario, argumentsOfScenario);
#line 285
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table94 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table94.AddRow(new string[] {
                            "Dolby audio",
                            "on"});
                table94.AddRow(new string[] {
                            "E-Course",
                            "off"});
                table94.AddRow(new string[] {
                            "Automatic Entertainment",
                            "off"});
                table94.AddRow(new string[] {
                            "Automatic Voip",
                            "off"});
                table94.AddRow(new string[] {
                            "Game",
                            "on"});
#line 286
 testRunner.Given("Turn on or off the master toggle within Audio smart settings", ((string)(null)), table94, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table95 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table95.AddRow(new string[] {
                            "E-Course",
                            "on"});
#line 294
 testRunner.When("Turn on or off the master toggle within Audio smart settings", ((string)(null)), table95, "When ");
#line hidden
                TechTalk.SpecFlow.Table table96 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table96.AddRow(new string[] {
                            "Movie",
                            "off"});
                table96.AddRow(new string[] {
                            "Music",
                            "off"});
                table96.AddRow(new string[] {
                            "Game",
                            "off"});
                table96.AddRow(new string[] {
                            "Voice",
                            "on"});
#line 297
 testRunner.Then("the master toggle is on or off or enable or disable within Audio smart settings", ((string)(null)), table96, "Then ");
#line hidden
#line 304
 testRunner.Then("Stop play music movie game voice app etc", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18694_TestStep29_Check uncheck Automatic Voip and Automatic Entertainment and " +
            " Voice mode back to Game mode")]
        [NUnit.Framework.CategoryAttribute("ECourse")]
        public virtual void VAN18694_TestStep29_CheckUncheckAutomaticVoipAndAutomaticEntertainmentAndVoiceModeBackToGameMode()
        {
            string[] tagsOfScenario = new string[] {
                    "ECourse"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18694_TestStep29_Check uncheck Automatic Voip and Automatic Entertainment and " +
                    " Voice mode back to Game mode", null, tagsOfScenario, argumentsOfScenario);
#line 307
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table97 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table97.AddRow(new string[] {
                            "E-Course",
                            "off"});
#line 308
 testRunner.When("Turn on or off the master toggle within Audio smart settings", ((string)(null)), table97, "When ");
#line hidden
                TechTalk.SpecFlow.Table table98 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table98.AddRow(new string[] {
                            "Movie",
                            "off"});
                table98.AddRow(new string[] {
                            "Music",
                            "off"});
                table98.AddRow(new string[] {
                            "Game",
                            "on"});
                table98.AddRow(new string[] {
                            "Voice",
                            "off"});
#line 311
 testRunner.Then("the master toggle is on or off or enable or disable within Audio smart settings", ((string)(null)), table98, "Then ");
#line hidden
#line 318
 testRunner.Then("Stop play music movie game voice app etc", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN18694_TestStep30_Check uncheck Automatic Voip and Automatic Entertainment and " +
            " Voice mode back to Game mode")]
        [NUnit.Framework.CategoryAttribute("ECourse")]
        public virtual void VAN18694_TestStep30_CheckUncheckAutomaticVoipAndAutomaticEntertainmentAndVoiceModeBackToGameMode()
        {
            string[] tagsOfScenario = new string[] {
                    "ECourse"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN18694_TestStep30_Check uncheck Automatic Voip and Automatic Entertainment and " +
                    " Voice mode back to Game mode", null, tagsOfScenario, argumentsOfScenario);
#line 321
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table99 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table99.AddRow(new string[] {
                            "Dolby audio",
                            "on"});
                table99.AddRow(new string[] {
                            "E-Course",
                            "off"});
                table99.AddRow(new string[] {
                            "Game",
                            "on"});
                table99.AddRow(new string[] {
                            "E-Course",
                            "on"});
#line 322
 testRunner.Given("Turn on or off the master toggle within Audio smart settings", ((string)(null)), table99, "Given ");
#line hidden
#line 329
 testRunner.When("Select one mode within Dolby Audio app \'Music\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table100 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table100.AddRow(new string[] {
                            "Movie",
                            "off"});
                table100.AddRow(new string[] {
                            "Music",
                            "on"});
                table100.AddRow(new string[] {
                            "Game",
                            "off"});
                table100.AddRow(new string[] {
                            "Voice",
                            "off"});
#line 330
 testRunner.Then("the master toggle is on or off or enable or disable within Audio smart settings", ((string)(null)), table100, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table101 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table101.AddRow(new string[] {
                            "E-Course",
                            "off"});
#line 337
 testRunner.When("Turn on or off the master toggle within Audio smart settings", ((string)(null)), table101, "When ");
#line hidden
                TechTalk.SpecFlow.Table table102 = new TechTalk.SpecFlow.Table(new string[] {
                            "Toggle name",
                            "Toggle status"});
                table102.AddRow(new string[] {
                            "Movie",
                            "off"});
                table102.AddRow(new string[] {
                            "Music",
                            "off"});
                table102.AddRow(new string[] {
                            "Game",
                            "on"});
                table102.AddRow(new string[] {
                            "Voice",
                            "off"});
#line 340
 testRunner.Then("the master toggle is on or off or enable or disable within Audio smart settings", ((string)(null)), table102, "Then ");
#line hidden
#line 347
 testRunner.Then("Stop play music movie game voice app etc", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
