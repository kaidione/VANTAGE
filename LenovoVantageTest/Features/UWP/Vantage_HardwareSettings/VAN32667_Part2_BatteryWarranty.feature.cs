// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.4.0.0
//      SpecFlow Generator Version:3.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace LenovoVantageTest.Features.UWP.Vantage_HardwareSettings
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("VAN32667_Part2_BatteryWarranty")]
    [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
    public partial class VAN32667_Part2_BatteryWarrantyFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "TestSealedWarrnty"};
        
#line 1 "VAN32667_Part2_BatteryWarranty.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/UWP/Vantage_HardwareSettings", "VAN32667_Part2_BatteryWarranty", "\tTest Case： https://jira.tc.lenovo.com/browse/VAN-32667\r\n\tAuthor: Haiye Li", ProgrammingLanguage.CSharp, new string[] {
                        "TestSealedWarrnty"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN32667_TestStep03_Check Battery Warranty UI")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN32667_TestStep03_CheckBatteryWarrantyUI()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN32667_TestStep03_Check Battery Warranty UI", null, tagsOfScenario, argumentsOfScenario);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
 testRunner.Given("Close Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
 testRunner.When("Modify the SMBinfor file with SMBInfo_No_SN and SB00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
 testRunner.When("Restart Vantage Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 11
 testRunner.When("ReLaunch Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 12
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 13
 testRunner.Then("The Power Warranty feature will be Hidden", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN32667_TestStep05_Check Battery Warranty UI")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN32667_TestStep05_CheckBatteryWarrantyUI()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN32667_TestStep05_Check Battery Warranty UI", null, tagsOfScenario, argumentsOfScenario);
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 17
 testRunner.Given("Close Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 18
 testRunner.When("Modify the SMBinfor file with SMBInfo001-iframe1 and SB00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 19
 testRunner.When("Restart Vantage Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
 testRunner.When("ReLaunch Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 21
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table153 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "id",
                            "desc"});
                table153.AddRow(new string[] {
                            "BatteryWarrantyLink",
                            "jumptoSetting-battery",
                            "Battery warranty & settings"});
                table153.AddRow(new string[] {
                            "BatteryWarrantyTitle",
                            "device-settings-batterySettings-collapse-card-title",
                            "Battery warranty & settings"});
#line 22
 testRunner.Then("The Battery Warranty Settings value and Tip should follow the SPEC", ((string)(null)), table153, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN32667_TestStep06_Check Battery Warranty UI")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN32667_TestStep06_CheckBatteryWarrantyUI()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN32667_TestStep06_Check Battery Warranty UI", null, tagsOfScenario, argumentsOfScenario);
#line 28
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 29
 testRunner.Given("Close Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 30
 testRunner.When("Modify the SMBinfor file with SMBInfo001-iframe1 and SB00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 31
 testRunner.When("Restart Vantage Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 32
 testRunner.When("ReLaunch Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 33
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table154 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "id",
                            "desc"});
                table154.AddRow(new string[] {
                            "BatteryWarrantycaption",
                            "power-battery-warranty-caption",
                            @"Every machine which has a sealed battery, has a 1-year sealed battery warranty by default. Protect your investment by extending beyond the 1-year battery warranty, and make sure this crucial component gets the same coverage as the rest of your device. Extend your battery warranty with Sealed Battery Warranty which is available for up to 3-year coverage."});
#line 34
 testRunner.Then("The Battery Warranty Settings value and Tip should follow the SPEC", ((string)(null)), table154, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN32667_TestStep07_Check Battery Warranty UI")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN32667_TestStep07_CheckBatteryWarrantyUI()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN32667_TestStep07_Check Battery Warranty UI", null, tagsOfScenario, argumentsOfScenario);
#line 39
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 40
 testRunner.Given("Close Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 41
 testRunner.When("Modify the SMBinfor file with SMBInfo001-iframe1 and SB00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 42
 testRunner.When("Restart Vantage Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 43
 testRunner.When("ReLaunch Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 44
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 45
 testRunner.Given("Jump to Battery settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 46
 testRunner.Then("Click More Button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 47
 testRunner.And("No More Button Show Less Button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 48
 testRunner.Then("Click Less Button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 49
 testRunner.Then("No Less Button Show More Button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN32667_TestStep08_Check Battery Warranty UI")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN32667_TestStep08_CheckBatteryWarrantyUI()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN32667_TestStep08_Check Battery Warranty UI", null, tagsOfScenario, argumentsOfScenario);
#line 52
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 53
 testRunner.Given("Close Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 54
 testRunner.When("Modify the SMBinfor file with SMBInfo001-iframe1 and SB00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 55
 testRunner.When("Restart Vantage Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 56
 testRunner.When("ReLaunch Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 57
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 58
 testRunner.Given("Jump to Battery settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 59
 testRunner.Then("Click More Button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table155 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "id",
                            "desc"});
                table155.AddRow(new string[] {
                            "BatteryWarrantyBendfitText1",
                            "battery-warranty-benefit-text1",
                            "- Low upfront cost is significantly less than that of a non-covered replacement b" +
                                "attery"});
                table155.AddRow(new string[] {
                            "BatteryWarrantyBendfitText2",
                            "battery-warranty-benefit-text2",
                            "- Be assured of an effective and efficient battery replacement with Lenovo certif" +
                                "ied technicians"});
                table155.AddRow(new string[] {
                            "BatteryWarrantyBendfitText3",
                            "battery-warranty-benefit-text3",
                            "- Sealed batteries are difficult to get to and are non-customer replaceable units" +
                                ""});
#line 60
 testRunner.Then("The Battery Warranty Settings value and Tip should follow the SPEC", ((string)(null)), table155, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN32667_TestStep09_Check Battery Warranty UI")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN32667_TestStep09_CheckBatteryWarrantyUI()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN32667_TestStep09_Check Battery Warranty UI", null, tagsOfScenario, argumentsOfScenario);
#line 67
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 68
 testRunner.Given("Close Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 69
 testRunner.When("Modify the SMBinfor file with SMBInfo001-iframe1 and SB00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 70
 testRunner.When("Restart Vantage Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 71
 testRunner.When("ReLaunch Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 72
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 73
 testRunner.Given("Jump to Battery settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 74
 testRunner.Then("Click More Button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table156 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "id",
                            "desc"});
                table156.AddRow(new string[] {
                            "BatteryWarrantyBendfitText4",
                            "battery-warranty-benefit-text-more",
                            "For more information on Sealed Battery Warranty, go to Warranty and Protection ."});
#line 75
 testRunner.Then("The Battery Warranty Settings value and Tip should follow the SPEC", ((string)(null)), table156, "Then ");
#line hidden
#line 78
 testRunner.Then("Click Warranty and Protection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 79
 testRunner.Then("Click \'Warranty and Protection\' It Will Launch A Website", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 80
 testRunner.Then("Take Screen Shot TestStep09_JumpToWarrantyAndProtection in VAN32667 under Warrant" +
                        "yShotResult", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN32667_TestStep10_Check Battery Warranty UI")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN32667_TestStep10_CheckBatteryWarrantyUI()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN32667_TestStep10_Check Battery Warranty UI", null, tagsOfScenario, argumentsOfScenario);
#line 83
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 84
 testRunner.Given("Close Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 85
 testRunner.Given("Change system language to zh-CN", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 86
 testRunner.When("Modify the SMBinfor file with SMBInfo001-iframe1 and SB00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 87
 testRunner.When("Restart Vantage Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 88
 testRunner.When("ReLaunch Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 89
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 90
 testRunner.Given("Jump to Battery settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 91
 testRunner.Then("Click More Button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 92
 testRunner.Then("BatteryWarrantyBendfitText4 And Warranty and Protection shoule be hidden", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 93
 testRunner.Given("Change system language to en-US", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN32667_TestStep11_Check Sealed Battery Warranty UI")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN32667_TestStep11_CheckSealedBatteryWarrantyUI()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN32667_TestStep11_Check Sealed Battery Warranty UI", null, tagsOfScenario, argumentsOfScenario);
#line 96
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 97
 testRunner.Given("Close Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 98
 testRunner.When("Modify the SMBinfor file with SMBInfo001-iframe1 and SB00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 99
 testRunner.When("Restart Vantage Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 100
 testRunner.When("ReLaunch Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 101
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 102
 testRunner.Given("Jump to Battery settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 103
 testRunner.Then("Click More Button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table157 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "id",
                            "desc"});
                table157.AddRow(new string[] {
                            "ContactUs",
                            "battery-upsell-contact-us-text",
                            "Need customer service?"});
#line 104
 testRunner.Then("The Battery Warranty Settings value and Tip should follow the SPEC", ((string)(null)), table157, "Then ");
#line hidden
#line 107
 testRunner.Then("Click Contact Us", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 108
 testRunner.Then("Click \'Contact Us\' It Will Launch A Website", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 109
 testRunner.Then("Take Screen Shot TestStep11_JumpToContactUs in VAN32667 under WarrantyShotResult", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN32667_TestStep12_Check Sealed Battery Warranty UI Status level=005-1 SoH ＜80%")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN32667_TestStep12_CheckSealedBatteryWarrantyUIStatusLevel005_1SoH80()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN32667_TestStep12_Check Sealed Battery Warranty UI Status level=005-1 SoH ＜80%", null, tagsOfScenario, argumentsOfScenario);
#line 112
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 113
 testRunner.Given("Close Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 114
 testRunner.When("Modify the SMBinfor file with SMBInfo001-iframe1 and SB60", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 115
 testRunner.When("Restart Vantage Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 116
 testRunner.When("ReLaunch Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 117
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 118
 testRunner.Given("Jump to Battery settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table158 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "id",
                            "desc"});
                table158.AddRow(new string[] {
                            "Title",
                            "battery-warranty-not-available-title",
                            "Battery Warranty:"});
                table158.AddRow(new string[] {
                            "Value",
                            "battery-warranty-not-available-value",
                            "Not available"});
                table158.AddRow(new string[] {
                            "Tip",
                            "battery-warranty-note-content",
                            "Sealed Battery Warranty extension is only available within the first 12 months si" +
                                "nce computer purchase."});
                table158.AddRow(new string[] {
                            "Button",
                            "battery-warranty-extend-and-explore",
                            "EXPLORE MORE"});
#line 119
 testRunner.Then("The Battery Warranty Settings value and Tip should follow the SPEC", ((string)(null)), table158, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN32667_TestStep13_Check Sealed Battery Warranty UI Status level=005-1 SoH ＜80%")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN32667_TestStep13_CheckSealedBatteryWarrantyUIStatusLevel005_1SoH80()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN32667_TestStep13_Check Sealed Battery Warranty UI Status level=005-1 SoH ＜80%", null, tagsOfScenario, argumentsOfScenario);
#line 127
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 128
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 129
 testRunner.Given("Jump to Battery settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 130
 testRunner.When("Click Battert Settings \'EXPLORE MORE\' Button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 131
 testRunner.Then("It Will Show Iframe Upgrade Support & Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 132
 testRunner.Then("Take Screen Shot TestStep13_ItWillShowIframe3 in VAN32667 under WarrantyShotResul" +
                        "t", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN32667_TestStep14_Check Sealed Battery Warranty UI Status level=005-1 SoH >=80%" +
            "")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN32667_TestStep14_CheckSealedBatteryWarrantyUIStatusLevel005_1SoH80()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN32667_TestStep14_Check Sealed Battery Warranty UI Status level=005-1 SoH >=80%" +
                    "", null, tagsOfScenario, argumentsOfScenario);
#line 135
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 136
 testRunner.Given("Close Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 137
 testRunner.When("Modify the SMBinfor file with SMBInfo001-iframe1 and SB90", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 138
 testRunner.When("Restart Vantage Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 139
 testRunner.When("ReLaunch Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 140
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 141
 testRunner.Given("Jump to Battery settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table159 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "id",
                            "desc"});
                table159.AddRow(new string[] {
                            "Title",
                            "battery-warranty-not-available-title",
                            "Battery Warranty:"});
                table159.AddRow(new string[] {
                            "Value",
                            "battery-warranty-not-available-value",
                            "Not available"});
                table159.AddRow(new string[] {
                            "Tip",
                            "battery-warranty-note-content",
                            "Sealed Battery Warranty extension is only available within the first 12 months si" +
                                "nce computer purchase."});
                table159.AddRow(new string[] {
                            "Button",
                            "battery-warranty-extend-and-explore",
                            "EXTEND BATTERY WARRANTY"});
#line 142
 testRunner.Then("The Battery Warranty Settings value and Tip should follow the SPEC", ((string)(null)), table159, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN32667_TestStep15_Check Sealed Battery Warranty UI Status level=001 SoH >=80%")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN32667_TestStep15_CheckSealedBatteryWarrantyUIStatusLevel001SoH80()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN32667_TestStep15_Check Sealed Battery Warranty UI Status level=001 SoH >=80%", null, tagsOfScenario, argumentsOfScenario);
#line 150
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 151
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 152
 testRunner.Given("Jump to Battery settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 153
 testRunner.When("Click Battert Settings \'EXTEND BATTERY WARRANTY\' Button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 154
 testRunner.Then("It Will Show Iframe Sealed Battery Warranty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 155
 testRunner.Then("It Will Show Iframe Sealed Battery", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 156
 testRunner.Then("Take Screen Shot TestStep15_ItWillShowIframe1 in VAN32667 under WarrantyShotResul" +
                        "t", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN32667_TestStep16_Check Sealed Battery Warranty UI Status level=001 SoH >=80%")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN32667_TestStep16_CheckSealedBatteryWarrantyUIStatusLevel001SoH80()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN32667_TestStep16_Check Sealed Battery Warranty UI Status level=001 SoH >=80%", null, tagsOfScenario, argumentsOfScenario);
#line 159
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 160
 testRunner.Given("Close Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 161
 testRunner.When("Modify the SMBinfor file with SMBInfo001-iframe2 and SB90", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 162
 testRunner.When("Restart Vantage Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 163
 testRunner.When("ReLaunch Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 164
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 165
 testRunner.Given("Jump to Battery settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table160 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "id",
                            "desc"});
                table160.AddRow(new string[] {
                            "WarrantyTitle",
                            "battery-warranty-not-available-title",
                            "Battery Warranty:"});
                table160.AddRow(new string[] {
                            "Value",
                            "battery-warranty-not-available-value",
                            "Not available"});
                table160.AddRow(new string[] {
                            "Tip",
                            "battery-warranty-note-content",
                            "Sealed Battery Warranty extension is only available within the first 12 months si" +
                                "nce computer purchase."});
                table160.AddRow(new string[] {
                            "Button",
                            "battery-warranty-extend-and-explore",
                            "EXTEND BATTERY WARRANTY"});
#line 166
 testRunner.Then("The Battery Warranty Settings value and Tip should follow the SPEC", ((string)(null)), table160, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN32667_TestStep17_Check Sealed Battery Warranty UI Status level=001 SoH >=80%")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN32667_TestStep17_CheckSealedBatteryWarrantyUIStatusLevel001SoH80()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN32667_TestStep17_Check Sealed Battery Warranty UI Status level=001 SoH >=80%", null, tagsOfScenario, argumentsOfScenario);
#line 174
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 175
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 176
 testRunner.Given("Jump to Battery settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 177
 testRunner.When("Click Battert Settings \'EXTEND BATTERY WARRANTY\' Button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 178
 testRunner.Then("It Will Show Iframe Lenovo Premium Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 179
 testRunner.Then("It Will Show Iframe Sealed Battery", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 180
 testRunner.Then("It Will Show Iframe Lenovo Warranty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 181
 testRunner.Then("Take Screen Shot TestStep17_ItWillShowIframe2 in VAN32667 under WarrantyShotResul" +
                        "t", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN32667_TestStep21_Check Sealed Battery Warranty UI Status level=004")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN32667_TestStep21_CheckSealedBatteryWarrantyUIStatusLevel004()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN32667_TestStep21_Check Sealed Battery Warranty UI Status level=004", null, tagsOfScenario, argumentsOfScenario);
#line 184
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 185
 testRunner.Given("Close Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 186
 testRunner.When("Modify the SMBinfor file with SMBInfo4 and SB00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 187
 testRunner.When("Restart Vantage Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 188
 testRunner.When("ReLaunch Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 189
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 190
 testRunner.Given("Jump to Battery settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table161 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "id",
                            "desc"});
                table161.AddRow(new string[] {
                            "WarrantyTitle",
                            "battery-warranty-duration-title",
                            "Battery Warranty:"});
                table161.AddRow(new string[] {
                            "RemainingTitle",
                            "battery-warranty-timeRemaining-title",
                            "Time Remaining:"});
                table161.AddRow(new string[] {
                            "StartDate",
                            "battery-warranty-startDate-title",
                            "Start Date:"});
                table161.AddRow(new string[] {
                            "EndDate",
                            "battery-warranty-endDate-title",
                            "End Date:"});
                table161.AddRow(new string[] {
                            "Tip",
                            "battery-warranty-note-content",
                            "Sealed Battery Warranty extension is only available within the first 12 months si" +
                                "nce computer purchase."});
                table161.AddRow(new string[] {
                            "Button",
                            "battery-warranty-extend-and-explore",
                            "EXPLORE MORE"});
#line 191
 testRunner.Then("The Battery Warranty Settings value and Tip should follow the SPEC", ((string)(null)), table161, "Then ");
#line hidden
#line 200
 testRunner.Then("GetResponse from BatteryWarranty Restful API with \'PF230WCP\' and \'\' and \'90\' Type" +
                        " BatteryWarrantySettingsUI", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN32667_TestStep22_Check Sealed Battery Warranty UI Status level=004")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN32667_TestStep22_CheckSealedBatteryWarrantyUIStatusLevel004()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN32667_TestStep22_Check Sealed Battery Warranty UI Status level=004", null, tagsOfScenario, argumentsOfScenario);
#line 203
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 204
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 205
 testRunner.Given("Jump to Battery settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 206
 testRunner.When("Click Battery Warranty Question Mark", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table162 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "id",
                            "desc"});
                table162.AddRow(new string[] {
                            "QuestionMarkTip",
                            "battery-warranty-tooltip-content",
                            "After you purchase the Sealed Battery Warranty, it might take 24 hours or longer " +
                                "for the updated battery entitlement to apply."});
#line 207
 testRunner.Then("The Battery Warranty Settings value and Tip should follow the SPEC", ((string)(null)), table162, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN32667_TestStep23_Check Sealed Battery Warranty UI Status level=004")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN32667_TestStep23_CheckSealedBatteryWarrantyUIStatusLevel004()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN32667_TestStep23_Check Sealed Battery Warranty UI Status level=004", null, tagsOfScenario, argumentsOfScenario);
#line 212
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 213
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 214
 testRunner.Given("Jump to Battery settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 215
 testRunner.When("Click Battert Settings \'EXPLORE MORE\' Button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 216
 testRunner.Then("It Will Show Iframe Upgrade Support & Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 217
 testRunner.Then("Take Screen Shot TestStep23_ItWillShowIframe3 in VAN32667 under WarrantyShotResul" +
                        "t", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN32667_TestStep24_Check Sealed Battery Warranty UI Status level=005-2 SoH ＜80%")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN32667_TestStep24_CheckSealedBatteryWarrantyUIStatusLevel005_2SoH80()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN32667_TestStep24_Check Sealed Battery Warranty UI Status level=005-2 SoH ＜80%", null, tagsOfScenario, argumentsOfScenario);
#line 220
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 221
 testRunner.Given("Close Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 222
 testRunner.When("Modify the SMBinfor file with SMBInfo002-iframe1 and SB60", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 223
 testRunner.When("Restart Vantage Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 224
 testRunner.When("ReLaunch Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 225
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 226
 testRunner.Given("Jump to Battery settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table163 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "id",
                            "desc"});
                table163.AddRow(new string[] {
                            "WarrantyTitle",
                            "battery-warranty-duration-title",
                            "Battery Warranty:"});
                table163.AddRow(new string[] {
                            "RemainingTitle",
                            "battery-warranty-timeRemaining-title",
                            "Time Remaining:"});
                table163.AddRow(new string[] {
                            "StartDate",
                            "battery-warranty-startDate-title",
                            "Start Date:"});
                table163.AddRow(new string[] {
                            "EndDate",
                            "battery-warranty-endDate-title",
                            "End Date:"});
                table163.AddRow(new string[] {
                            "Tip",
                            "battery-warranty-note-content",
                            "Sealed Battery Warranty extension is only available within the first 12 months si" +
                                "nce computer purchase."});
                table163.AddRow(new string[] {
                            "Button",
                            "battery-warranty-extend-and-explore",
                            "EXPLORE MORE"});
#line 227
 testRunner.Then("The Battery Warranty Settings value and Tip should follow the SPEC", ((string)(null)), table163, "Then ");
#line hidden
#line 236
 testRunner.Then("GetResponse from BatteryWarranty Restful API with \'PF2FT8MY\' and \'\' and \'60\' Type" +
                        " BatteryWarrantySettingsUI", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN32667_TestStep25_Check Sealed Battery Warranty UI Status level=005-2 SoH ＜80%")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN32667_TestStep25_CheckSealedBatteryWarrantyUIStatusLevel005_2SoH80()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN32667_TestStep25_Check Sealed Battery Warranty UI Status level=005-2 SoH ＜80%", null, tagsOfScenario, argumentsOfScenario);
#line 239
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 240
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 241
 testRunner.Given("Jump to Battery settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 242
 testRunner.When("Click Battery Warranty Question Mark", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table164 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "id",
                            "desc"});
                table164.AddRow(new string[] {
                            "QuestionMarkTip",
                            "battery-warranty-tooltip-content",
                            "After you purchase the Sealed Battery Warranty, it might take 24 hours or longer " +
                                "for the updated battery entitlement to apply."});
#line 243
 testRunner.Then("The Battery Warranty Settings value and Tip should follow the SPEC", ((string)(null)), table164, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN32667_TestStep26_Check Sealed Battery Warranty UI Status level=005-2 SoH ＜80%")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN32667_TestStep26_CheckSealedBatteryWarrantyUIStatusLevel005_2SoH80()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN32667_TestStep26_Check Sealed Battery Warranty UI Status level=005-2 SoH ＜80%", null, tagsOfScenario, argumentsOfScenario);
#line 248
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 249
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 250
 testRunner.Given("Jump to Battery settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 251
 testRunner.When("Click Battert Settings \'EXPLORE MORE\' Button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 252
 testRunner.Then("It Will Show Iframe Upgrade Support & Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 253
 testRunner.Then("Take Screen Shot TestStep26_ItWillShowIframe3 in VAN32667 under WarrantyShotResul" +
                        "t", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN32667_TestStep27_Check Sealed Battery Warranty UI Status level=002 SoH >80%")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN32667_TestStep27_CheckSealedBatteryWarrantyUIStatusLevel002SoH80()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN32667_TestStep27_Check Sealed Battery Warranty UI Status level=002 SoH >80%", null, tagsOfScenario, argumentsOfScenario);
#line 256
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 257
 testRunner.Given("Close Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 258
 testRunner.When("Modify the SMBinfor file with SMBInfo002-iframe2 and SB90", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 259
 testRunner.When("Restart Vantage Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 260
 testRunner.When("ReLaunch Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 261
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 262
 testRunner.Given("Jump to Battery settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table165 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "id",
                            "desc"});
                table165.AddRow(new string[] {
                            "WarrantyTitle",
                            "battery-warranty-duration-title",
                            "Battery Warranty:"});
                table165.AddRow(new string[] {
                            "RemainingTitle",
                            "battery-warranty-timeRemaining-title",
                            "Time Remaining:"});
                table165.AddRow(new string[] {
                            "StartDate",
                            "battery-warranty-startDate-title",
                            "Start Date:"});
                table165.AddRow(new string[] {
                            "EndDate",
                            "battery-warranty-endDate-title",
                            "End Date:"});
                table165.AddRow(new string[] {
                            "Tip",
                            "battery-warranty-note-content",
                            "Sealed Battery Warranty extension is only available within the first 12 months si" +
                                "nce computer purchase."});
                table165.AddRow(new string[] {
                            "Button",
                            "battery-warranty-extend-and-explore",
                            "EXTEND BATTERY WARRANTY"});
#line 263
 testRunner.Then("The Battery Warranty Settings value and Tip should follow the SPEC", ((string)(null)), table165, "Then ");
#line hidden
#line 271
 testRunner.Then("GetResponse from BatteryWarranty Restful API with \'PF2FT8MY\' and \'\' and \'90\' Type" +
                        " BatteryWarrantySettingsUI", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN32667_TestStep28_Check Sealed Battery Warranty UI Status level=002 SoH >80%")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN32667_TestStep28_CheckSealedBatteryWarrantyUIStatusLevel002SoH80()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN32667_TestStep28_Check Sealed Battery Warranty UI Status level=002 SoH >80%", null, tagsOfScenario, argumentsOfScenario);
#line 274
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 275
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 276
 testRunner.Given("Jump to Battery settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 277
 testRunner.When("Click Battery Warranty Question Mark", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table166 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "id",
                            "desc"});
                table166.AddRow(new string[] {
                            "QuestionMarkTip",
                            "battery-warranty-tooltip-content",
                            "After you purchase the Sealed Battery Warranty, it might take 24 hours or longer " +
                                "for the updated battery entitlement to apply."});
#line 278
 testRunner.Then("The Battery Warranty Settings value and Tip should follow the SPEC", ((string)(null)), table166, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN32667_TestStep29_Check Sealed Battery Warranty UI Status level=002 SoH >80%")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN32667_TestStep29_CheckSealedBatteryWarrantyUIStatusLevel002SoH80()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN32667_TestStep29_Check Sealed Battery Warranty UI Status level=002 SoH >80%", null, tagsOfScenario, argumentsOfScenario);
#line 283
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 284
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 285
 testRunner.Given("Jump to Battery settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 286
 testRunner.When("Click Battert Settings \'EXTEND BATTERY WARRANTY\' Button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 287
 testRunner.Then("It Will Show Iframe Lenovo Premium Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 288
 testRunner.Then("It Will Show Iframe Sealed Battery", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 289
 testRunner.Then("It Will Show Iframe Lenovo Warranty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 290
 testRunner.Then("Take Screen Shot TestStep29_ItWillShowIframe2 in VAN32667 under WarrantyShotResul" +
                        "t", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN32667_TestStep30_Check Sealed Battery Warranty UI Status level=002 SoH >80%")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN32667_TestStep30_CheckSealedBatteryWarrantyUIStatusLevel002SoH80()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN32667_TestStep30_Check Sealed Battery Warranty UI Status level=002 SoH >80%", null, tagsOfScenario, argumentsOfScenario);
#line 293
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 294
 testRunner.Given("Close Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 295
 testRunner.When("Modify the SMBinfor file with SMBInfo002-iframe1 and SB90", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 296
 testRunner.When("Restart Vantage Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 297
 testRunner.When("ReLaunch Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 298
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 299
 testRunner.Given("Jump to Battery settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table167 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "id",
                            "desc"});
                table167.AddRow(new string[] {
                            "WarrantyTitle",
                            "battery-warranty-duration-title",
                            "Battery Warranty:"});
                table167.AddRow(new string[] {
                            "RemainingTitle",
                            "battery-warranty-timeRemaining-title",
                            "Time Remaining:"});
                table167.AddRow(new string[] {
                            "StartDate",
                            "battery-warranty-startDate-title",
                            "Start Date:"});
                table167.AddRow(new string[] {
                            "EndDate",
                            "battery-warranty-endDate-title",
                            "End Date:"});
                table167.AddRow(new string[] {
                            "Tip",
                            "battery-warranty-note-content",
                            "Sealed Battery Warranty extension is only available within the first 12 months si" +
                                "nce computer purchase."});
                table167.AddRow(new string[] {
                            "Button",
                            "battery-warranty-extend-and-explore",
                            "EXTEND BATTERY WARRANTY"});
#line 300
 testRunner.Then("The Battery Warranty Settings value and Tip should follow the SPEC", ((string)(null)), table167, "Then ");
#line hidden
#line 309
 testRunner.Then("GetResponse from BatteryWarranty Restful API with \'PF2FT8MY\' and \'\' and \'90\' Type" +
                        " BatteryWarrantySettingsUI", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN32667_TestStep31_Check Sealed Battery Warranty UI Status level=002 SoH >80%")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN32667_TestStep31_CheckSealedBatteryWarrantyUIStatusLevel002SoH80()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN32667_TestStep31_Check Sealed Battery Warranty UI Status level=002 SoH >80%", null, tagsOfScenario, argumentsOfScenario);
#line 312
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 313
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 314
 testRunner.Given("Jump to Battery settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 315
 testRunner.When("Click Battery Warranty Question Mark", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table168 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "id",
                            "desc"});
                table168.AddRow(new string[] {
                            "QuestionMarkTip",
                            "battery-warranty-tooltip-content",
                            "After you purchase the Sealed Battery Warranty, it might take 24 hours or longer " +
                                "for the updated battery entitlement to apply."});
#line 316
 testRunner.Then("The Battery Warranty Settings value and Tip should follow the SPEC", ((string)(null)), table168, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN32667_TestStep32_Check Sealed Battery Warranty UI Status level=002 SoH >80%")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN32667_TestStep32_CheckSealedBatteryWarrantyUIStatusLevel002SoH80()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN32667_TestStep32_Check Sealed Battery Warranty UI Status level=002 SoH >80%", null, tagsOfScenario, argumentsOfScenario);
#line 321
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 322
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 323
 testRunner.When("Click Battert Settings \'EXTEND BATTERY WARRANTY\' Button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 324
 testRunner.Then("It Will Show Iframe Lenovo Premium Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 325
 testRunner.Then("It Will Show Iframe Sealed Battery", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 326
 testRunner.Then("It Will Show Iframe Lenovo Warranty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 327
 testRunner.Then("Take Screen Shot TestStep31_ItWillShowIframe1 in VAN32667 under WarrantyShotResul" +
                        "t", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN32667_TestStep33_Check Battery Warranty UI")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN32667_TestStep33_CheckBatteryWarrantyUI()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN32667_TestStep33_Check Battery Warranty UI", null, tagsOfScenario, argumentsOfScenario);
#line 330
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 331
 testRunner.Given("Install Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 332
 testRunner.Given("Close Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 333
 testRunner.Given("Modifying the Service fileSmb Value Add", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 334
 testRunner.When("Modify the SMBinfor file with SMBInfo001-iframe1 and SB00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 335
 testRunner.When("Restart Vantage Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 336
 testRunner.Given("ReLaunch Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 337
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 338
 testRunner.Then("The Battery Warranty UI should be displayed within 3 seconds when first launch", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 339
 testRunner.Given("Close Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 340
 testRunner.Given("ReLaunch Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 341
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 342
 testRunner.Then("The Battery Warranty UI should be displayed within 2 seconds when second launch", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
