// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.4.0.0
//      SpecFlow Generator Version:3.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace LenovoVantageTest.Features.UWP.Vantage_HardwareSettings
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("VAN30769_Part2_SettingsSealedBatteryWarranty")]
    [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
    public partial class VAN30769_Part2_SettingsSealedBatteryWarrantyFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "TestSealedWarrnty"};
        
#line 1 "VAN30769_Part2_SettingsSealedBatteryWarranty.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/UWP/Vantage_HardwareSettings", "VAN30769_Part2_SettingsSealedBatteryWarranty", "\tTest Case： https://jira.tc.lenovo.com/browse/VAN-30769\r\n\tAuthor: Haiye Li", ProgrammingLanguage.CSharp, new string[] {
                        "TestSealedWarrnty"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN30769_TestStep04_Check Sealed Battery Warranty UI Status level=null")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN30769_TestStep04_CheckSealedBatteryWarrantyUIStatusLevelNull()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN30769_TestStep04_Check Sealed Battery Warranty UI Status level=null", null, tagsOfScenario, argumentsOfScenario);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
 testRunner.Given("Close Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
 testRunner.When("Modify the SMBinfor file with SMBInfo_No_SN and SB00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
 testRunner.When("Restart Vantage Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 11
 testRunner.When("ReLaunch Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 12
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 13
 testRunner.Then("The Sealed Warranty feature will be Hidden", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN30769_TestStep06_Check Sealed Battery Warranty UI Status level=005-1 SoH ＜80%")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN30769_TestStep06_CheckSealedBatteryWarrantyUIStatusLevel005_1SoH80()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN30769_TestStep06_Check Sealed Battery Warranty UI Status level=005-1 SoH ＜80%", null, tagsOfScenario, argumentsOfScenario);
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 17
 testRunner.Given("Close Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 18
 testRunner.When("Modify the SMBinfor file with SMBInfo001-iframe1 and SB60", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 19
 testRunner.When("Restart Vantage Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
 testRunner.When("ReLaunch Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 21
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 22
 testRunner.Given("Jump to Battery settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 23
 testRunner.Then("The Sealed Warranty feature will be Displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table129 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "desc"});
                table129.AddRow(new string[] {
                            "SealedTitle",
                            "Sealed Battery Warranty"});
                table129.AddRow(new string[] {
                            "Title",
                            "Battery Warranty:"});
                table129.AddRow(new string[] {
                            "Value",
                            "Not available"});
                table129.AddRow(new string[] {
                            "Tip",
                            "Your sealed battery warranty is not available. Check for more Lenovo premium opti" +
                                "ons and services."});
                table129.AddRow(new string[] {
                            "Button",
                            "EXPLORE MORE"});
#line 24
 testRunner.Then("The Battery Warranty value and Tip should follow the SPEC", ((string)(null)), table129, "Then ");
#line hidden
#line 31
 testRunner.Then("The EXPLORE MORE Button Displayed and under the Value Tip", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 32
 testRunner.Then("GetResponse from BatteryWarranty Restful API with \'PF2HT1ZE\' and \'\' and \'60\' Type" +
                        " SMBInfo1SB60", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 33
 testRunner.When("go to Audio page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 34
 testRunner.Then("The Sealed Warranty feature will be Displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 35
 testRunner.When("Go to Display & Camera page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 36
 testRunner.Then("The Sealed Warranty feature will be Displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 37
 testRunner.When("Go to input page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 38
 testRunner.Then("The Sealed Warranty feature will be Displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 39
 testRunner.When("Go to Smart Assist page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 40
 testRunner.Then("The Sealed Warranty feature will be Displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN30769_TestStep07_Check Sealed Battery Warranty UI Status level=005-1 SoH ＜80%")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN30769_TestStep07_CheckSealedBatteryWarrantyUIStatusLevel005_1SoH80()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN30769_TestStep07_Check Sealed Battery Warranty UI Status level=005-1 SoH ＜80%", null, tagsOfScenario, argumentsOfScenario);
#line 43
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 44
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 45
 testRunner.Then("The Sealed Warranty feature will be Displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 46
 testRunner.When("Click The Question Mark", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table130 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "desc"});
                table130.AddRow(new string[] {
                            "QuestionMarkTip",
                            "After you purchase the Sealed Battery Warranty, it might take 24 hours or longer " +
                                "for the updated battery entitlement to apply."});
#line 47
 testRunner.Then("The Battery Warranty value and Tip should follow the SPEC", ((string)(null)), table130, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN30769_TestStep08_Check Sealed Battery Warranty UI Status level=005-1 SoH ＜80%")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN30769_TestStep08_CheckSealedBatteryWarrantyUIStatusLevel005_1SoH80()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN30769_TestStep08_Check Sealed Battery Warranty UI Status level=005-1 SoH ＜80%", null, tagsOfScenario, argumentsOfScenario);
#line 52
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 53
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 54
 testRunner.Then("The Sealed Warranty feature will be Displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 55
 testRunner.When("Click The EXPLORE MORE Button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 56
 testRunner.Then("It Will Show Iframe Upgrade Support & Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 57
 testRunner.Then("Take Screen Shot TestStep08_ItWillShowIframe3 in VAN30769 under WarrantyShotResul" +
                        "t", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN30769_TestStep09_Check Sealed Battery Warranty UI Status level=001 SoH >=80%")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN30769_TestStep09_CheckSealedBatteryWarrantyUIStatusLevel001SoH80()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN30769_TestStep09_Check Sealed Battery Warranty UI Status level=001 SoH >=80%", null, tagsOfScenario, argumentsOfScenario);
#line 60
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 61
 testRunner.Given("Close Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 62
 testRunner.When("Modify the SMBinfor file with SMBInfo001-iframe1 and SB90", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 63
 testRunner.When("Restart Vantage Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 64
 testRunner.When("ReLaunch Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 65
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 66
 testRunner.Given("Jump to Battery settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 67
 testRunner.Then("The Sealed Warranty feature will be Displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table131 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "desc"});
                table131.AddRow(new string[] {
                            "SealedTitle",
                            "Sealed Battery Warranty"});
                table131.AddRow(new string[] {
                            "Title",
                            "Battery Warranty:"});
                table131.AddRow(new string[] {
                            "Value",
                            "Not available"});
                table131.AddRow(new string[] {
                            "Tip",
                            "Protect your investment by extending beyond the 1-year battery warranty up to 3-y" +
                                "ear coverage with low upfront cost."});
                table131.AddRow(new string[] {
                            "Button",
                            "EXPLORE MORE"});
#line 68
 testRunner.Then("The Battery Warranty value and Tip should follow the SPEC", ((string)(null)), table131, "Then ");
#line hidden
#line 75
 testRunner.Then("The EXPLORE MORE Button Displayed and under the Value Tip", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 76
 testRunner.Then("GetResponse from BatteryWarranty Restful API with \'PF2HT1ZE\' and \'\' and \'90\' Type" +
                        " SMBInfo1SB60", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN30769_TestStep10_Check Sealed Battery Warranty UI Status level=001 SoH >=80%")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN30769_TestStep10_CheckSealedBatteryWarrantyUIStatusLevel001SoH80()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN30769_TestStep10_Check Sealed Battery Warranty UI Status level=001 SoH >=80%", null, tagsOfScenario, argumentsOfScenario);
#line 79
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 80
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 81
 testRunner.Then("The Sealed Warranty feature will be Displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 82
 testRunner.When("Click The Question Mark", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table132 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "desc"});
                table132.AddRow(new string[] {
                            "QuestionMarkTip",
                            "After you purchase the Sealed Battery Warranty, it might take 24 hours or longer " +
                                "for the updated battery entitlement to apply."});
#line 83
 testRunner.Then("The Battery Warranty value and Tip should follow the SPEC", ((string)(null)), table132, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN30769_TestStep11_Check Sealed Battery Warranty UI Status level=001 SoH >=80%")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN30769_TestStep11_CheckSealedBatteryWarrantyUIStatusLevel001SoH80()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN30769_TestStep11_Check Sealed Battery Warranty UI Status level=001 SoH >=80%", null, tagsOfScenario, argumentsOfScenario);
#line 88
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 89
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 90
 testRunner.Then("The Sealed Warranty feature will be Displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 91
 testRunner.When("Click The EXPLORE MORE Button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 92
 testRunner.Then("It Will Show Iframe Sealed Battery Warranty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 93
 testRunner.Then("Take Screen Shot TestStep11_ItWillShowIframe1 in VAN30769 under WarrantyShotResul" +
                        "t", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN30769_TestStep12_Check Sealed Battery Warranty UI Status level=001 SoH >=80%")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN30769_TestStep12_CheckSealedBatteryWarrantyUIStatusLevel001SoH80()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN30769_TestStep12_Check Sealed Battery Warranty UI Status level=001 SoH >=80%", null, tagsOfScenario, argumentsOfScenario);
#line 96
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 97
 testRunner.Given("Close Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 98
 testRunner.When("Modify the SMBinfor file with SMBInfo001-iframe2 and SB90", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 99
 testRunner.When("Restart Vantage Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 100
 testRunner.When("ReLaunch Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 101
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 102
 testRunner.Given("Jump to Battery settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 103
 testRunner.Then("The Sealed Warranty feature will be Displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table133 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "desc"});
                table133.AddRow(new string[] {
                            "SealedTitle",
                            "Sealed Battery Warranty"});
                table133.AddRow(new string[] {
                            "Title",
                            "Battery Warranty:"});
                table133.AddRow(new string[] {
                            "Value",
                            "Not available"});
                table133.AddRow(new string[] {
                            "Tip",
                            "Protect your investment by extending beyond the 1-year battery warranty up to 3-y" +
                                "ear coverage with low upfront cost."});
                table133.AddRow(new string[] {
                            "Button",
                            "EXPLORE MORE"});
#line 104
 testRunner.Then("The Battery Warranty value and Tip should follow the SPEC", ((string)(null)), table133, "Then ");
#line hidden
#line 111
 testRunner.Then("The EXPLORE MORE Button Displayed and under the Value Tip", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 112
 testRunner.Then("GetResponse from BatteryWarranty Restful API with \'PF2KFTG1\' and \'\' and \'90\' Type" +
                        " SMBInfo1SB60", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN30769_TestStep13_Check Sealed Battery Warranty UI Status level=001 SoH >=80%")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN30769_TestStep13_CheckSealedBatteryWarrantyUIStatusLevel001SoH80()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN30769_TestStep13_Check Sealed Battery Warranty UI Status level=001 SoH >=80%", null, tagsOfScenario, argumentsOfScenario);
#line 115
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 116
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 117
 testRunner.Then("The Sealed Warranty feature will be Displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 118
 testRunner.When("Click The Question Mark", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table134 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "desc"});
                table134.AddRow(new string[] {
                            "QuestionMarkTip",
                            "After you purchase the Sealed Battery Warranty, it might take 24 hours or longer " +
                                "for the updated battery entitlement to apply."});
#line 119
 testRunner.Then("The Battery Warranty value and Tip should follow the SPEC", ((string)(null)), table134, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN30769_TestStep14_Check Sealed Battery Warranty UI Status level=001 SoH >=80%")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN30769_TestStep14_CheckSealedBatteryWarrantyUIStatusLevel001SoH80()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN30769_TestStep14_Check Sealed Battery Warranty UI Status level=001 SoH >=80%", null, tagsOfScenario, argumentsOfScenario);
#line 124
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 125
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 126
 testRunner.Then("The Sealed Warranty feature will be Displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 127
 testRunner.When("Click The EXPLORE MORE Button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 128
 testRunner.Then("It Will Show Iframe Lenovo Premium Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 129
 testRunner.Then("It Will Show Iframe Sealed Battery", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 130
 testRunner.Then("It Will Show Iframe Lenovo Warranty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 131
 testRunner.Then("Take Screen Shot TestStep14_ItWillShowIframe2 in VAN30769 under WarrantyShotResul" +
                        "t", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN30769_TestStep18_Check Sealed Battery Warranty UI Status level=004")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN30769_TestStep18_CheckSealedBatteryWarrantyUIStatusLevel004()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN30769_TestStep18_Check Sealed Battery Warranty UI Status level=004", null, tagsOfScenario, argumentsOfScenario);
#line 134
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 135
 testRunner.Given("Close Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 136
 testRunner.When("Modify the SMBinfor file with SMBInfo4 and SB00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 137
 testRunner.When("Restart Vantage Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 138
 testRunner.When("ReLaunch Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 139
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 140
 testRunner.Given("Jump to Battery settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 141
 testRunner.Then("The Sealed Warranty feature will be Displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table135 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "desc"});
                table135.AddRow(new string[] {
                            "SealedTitle",
                            "Sealed Battery Warranty"});
                table135.AddRow(new string[] {
                            "Title",
                            "Battery Warranty:"});
                table135.AddRow(new string[] {
                            "Tip",
                            "Your sealed battery is fully protected now! Check for more Lenovo premium options" +
                                " and services."});
                table135.AddRow(new string[] {
                            "Button",
                            "EXPLORE MORE"});
#line 142
 testRunner.Then("The Battery Warranty value and Tip should follow the SPEC", ((string)(null)), table135, "Then ");
#line hidden
#line 148
 testRunner.Then("The EXPLORE MORE Button Displayed and under the Value Tip", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 150
 testRunner.Then("GetResponse from BatteryWarranty Restful API with \'PF230WCP\' and \'\' and \'90\' Type" +
                        " SMBInfo4SB90", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN30769_TestStep19_Check Sealed Battery Warranty UI Status level=004")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN30769_TestStep19_CheckSealedBatteryWarrantyUIStatusLevel004()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN30769_TestStep19_Check Sealed Battery Warranty UI Status level=004", null, tagsOfScenario, argumentsOfScenario);
#line 153
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 154
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 155
 testRunner.Then("The Sealed Warranty feature will be Displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 156
 testRunner.When("Click The Question Mark", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table136 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "desc"});
                table136.AddRow(new string[] {
                            "QuestionMarkTip",
                            "After you purchase the Sealed Battery Warranty, it might take 24 hours or longer " +
                                "for the updated battery entitlement to apply."});
#line 157
 testRunner.Then("The Battery Warranty value and Tip should follow the SPEC", ((string)(null)), table136, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN30769_TestStep20_Check Sealed Battery Warranty UI Status level=004")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN30769_TestStep20_CheckSealedBatteryWarrantyUIStatusLevel004()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN30769_TestStep20_Check Sealed Battery Warranty UI Status level=004", null, tagsOfScenario, argumentsOfScenario);
#line 162
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 163
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 164
 testRunner.Then("The Sealed Warranty feature will be Displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 165
 testRunner.When("Click The EXPLORE MORE Button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 166
 testRunner.Then("It Will Show Iframe Upgrade Support & Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 167
 testRunner.Then("Take Screen Shot TestStep20_ItWillShowIframe3 in VAN30769 under WarrantyShotResul" +
                        "t", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN30769_TestStep21_Check Sealed Battery Warranty UI Status level=005-2 SoH ＜80%")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN30769_TestStep21_CheckSealedBatteryWarrantyUIStatusLevel005_2SoH80()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN30769_TestStep21_Check Sealed Battery Warranty UI Status level=005-2 SoH ＜80%", null, tagsOfScenario, argumentsOfScenario);
#line 170
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 171
 testRunner.Given("Close Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 172
 testRunner.When("Modify the SMBinfor file with SMBInfo002-iframe1 and SB60", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 173
 testRunner.When("Restart Vantage Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 174
 testRunner.When("ReLaunch Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 175
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 176
 testRunner.Given("Jump to Battery settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 177
 testRunner.Then("The Sealed Warranty feature will be Displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table137 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "desc"});
                table137.AddRow(new string[] {
                            "SealedTitle",
                            "Sealed Battery Warranty"});
                table137.AddRow(new string[] {
                            "Title",
                            "Battery Warranty:"});
                table137.AddRow(new string[] {
                            "Tip",
                            "Your sealed battery is in warranty! Check for more Lenovo premium options and ser" +
                                "vices."});
                table137.AddRow(new string[] {
                            "Button",
                            "EXPLORE MORE"});
#line 178
 testRunner.Then("The Battery Warranty value and Tip should follow the SPEC", ((string)(null)), table137, "Then ");
#line hidden
#line 184
 testRunner.Then("The EXPLORE MORE Button Displayed and under the Value Tip", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 186
 testRunner.Then("GetResponse from BatteryWarranty Restful API with \'PF2FT8MY\' and \'\' and \'60\' Type" +
                        " SMBInfoiframe1SB60", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN30769_TestStep22_Check Sealed Battery Warranty UI Status level=005-2 SoH ＜80%")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN30769_TestStep22_CheckSealedBatteryWarrantyUIStatusLevel005_2SoH80()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN30769_TestStep22_Check Sealed Battery Warranty UI Status level=005-2 SoH ＜80%", null, tagsOfScenario, argumentsOfScenario);
#line 189
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 190
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 191
 testRunner.Then("The Sealed Warranty feature will be Displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 192
 testRunner.When("Click The Question Mark", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table138 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "desc"});
                table138.AddRow(new string[] {
                            "QuestionMarkTip",
                            "After you purchase the Sealed Battery Warranty, it might take 24 hours or longer " +
                                "for the updated battery entitlement to apply."});
#line 193
 testRunner.Then("The Battery Warranty value and Tip should follow the SPEC", ((string)(null)), table138, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN30769_TestStep23_Check Sealed Battery Warranty UI Status level=005-2 SoH ＜80%")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN30769_TestStep23_CheckSealedBatteryWarrantyUIStatusLevel005_2SoH80()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN30769_TestStep23_Check Sealed Battery Warranty UI Status level=005-2 SoH ＜80%", null, tagsOfScenario, argumentsOfScenario);
#line 198
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 199
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 200
 testRunner.Then("The Sealed Warranty feature will be Displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 201
 testRunner.When("Click The EXPLORE MORE Button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 202
 testRunner.Then("It Will Show Iframe Upgrade Support & Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 203
 testRunner.Then("Take Screen Shot TestStep23_ItWillShowIframe3 in VAN30769 under WarrantyShotResul" +
                        "t", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN30769_TestStep24_Check Sealed Battery Warranty UI Status level=002 SoH >80%")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN30769_TestStep24_CheckSealedBatteryWarrantyUIStatusLevel002SoH80()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN30769_TestStep24_Check Sealed Battery Warranty UI Status level=002 SoH >80%", null, tagsOfScenario, argumentsOfScenario);
#line 206
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 207
 testRunner.Given("Close Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 208
 testRunner.When("Modify the SMBinfor file with SMBInfo002-iframe2 and SB90", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 209
 testRunner.When("Restart Vantage Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 210
 testRunner.When("ReLaunch Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 211
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 212
 testRunner.Given("Jump to Battery settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 213
 testRunner.Then("The Sealed Warranty feature will be Displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table139 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "desc"});
                table139.AddRow(new string[] {
                            "SealedTitle",
                            "Sealed Battery Warranty"});
                table139.AddRow(new string[] {
                            "Title",
                            "Battery Warranty:"});
                table139.AddRow(new string[] {
                            "BatteryUpSellendDateText",
                            "End Date:"});
                table139.AddRow(new string[] {
                            "Tip",
                            "Protect your investment by extending beyond the 1-year battery warranty up to 3-y" +
                                "ear coverage with low upfront cost."});
                table139.AddRow(new string[] {
                            "Button",
                            "EXPLORE MORE"});
#line 214
 testRunner.Then("The Battery Warranty value and Tip should follow the SPEC", ((string)(null)), table139, "Then ");
#line hidden
#line 221
 testRunner.Then("The EXPLORE MORE Button Displayed and under the Value Tip", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 222
 testRunner.Then("GetResponse from BatteryWarranty Restful API with \'PF2FT8MY\' and \'\' and \'90\' Type" +
                        " SMBInfo2SB90", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN30769_TestStep25_Check Sealed Battery Warranty UI Status level=002 SoH >80%")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN30769_TestStep25_CheckSealedBatteryWarrantyUIStatusLevel002SoH80()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN30769_TestStep25_Check Sealed Battery Warranty UI Status level=002 SoH >80%", null, tagsOfScenario, argumentsOfScenario);
#line 225
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 226
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 227
 testRunner.Then("The Sealed Warranty feature will be Displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 228
 testRunner.When("Click The Question Mark", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table140 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "desc"});
                table140.AddRow(new string[] {
                            "QuestionMarkTip",
                            "After you purchase the Sealed Battery Warranty, it might take 24 hours or longer " +
                                "for the updated battery entitlement to apply."});
#line 229
 testRunner.Then("The Battery Warranty value and Tip should follow the SPEC", ((string)(null)), table140, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN30769_TestStep26_Check Sealed Battery Warranty UI Status level=002 SoH >80%")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN30769_TestStep26_CheckSealedBatteryWarrantyUIStatusLevel002SoH80()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN30769_TestStep26_Check Sealed Battery Warranty UI Status level=002 SoH >80%", null, tagsOfScenario, argumentsOfScenario);
#line 234
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 235
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 236
 testRunner.Then("The Sealed Warranty feature will be Displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 237
 testRunner.When("Click The EXPLORE MORE Button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 238
 testRunner.Then("It Will Show Iframe Lenovo Premium Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 239
 testRunner.Then("It Will Show Iframe Sealed Battery", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 240
 testRunner.Then("It Will Show Iframe Lenovo Warranty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 241
 testRunner.Then("Take Screen Shot TestStep26_ItWillShowIframe2 in VAN30769 under WarrantyShotResul" +
                        "t", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN30769_TestStep27_Check Sealed Battery Warranty UI Status level=002 SoH >80%")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN30769_TestStep27_CheckSealedBatteryWarrantyUIStatusLevel002SoH80()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN30769_TestStep27_Check Sealed Battery Warranty UI Status level=002 SoH >80%", null, tagsOfScenario, argumentsOfScenario);
#line 244
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 245
 testRunner.Given("Close Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 246
 testRunner.When("Modify the SMBinfor file with SMBInfo002-iframe1 and SB90", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 247
 testRunner.When("Restart Vantage Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 248
 testRunner.When("ReLaunch Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 249
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 250
 testRunner.Given("Jump to Battery settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 251
 testRunner.Then("The Sealed Warranty feature will be Displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table141 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "desc"});
                table141.AddRow(new string[] {
                            "SealedTitle",
                            "Sealed Battery Warranty"});
                table141.AddRow(new string[] {
                            "Title",
                            "Battery Warranty:"});
                table141.AddRow(new string[] {
                            "BatteryUpSellendDateText",
                            "End Date:"});
                table141.AddRow(new string[] {
                            "Tip",
                            "Protect your investment by extending beyond the 1-year battery warranty up to 3-y" +
                                "ear coverage with low upfront cost."});
                table141.AddRow(new string[] {
                            "Button",
                            "EXPLORE MORE"});
#line 252
 testRunner.Then("The Battery Warranty value and Tip should follow the SPEC", ((string)(null)), table141, "Then ");
#line hidden
#line 259
 testRunner.Then("The EXPLORE MORE Button Displayed and under the Value Tip", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 261
 testRunner.Then("GetResponse from BatteryWarranty Restful API with \'PF2FT8MY\' and \'\' and \'90\' Type" +
                        " SMBInfo2SB90", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN30769_TestStep28_Check Sealed Battery Warranty UI Status level=002 SoH >80%")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN30769_TestStep28_CheckSealedBatteryWarrantyUIStatusLevel002SoH80()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN30769_TestStep28_Check Sealed Battery Warranty UI Status level=002 SoH >80%", null, tagsOfScenario, argumentsOfScenario);
#line 264
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 265
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 266
 testRunner.Then("The Sealed Warranty feature will be Displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 267
 testRunner.When("Click The Question Mark", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table142 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "desc"});
                table142.AddRow(new string[] {
                            "QuestionMarkTip",
                            "After you purchase the Sealed Battery Warranty, it might take 24 hours or longer " +
                                "for the updated battery entitlement to apply."});
#line 268
 testRunner.Then("The Battery Warranty value and Tip should follow the SPEC", ((string)(null)), table142, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN30769_TestStep29_Check Sealed Battery Warranty UI Status level=002 SoH >80%")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN30769_TestStep29_CheckSealedBatteryWarrantyUIStatusLevel002SoH80()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN30769_TestStep29_Check Sealed Battery Warranty UI Status level=002 SoH >80%", null, tagsOfScenario, argumentsOfScenario);
#line 273
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 274
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 275
 testRunner.Then("The Sealed Warranty feature will be Displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 276
 testRunner.When("Click The EXPLORE MORE Button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 277
 testRunner.Then("It Will Show Iframe Lenovo Premium Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 278
 testRunner.Then("It Will Show Iframe Sealed Battery", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 279
 testRunner.Then("It Will Show Iframe Lenovo Warranty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 280
 testRunner.Then("Take Screen Shot TestStep29_ItWillShowIframe1 in VAN30769 under WarrantyShotResul" +
                        "t", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN30769_TestStep30_Check Sealed Battery Warranty UI Status level=002 SoH <80%")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN30769_TestStep30_CheckSealedBatteryWarrantyUIStatusLevel002SoH80()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN30769_TestStep30_Check Sealed Battery Warranty UI Status level=002 SoH <80%", null, tagsOfScenario, argumentsOfScenario);
#line 283
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 284
 testRunner.Given("Close Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 285
 testRunner.When("Modify the SMBinfor file with SMBInfo002-iframe1 and SB60", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 286
 testRunner.When("Restart Vantage Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 287
 testRunner.When("ReLaunch Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 288
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 289
 testRunner.Given("Jump to Battery settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 290
 testRunner.Then("The Sealed Warranty feature will be Displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table143 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "desc"});
                table143.AddRow(new string[] {
                            "SealedTitle",
                            "Sealed Battery Warranty"});
                table143.AddRow(new string[] {
                            "Title",
                            "Battery Warranty:"});
                table143.AddRow(new string[] {
                            "Tip",
                            "Your sealed battery is in warranty! Check for more Lenovo premium options and ser" +
                                "vices."});
                table143.AddRow(new string[] {
                            "Button",
                            "EXPLORE MORE"});
#line 291
 testRunner.Then("The Battery Warranty value and Tip should follow the SPEC", ((string)(null)), table143, "Then ");
#line hidden
#line 297
 testRunner.Then("The EXPLORE MORE Button Displayed and under the Value Tip", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 299
 testRunner.Then("GetResponse from BatteryWarranty Restful API with \'PF2FT8MY\' and \'\' and \'60\' Type" +
                        " SMBInfoiframe1SB60", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN30769_TestStep31_Check Sealed Battery Warranty UI Status level=002 SoH <80%")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN30769_TestStep31_CheckSealedBatteryWarrantyUIStatusLevel002SoH80()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN30769_TestStep31_Check Sealed Battery Warranty UI Status level=002 SoH <80%", null, tagsOfScenario, argumentsOfScenario);
#line 302
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 303
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 304
 testRunner.Then("The Sealed Warranty feature will be Displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 305
 testRunner.When("Click The Question Mark", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table144 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "desc"});
                table144.AddRow(new string[] {
                            "QuestionMarkTip",
                            "After you purchase the Sealed Battery Warranty, it might take 24 hours or longer " +
                                "for the updated battery entitlement to apply."});
#line 306
 testRunner.Then("The Battery Warranty value and Tip should follow the SPEC", ((string)(null)), table144, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN30769_TestStep32_Check Sealed Battery Warranty UI Status level=002 SoH <80%")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN30769_TestStep32_CheckSealedBatteryWarrantyUIStatusLevel002SoH80()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN30769_TestStep32_Check Sealed Battery Warranty UI Status level=002 SoH <80%", null, tagsOfScenario, argumentsOfScenario);
#line 311
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 312
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 313
 testRunner.Then("The Sealed Warranty feature will be Displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 314
 testRunner.When("Click The EXPLORE MORE Button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 315
 testRunner.Then("It Will Show Iframe Upgrade Support & Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 316
 testRunner.Then("Take Screen Shot TestStep32_ItWillShowIframe3 in VAN30769 under WarrantyShotResul" +
                        "t", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN30769_TestStep33_Check The feature will be hidden")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN30769_TestStep33_CheckTheFeatureWillBeHidden()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN30769_TestStep33_Check The feature will be hidden", null, tagsOfScenario, argumentsOfScenario);
#line 319
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 320
 testRunner.Given("Close Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 321
 testRunner.Given("Modifying the Service fileSmb Value Add", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 322
 testRunner.When("Restart Vantage Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 323
 testRunner.When("Modify the SMBinfor file with SMBInfo002-iframe1 and SB60", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 324
 testRunner.When("Restart Vantage Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 325
 testRunner.When("ReLaunch Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 326
 testRunner.When("The user connect or disconnect WiFi off lenovo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 327
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 328
 testRunner.Then("The Sealed Warranty feature will be Hidden", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 329
 testRunner.When("The user connect or disconnect WiFi on lenovo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN30769_TestStep34_Check The feature will be hidden")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN30769_TestStep34_CheckTheFeatureWillBeHidden()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN30769_TestStep34_Check The feature will be hidden", null, tagsOfScenario, argumentsOfScenario);
#line 332
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 333
 testRunner.Given("Install Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 334
 testRunner.Given("Close Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 335
 testRunner.Given("Modifying the Service fileSmb Value Add", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 336
 testRunner.When("Restart Vantage Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 337
 testRunner.When("Modify the SMBinfor file with SMBInfo002-iframe1 and SB60", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 338
 testRunner.When("Restart Vantage Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 339
 testRunner.When("ReLaunch Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 340
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 341
 testRunner.Then("The Sealed Warranty feature will be Displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table145 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "desc"});
                table145.AddRow(new string[] {
                            "SealedTitle",
                            "Sealed Battery Warranty"});
                table145.AddRow(new string[] {
                            "Title",
                            "Battery Warranty:"});
                table145.AddRow(new string[] {
                            "Tip",
                            "Your sealed battery is in warranty! Check for more Lenovo premium options and ser" +
                                "vices."});
                table145.AddRow(new string[] {
                            "Button",
                            "EXPLORE MORE"});
#line 342
 testRunner.Then("The Battery Warranty value and Tip should follow the SPEC", ((string)(null)), table145, "Then ");
#line hidden
#line 348
 testRunner.Given("Close Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 349
 testRunner.When("ReLaunch Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 350
 testRunner.When("The user connect or disconnect WiFi off lenovo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 351
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 352
 testRunner.Then("The Sealed Warranty feature will be Displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table146 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "desc"});
                table146.AddRow(new string[] {
                            "SealedTitle",
                            "Sealed Battery Warranty"});
                table146.AddRow(new string[] {
                            "Title",
                            "Battery Warranty:"});
                table146.AddRow(new string[] {
                            "Tip",
                            "Your sealed battery is in warranty! Check for more Lenovo premium options and ser" +
                                "vices."});
                table146.AddRow(new string[] {
                            "Button",
                            "EXPLORE MORE"});
#line 353
 testRunner.Then("The Battery Warranty value and Tip should follow the SPEC", ((string)(null)), table146, "Then ");
#line hidden
#line 359
 testRunner.When("The user connect or disconnect WiFi on lenovo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN30769_TestStep35_Check the UI should be correct, not overlap or truncate")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN30769_TestStep35_CheckTheUIShouldBeCorrectNotOverlapOrTruncate()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN30769_TestStep35_Check the UI should be correct, not overlap or truncate", null, tagsOfScenario, argumentsOfScenario);
#line 362
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 363
 testRunner.Given("Close Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 364
 testRunner.When("Modify the SMBinfor file with SMBInfo002-iframe1 and SB60", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 365
 testRunner.When("Restart Vantage Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 366
 testRunner.When("ReLaunch Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 367
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 368
 testRunner.Then("The Sealed Warranty feature will be Displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 369
 testRunner.When("go to Audio page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 370
 testRunner.Then("The Sealed Warranty feature will be Displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 371
 testRunner.When("Go to Display & Camera page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 372
 testRunner.Then("The Sealed Warranty feature will be Displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 373
 testRunner.When("Go to input page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 374
 testRunner.Then("The Sealed Warranty feature will be Displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 375
 testRunner.When("Go to Smart Assist page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 376
 testRunner.Then("The Sealed Warranty feature will be Displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN30769_TestStep36_Check the UI should be correct, not overlap or truncate")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN30769_TestStep36_CheckTheUIShouldBeCorrectNotOverlapOrTruncate()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN30769_TestStep36_Check the UI should be correct, not overlap or truncate", null, tagsOfScenario, argumentsOfScenario);
#line 379
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 380
 testRunner.Given("Close Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 381
 testRunner.When("Modify the SMBinfor file with SMBInfo002-iframe1 and SB60", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 382
 testRunner.When("Restart Vantage Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 383
 testRunner.When("ReLaunch Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 384
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 385
 testRunner.Then("The Sealed Warranty feature will be Displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 386
 testRunner.Given("Close Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 387
 testRunner.Given("ReLaunch Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 388
 testRunner.When("go to Audio page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 389
 testRunner.Then("The Sealed Warranty feature will be Displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 390
 testRunner.Given("Close Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 391
 testRunner.Given("ReLaunch Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 392
 testRunner.When("Go to Display & Camera page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 393
 testRunner.Then("The Sealed Warranty feature will be Displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 394
 testRunner.Given("Close Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 395
 testRunner.Given("ReLaunch Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 396
 testRunner.When("Go to input page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 397
 testRunner.Then("The Sealed Warranty feature will be Displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 398
 testRunner.Given("Close Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 399
 testRunner.Given("ReLaunch Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 400
 testRunner.When("Go to Smart Assist page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 401
 testRunner.Then("The Sealed Warranty feature will be Displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN30769_TestStep40_Check the UI should be correct, not overlap or truncate")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN30769_TestStep40_CheckTheUIShouldBeCorrectNotOverlapOrTruncate()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN30769_TestStep40_Check the UI should be correct, not overlap or truncate", null, tagsOfScenario, argumentsOfScenario);
#line 404
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 405
 testRunner.Given("Close Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 406
 testRunner.When("Modify the SMBinfor file with SMBInfo002-iframe1 and SB60", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 407
 testRunner.When("Restart Vantage Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 408
 testRunner.When("ReLaunch Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 409
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 410
 testRunner.When("Minimize vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 411
 testRunner.When("Maximize Vatnage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 412
 testRunner.Then("The Sealed Warranty feature will be Displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 413
 testRunner.Then("Take Screen Shot TestStep40_Check_minimizeAndMaximize in VAN30769 under WarrantyS" +
                        "hotResult", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN30769_TestStep41_Check the UI should be correct, not overlap or truncate")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN30769_TestStep41_CheckTheUIShouldBeCorrectNotOverlapOrTruncate()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN30769_TestStep41_Check the UI should be correct, not overlap or truncate", null, tagsOfScenario, argumentsOfScenario);
#line 416
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 417
 testRunner.Given("Close Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 418
 testRunner.When("Modify the SMBinfor file with SMBInfo002-iframe1 and SB60", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 419
 testRunner.When("Restart Vantage Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 420
 testRunner.When("ReLaunch Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 421
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 422
 testRunner.Given("Change DPI to 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 423
 testRunner.Then("The Sealed Warranty feature will be Displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 424
 testRunner.Then("Take Screen Shot TestStep41_Check_DPI200 in VAN30769 under WarrantyShotResult", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 425
 testRunner.Given("Change DPI to 300", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 426
 testRunner.Given("change resolution 2560 to 1440", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 427
 testRunner.Then("The Sealed Warranty feature will be Displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 428
 testRunner.Then("Take Screen Shot TestStep41_Check_Resolution2560-1440 in VAN30769 under WarrantyS" +
                        "hotResult", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 429
 testRunner.Given("change resolution 3840 to 2160", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN30769_TestStep42_Check performance")]
        [NUnit.Framework.CategoryAttribute("TestSealedWarrnty")]
        public virtual void VAN30769_TestStep42_CheckPerformance()
        {
            string[] tagsOfScenario = new string[] {
                    "TestSealedWarrnty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN30769_TestStep42_Check performance", null, tagsOfScenario, argumentsOfScenario);
#line 432
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 433
 testRunner.Given("Install Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 434
 testRunner.Given("Close Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 435
 testRunner.Given("Modifying the Service fileSmb Value Add", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 436
 testRunner.When("Modify the SMBinfor file with SMBInfo002-iframe1 and SB60", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 437
 testRunner.When("Restart Vantage Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 438
 testRunner.Given("ReLaunch Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 439
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 440
 testRunner.Then("The UI should be displayed within 3 seconds when first launch", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 441
 testRunner.Given("Close Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 442
 testRunner.Given("ReLaunch Vantage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 443
 testRunner.When("Go to Power Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 444
 testRunner.Then("The UI should be displayed within 2 seconds when second launch", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
