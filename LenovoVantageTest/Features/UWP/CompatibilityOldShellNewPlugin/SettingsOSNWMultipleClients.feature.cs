// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.4.0.0
//      SpecFlow Generator Version:3.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace LenovoVantageTest.Features.UWP.CompatibilityOldShellNewPlugin
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("OldShellNewPluginSettingsMultipleClients")]
    public partial class OldShellNewPluginSettingsMultipleClientsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "SettingsOSNWMultipleClients.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/UWP/CompatibilityOldShellNewPlugin", "OldShellNewPluginSettingsMultipleClients", "\tSettings Bamboo Agent 1 To Multiple Client", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Micro Settings Local Run 1 Client17")]
        [NUnit.Framework.CategoryAttribute("OSNPSettingsMultipleClientsSpecFlow")]
        public virtual void RunMicroSettingsLocalRun1Client17()
        {
            string[] tagsOfScenario = new string[] {
                    "OSNPSettingsMultipleClientsSpecFlow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Micro Settings Local Run 1 Client17", null, tagsOfScenario, argumentsOfScenario);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.Given(@"Run Clients '10.119.187.200' And Run Version 'VantageUWPType=MicroFrontendsVantage' Run Cat ' cat=BatteryGaugeResetOneBatteryNeedRunonBJ19 || cat=BatteryGaugeResetOneBatteryNeedRunonBJ19ACTDC || cat=DolbySettings||cat=EnergyStarLogo||cat=HSKeyBoardBacklight||cat=ThinkNotSupportVoip || cat=CheckFlipToStartNotDisplayOnThinkpad || cat=CheckThinkPadAlwaysOnUSB || cat=CheckBatteryConditionOnThinkPad || cat=AirplaneModelIcon || cat=KeyboardCS16Mechins || cat=OldHSAMicrophoneAudio || cat=CheckBatteryinformationtextthinkpad || cat=AirplaneModelACtoDC || cat=SettingsSearchSwapAccessoriesPage || cat=SettingsSearchUserDefinedKeyAccessoriesPage || cat=SettingsSearchkeyboardfunctionsAccessoriesPage || cat=BatterySettingsTopPositionNoSmartStandbyThink || cat=CheckBatteryConditionOnThinkPadAcDc || cat=ToolbarThinkACDC || cat=TestToolbarAirplanePowerModeIcon || cat=CheckEasyResume || cat=ThinkpadSupportHighSolution || cat=UserDefinedKey || cat=HSToolbar'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Micro Settings Local Run 1 Client19")]
        [NUnit.Framework.CategoryAttribute("OSNPSettingsMultipleClientsSpecFlow")]
        public virtual void RunMicroSettingsLocalRun1Client19()
        {
            string[] tagsOfScenario = new string[] {
                    "OSNPSettingsMultipleClientsSpecFlow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Micro Settings Local Run 1 Client19", null, tagsOfScenario, argumentsOfScenario);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 12
 testRunner.Given(@"Run Clients '10.119.153.207' And Run Version 'OldShellNewPlugin=OldShellNewPlugin' Run Cat 'cat=SmartStandby || cat=SmartStandbyTask86 || cat=SmartStandbyReinstall || cat=TopRowToolbarOnThinkpad || cat=ThinkSupportVoip  || cat=ToolbarPriorityThinkpad || cat=CheckRemoveECM || cat=KeyboardCS20LanguageKeyBoard || cat=KeyboardCS20Mechins || cat=CheckBatteryConditionOnThinkPad95W || cat=SettingsSearchPowerPage || cat=SettingsSearchVOIPAccessoriesPage || cat=TestSealedWarrntyThink || cat=ConservationModeNotSupportTinkPad || cat=ThinkePadSupportSwap'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Micro Settings Local Run 2 ClientECM")]
        [NUnit.Framework.CategoryAttribute("OSNPSettingsMultipleClientsSpecFlow")]
        public virtual void RunMicroSettingsLocalRun2ClientECM()
        {
            string[] tagsOfScenario = new string[] {
                    "OSNPSettingsMultipleClientsSpecFlow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Micro Settings Local Run 2 ClientECM", null, tagsOfScenario, argumentsOfScenario);
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 17
 testRunner.Given("Run Clients \'10.119.149.196\' And Run Version \'OldShellNewPlugin=OldShellNewPlugin" +
                        "\' Run Cat \'cat=DaytimeAndECM || cat=HSToolbarThinkPad || cat=DaytimeAndECM-Hiber" +
                        "nate\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Micro Settings Local Run 3 Client21")]
        [NUnit.Framework.CategoryAttribute("OSNPSettingsMultipleClientsSpecFlow")]
        public virtual void RunMicroSettingsLocalRun3Client21()
        {
            string[] tagsOfScenario = new string[] {
                    "OSNPSettingsMultipleClientsSpecFlow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Micro Settings Local Run 3 Client21", null, tagsOfScenario, argumentsOfScenario);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 22
 testRunner.Given(@"Run Clients '10.119.168.121' And Run Version 'OldShellNewPlugin=OldShellNewPlugin' Run Cat 'cat=UserDefinedKeyNotSupport || cat=APS || cat=IntelligentScreenOnly || cat=ThinkAPS ||cat=CheckBatteryConditionOnThinkPad230W || cat=SettingsSearchSmartAssistPage || cat=ThinkpadNotSupportHiddenKeyboard'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Settings Local Run 4 Client 300w Gen 3")]
        [NUnit.Framework.CategoryAttribute("MicroSettingsMultipleClientsSpecFlowToolbar")]
        [NUnit.Framework.CategoryAttribute("OSNPSettingsMultipleClientsSpecFlow")]
        public virtual void RunSettingsLocalRun4Client300WGen3()
        {
            string[] tagsOfScenario = new string[] {
                    "MicroSettingsMultipleClientsSpecFlowToolbar",
                    "OSNPSettingsMultipleClientsSpecFlow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Settings Local Run 4 Client 300w Gen 3", null, tagsOfScenario, argumentsOfScenario);
#line 26
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 27
 testRunner.Given(@"Run Clients '10.119.180.134' And Run Version 'OldShellNewPlugin=OldShellNewPlugin' Run Cat 'cat=IdeaToolbarRapidChargeACDC || cat= IdeaToolbarConservationModeACDC || cat=ToolbarCPUMemory || cat=LUDPMetricsForCHSACDC || cat=CheckBatteryinformationideaDC || cat=CheckBatteryinformationideaAC || cat=BatteryGaugeResetOneBatteryIdeaPad'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Settings Local Run 5 Client Thinkpad X1 Yoga 3rd and OS Less or equal 18362")]
        [NUnit.Framework.CategoryAttribute("OSNPSettingsMultipleClientsSpecFlow")]
        public virtual void RunSettingsLocalRun5ClientThinkpadX1Yoga3RdAndOSLessOrEqual18362()
        {
            string[] tagsOfScenario = new string[] {
                    "OSNPSettingsMultipleClientsSpecFlow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Settings Local Run 5 Client Thinkpad X1 Yoga 3rd and OS Less or equal 18362", null, tagsOfScenario, argumentsOfScenario);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 32
 testRunner.Given("Run Clients \'10.119.156.21\' And Run Version \'OldShellNewPlugin=OldShellNewPlugin\'" +
                        " Run Cat \'cat!=OSLessDebug && cat=QuickSettingsOSLess || cat=QuickSettingsOSReso" +
                        "lution\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Settings Local Run 6 Client ThinkBook SMB Elevoc Driver")]
        [NUnit.Framework.CategoryAttribute("OSNPSettingsMultipleClientsSpecFlow")]
        public virtual void RunSettingsLocalRun6ClientThinkBookSMBElevocDriver()
        {
            string[] tagsOfScenario = new string[] {
                    "OSNPSettingsMultipleClientsSpecFlow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Settings Local Run 6 Client ThinkBook SMB Elevoc Driver", null, tagsOfScenario, argumentsOfScenario);
#line 36
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 37
 testRunner.Given("Run Clients \'10.119.132.209\' And Run Version \'OldShellNewPlugin=OldShellNewPlugin" +
                        "\' Run Cat \'cat=SMBMicrophoneElevocAudio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Settings Local Run 7 Client ThinkBook SMB Snaptics Driver")]
        [NUnit.Framework.CategoryAttribute("OSNPSettingsMultipleClientsSpecFlow")]
        public virtual void RunSettingsLocalRun7ClientThinkBookSMBSnapticsDriver()
        {
            string[] tagsOfScenario = new string[] {
                    "OSNPSettingsMultipleClientsSpecFlow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Settings Local Run 7 Client ThinkBook SMB Snaptics Driver", null, tagsOfScenario, argumentsOfScenario);
#line 41
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 42
 testRunner.Given("Run Clients \'10.119.152.53\' And Run Version \'OldShellNewPlugin=OldShellNewPlugin\'" +
                        " Run Cat \'cat=SMBMicrophoneSnapticsAudio \'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Settings Local Run 8 Client keyboardbacklight3ptionson")]
        [NUnit.Framework.CategoryAttribute("OSNPSettingsMultipleClientsSpecFlow")]
        public virtual void RunSettingsLocalRun8ClientKeyboardbacklight3Ptionson()
        {
            string[] tagsOfScenario = new string[] {
                    "OSNPSettingsMultipleClientsSpecFlow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Settings Local Run 8 Client keyboardbacklight3ptionson", null, tagsOfScenario, argumentsOfScenario);
#line 46
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 47
 testRunner.Given("Run Clients \'10.119.153.152\' And Run Version \'OldShellNewPlugin=OldShellNewPlugin" +
                        "\' Run Cat \'cat=keyboardbacklight3OptionsonIdeapad || cat=BatterySettingsTopPosit" +
                        "ionIdea || cat=TestSealedWarrnty || cat=CheckNoRemoveECM\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Settings Local Run 9 Client NOCameraMicrophone")]
        [NUnit.Framework.CategoryAttribute("OSNPSettingsMultipleClientsSpecFlow")]
        public virtual void RunSettingsLocalRun9ClientNOCameraMicrophone()
        {
            string[] tagsOfScenario = new string[] {
                    "OSNPSettingsMultipleClientsSpecFlow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Settings Local Run 9 Client NOCameraMicrophone", null, tagsOfScenario, argumentsOfScenario);
#line 51
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 52
 testRunner.Given(@"Run Clients '10.119.153.143' And Run Version 'OldShellNewPlugin=OldShellNewPlugin' Run Cat 'cat=QuickSettingsNoMicrophone || cat=QuickSettingsNoCameraMicrophone || cat=QuickSettingsNoCamera || cat=TestSealedWarrntyDesktop || cat=TestDTToolbar || cat=SettingsSMBSearchNoMicrophoneHDR'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Settings Local Run 10 Client NOCameraMicrophone")]
        [NUnit.Framework.CategoryAttribute("OSNPSettingsMultipleClientsSpecFlow")]
        public virtual void RunSettingsLocalRun10ClientNOCameraMicrophone()
        {
            string[] tagsOfScenario = new string[] {
                    "OSNPSettingsMultipleClientsSpecFlow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Settings Local Run 10 Client NOCameraMicrophone", null, tagsOfScenario, argumentsOfScenario);
#line 56
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 57
 testRunner.Given("Run Clients \'10.119.175.44\' And Run Version \'OldShellNewPlugin=OldShellNewPlugin\'" +
                        " Run Cat \'cat=SmartBattery2.0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Settings Local Run 11 Client Zeus-SIT")]
        [NUnit.Framework.CategoryAttribute("OSNPSettingsMultipleClientsSpecFlow")]
        public virtual void RunSettingsLocalRun11ClientZeus_SIT()
        {
            string[] tagsOfScenario = new string[] {
                    "OSNPSettingsMultipleClientsSpecFlow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Settings Local Run 11 Client Zeus-SIT", null, tagsOfScenario, argumentsOfScenario);
#line 61
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 62
 testRunner.Given("Run Clients \'10.119.156.112\' And Run Version \'OldShellNewPlugin=OldShellNewPlugin" +
                        "\' Run Cat \'cat=HPDHardwareSettings || cat=BatterySettingsTopPositionThink || cat" +
                        "=SmartBattery2.0NotSupport || cat=MicrophoneKeystroke || cat=CheckHiddenKeyboard" +
                        "Functions\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Settings Local Run 12 Client agent18")]
        [NUnit.Framework.CategoryAttribute("OSNPSettingsMultipleClientsSpecFlow")]
        public virtual void RunSettingsLocalRun12ClientAgent18()
        {
            string[] tagsOfScenario = new string[] {
                    "OSNPSettingsMultipleClientsSpecFlow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Settings Local Run 12 Client agent18", null, tagsOfScenario, argumentsOfScenario);
#line 66
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 67
 testRunner.Given(@"Run Clients '10.119.165.64' And Run Version 'OldShellNewPlugin=OldShellNewPlugin' Run Cat 'cat=MicrophoneSliderBar || cat=MicrophoneAEC || cat=MicrophoneOptimizationModeI ||cat=IdeaPadNotSupportSwap18||cat=HardwareSettingsHPD||cat=IdeaBacklight||cat=ConservationModeCheckButteryCharged || cat=IdeaPadBatteryConditionWithBattery || cat=KeyboardCS20IdeaPad || cat=QuickSettingsOS || cat=QuickSettingsOSGreat ||cat=ConservationModeSupportSomeIdea ||cat=ConservationModeCheckConservationIcon ||cat=ConservationModeCutWindwo || cat=CheckFlipToStartS3S4 || cat=QuickSettingsOnlyMicrophoneUpdate || cat=BatterySettingsTopPositionNoPowerSmartSetingsIdea '", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Settings Local Run 13 Client agent06")]
        [NUnit.Framework.CategoryAttribute("OSNPSettingsMultipleClientsSpecFlow")]
        public virtual void RunSettingsLocalRun13ClientAgent06()
        {
            string[] tagsOfScenario = new string[] {
                    "OSNPSettingsMultipleClientsSpecFlow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Settings Local Run 13 Client agent06", null, tagsOfScenario, argumentsOfScenario);
#line 71
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 72
 testRunner.Given(@"Run Clients '10.119.159.97' And Run Version 'OldShellNewPlugin=OldShellNewPlugin' Run Cat 'cat=ThinkePadNotSupportSwap06||cat=BatteryGaugeResetTwoBattery || cat=Toolbar || cat=WifiToolbar || cat=MicrophoneToolbar || cat=CameraToolbar || cat=KeyboardBacklightToolbarThinkpad || cat=BatteryChargeToolbarThinkpad || cat=AirplaneToolbaTthinkpad || cat=BatteryChargeThresholdSupportDualBatteries || cat=CheckTwoBatteryinformation || cat=CheckBatteryConditionOnThinkPad170W ||cat=BatteryChargeThresholdOneBattery || cat=BatteryChargeThresholdTwoBattery '", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Settings Local Run 14 Client Settings Search Gaming Legion Y740S-15IMH")]
        [NUnit.Framework.CategoryAttribute("OSNPSettingsMultipleClientsSpecFlow")]
        public virtual void RunSettingsLocalRun14ClientSettingsSearchGamingLegionY740S_15IMH()
        {
            string[] tagsOfScenario = new string[] {
                    "OSNPSettingsMultipleClientsSpecFlow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Settings Local Run 14 Client Settings Search Gaming Legion Y740S-15IMH", null, tagsOfScenario, argumentsOfScenario);
#line 76
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 77
 testRunner.Given("Run Clients \'10.119.177.130\' And Run Version \'OldShellNewPlugin=OldShellNewPlugin" +
                        "\' Run Cat \'cat=SettingsSearchPowerPageGamingself \'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Settings Local Run 15 Client ConservationMode Blacklist")]
        [NUnit.Framework.CategoryAttribute("OSNPSettingsMultipleClientsSpecFlow")]
        public virtual void RunSettingsLocalRun15ClientConservationModeBlacklist()
        {
            string[] tagsOfScenario = new string[] {
                    "OSNPSettingsMultipleClientsSpecFlow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Settings Local Run 15 Client ConservationMode Blacklist", null, tagsOfScenario, argumentsOfScenario);
#line 81
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 82
 testRunner.Given("Run Clients \'10.119.163.59\' And Run Version \'OldShellNewPlugin=OldShellNewPlugin\'" +
                        " Run Cat \'cat=ConservationModeBlacklist \'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Settings Local Run 17 Client07")]
        [NUnit.Framework.CategoryAttribute("OSNPSettingsMultipleClientsSpecFlow")]
        public virtual void RunSettingsLocalRun17Client07()
        {
            string[] tagsOfScenario = new string[] {
                    "OSNPSettingsMultipleClientsSpecFlow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Settings Local Run 17 Client07", null, tagsOfScenario, argumentsOfScenario);
#line 91
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 92
 testRunner.Given(@"Run Clients '10.119.185.190' And Run Version 'OldShellNewPlugin=OldShellNewPlugin' Run Cat 'cat=NotSupportSmartAlarm||cat=HSCameraBlur || cat=BatteryGaugeResetOneBatteryIdeaPad || cat=CheckIdeaPadNotSupportRapidCharge || cat=SettingsSearchCameraBlurPage || cat=CheckCameraAndCameraPrivacy || cat=SmokeNoSmartMotionAlarm'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Settings Local Run 18 Client04")]
        [NUnit.Framework.CategoryAttribute("OSNPSettingsMultipleClientsSpecFlow")]
        public virtual void RunSettingsLocalRun18Client04()
        {
            string[] tagsOfScenario = new string[] {
                    "OSNPSettingsMultipleClientsSpecFlow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Settings Local Run 18 Client04", null, tagsOfScenario, argumentsOfScenario);
#line 96
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 97
 testRunner.Given(@"Run Clients '10.119.187.97' And Run Version 'OldShellNewPlugin=OldShellNewPlugin' Run Cat 'cat=TopRowToolbarIdea || cat=KeyboardBacklightToolbarIdea || cat=ConservationModeToolbar || cat=RapidChargeToolbar || cat=CheckRapidCharge || cat=CheckKeyboardTopRowForIdeaPad|| cat=CheckRapidChargeHibernate || cat=CheckRapidChargeRemoveAdapterStatus || cat=CheckRapidChargeFullChargeTime|| cat=SealedBatteryToast'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Settings Local Run 19 Client Settings search Gaming Legion 5 15ITH6")]
        [NUnit.Framework.CategoryAttribute("OSNPSettingsMultipleClientsSpecFlow")]
        public virtual void RunSettingsLocalRun19ClientSettingsSearchGamingLegion515ITH6()
        {
            string[] tagsOfScenario = new string[] {
                    "OSNPSettingsMultipleClientsSpecFlow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Settings Local Run 19 Client Settings search Gaming Legion 5 15ITH6", null, tagsOfScenario, argumentsOfScenario);
#line 101
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 102
 testRunner.Given("Run Clients \'10.119.161.113\' And Run Version \'OldShellNewPlugin=OldShellNewPlugin" +
                        "\' Run Cat \'cat=SettingsSearchSmartFlipToBootPowerPageGaming || cat=SmartBattery2" +
                        ".0GammingMachine \'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Settings Local Run 20 Client 500W")]
        [NUnit.Framework.CategoryAttribute("OSNPSettingsMultipleClientsSpecFlow")]
        public virtual void RunSettingsLocalRun20Client500W()
        {
            string[] tagsOfScenario = new string[] {
                    "OSNPSettingsMultipleClientsSpecFlow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Settings Local Run 20 Client 500W", null, tagsOfScenario, argumentsOfScenario);
#line 106
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 107
 testRunner.Given("Run Clients \'10.119.189.235\' And Run Version \'OldShellNewPlugin=OldShellNewPlugin" +
                        "\' Run Cat \'cat=CheckIdeaPadNoDisplayAlwaysOnUSB \'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Settings Local Run 21 Client S560-16ITS")]
        [NUnit.Framework.CategoryAttribute("OSNPSettingsMultipleClientsSpecFlow")]
        public virtual void RunSettingsLocalRun21ClientS560_16ITS()
        {
            string[] tagsOfScenario = new string[] {
                    "OSNPSettingsMultipleClientsSpecFlow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Settings Local Run 21 Client S560-16ITS", null, tagsOfScenario, argumentsOfScenario);
#line 111
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 112
 testRunner.Given("Run Clients \'10.119.165.117\' And Run Version \'OldShellNewPlugin=OldShellNewPlugin" +
                        "\' Run Cat \'cat=SmartBattery2.0Manual \'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Settings Local Run 22 Client ThinkPad X1 Carbon 6th")]
        [NUnit.Framework.CategoryAttribute("OSNPSettingsMultipleClientsSpecFlow")]
        public virtual void RunSettingsLocalRun22ClientThinkPadX1Carbon6Th()
        {
            string[] tagsOfScenario = new string[] {
                    "OSNPSettingsMultipleClientsSpecFlow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Settings Local Run 22 Client ThinkPad X1 Carbon 6th", null, tagsOfScenario, argumentsOfScenario);
#line 116
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 117
 testRunner.Given(@"Run Clients '10.119.140.28' And Run Version 'OldShellNewPlugin=OldShellNewPlugin' Run Cat 'cat=BatterySettingsTopPositionNoBatteryThink || cat= CheckBatteryConditionOnThinkPadNoBattery || cat=MicrophoneToggle || cat=NoIntelligentScreenOnThink || cat=HSAMicrophoneAudio '", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Settings Local Run 23 Client 52")]
        [NUnit.Framework.CategoryAttribute("OSNPSettingsMultipleClientsSpecFlow")]
        public virtual void RunSettingsLocalRun23Client52()
        {
            string[] tagsOfScenario = new string[] {
                    "OSNPSettingsMultipleClientsSpecFlow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Settings Local Run 23 Client 52", null, tagsOfScenario, argumentsOfScenario);
#line 121
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 122
 testRunner.Given(@"Run Clients '10.119.161.197' And Run Version 'OldShellNewPlugin=OldShellNewPlugin' Run Cat 'cat=CheckOLEDPowerSettings || cat=BatteryChargeThresholdSupportOneBattery || cat=CheckThinkPadNotSupportRapidCharge|| cat=NormalOSHeartBeatNoSupportRegion || cat=SettingsSearchCameraOLEDPage'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Settings Local Run 24 Client TwoBatteryCase")]
        [NUnit.Framework.CategoryAttribute("OSNPSettingsMultipleClientsSpecFlow")]
        public virtual void RunSettingsLocalRun24ClientTwoBatteryCase()
        {
            string[] tagsOfScenario = new string[] {
                    "OSNPSettingsMultipleClientsSpecFlow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Settings Local Run 24 Client TwoBatteryCase", null, tagsOfScenario, argumentsOfScenario);
#line 126
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 127
 testRunner.Given("Run Clients \'10.119.128.214\' And Run Version \'OldShellNewPlugin=OldShellNewPlugin" +
                        "\' Run Cat \'cat=BatteryChargeThresholdTwoBattery\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
