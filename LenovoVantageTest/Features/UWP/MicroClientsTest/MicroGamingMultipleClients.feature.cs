// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.4.0.0
//      SpecFlow Generator Version:3.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace LenovoVantageTest.Features.UWP.MicroClientsTest
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("MicroGamingMultipleClients")]
    public partial class MicroGamingMultipleClientsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "MicroGamingMultipleClients.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/UWP/MicroClientsTest", "MicroGamingMultipleClients", "\tGaming Bamboo Agent 1 To Multiple Client", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Gaming Local Run 1 Client Y760AMD")]
        [NUnit.Framework.CategoryAttribute("MicroGamingMultipleClientsSpecFlow")]
        public virtual void RunGamingLocalRun1ClientY760AMD()
        {
            string[] tagsOfScenario = new string[] {
                    "MicroGamingMultipleClientsSpecFlow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Gaming Local Run 1 Client Y760AMD", null, tagsOfScenario, argumentsOfScenario);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.Given(@"Run Clients '10.119.139.170' And Run Version 'VantageUWPType=MicroFrontendsVantage' Run Cat 'cat=X60NBGPUOCOff ||cat=MultiGameDetection ||cat=ThermalModeACModeX60AutoOff ||cat=X60NBGPUOCOffACToDC ||cat=X60NBGPUOCOffDCToAC ||cat=ThermalModeACModeX60|| cat=ThermalModeACToDCModeX60AutoOff'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Gaming Local Run 2 Client Agent-Y750s")]
        [NUnit.Framework.CategoryAttribute("MicroGamingMultipleClientsSpecFlow")]
        public virtual void RunGamingLocalRun2ClientAgent_Y750S()
        {
            string[] tagsOfScenario = new string[] {
                    "MicroGamingMultipleClientsSpecFlow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Gaming Local Run 2 Client Agent-Y750s", null, tagsOfScenario, argumentsOfScenario);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 12
 testRunner.Given("Run Clients \'10.119.171.47\' And Run Version \'VantageUWPType=MicroFrontendsVantage" +
                        "\' Run Cat \'cat=GamingNetworkBoostAutoCloseToast\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Gaming Local Run 3 Client Agent-L360Intel")]
        [NUnit.Framework.CategoryAttribute("MicroGamingMultipleClientsSpecFlow")]
        public virtual void RunGamingLocalRun3ClientAgent_L360Intel()
        {
            string[] tagsOfScenario = new string[] {
                    "MicroGamingMultipleClientsSpecFlow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Gaming Local Run 3 Client Agent-L360Intel", null, tagsOfScenario, argumentsOfScenario);
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 17
 testRunner.Given(@"Run Clients '10.119.172.196' And Run Version 'VantageUWPType=MicroFrontendsVantage' Run Cat 'cat=GamingGPUOCVRAM ||cat=DPMSearchUnSupport || cat=GamingSearchNetworkBoost || cat=GamingSearchAutoClose || cat=GamingSearchThermalMode3 || cat=SettingsSearchSmartPowerPageGaming'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Gaming Local Run 4 Client Agent-Y760AMDPQ")]
        [NUnit.Framework.CategoryAttribute("MicroGamingMultipleClientsSpecFlow")]
        public virtual void RunGamingLocalRun4ClientAgent_Y760AMDPQ()
        {
            string[] tagsOfScenario = new string[] {
                    "MicroGamingMultipleClientsSpecFlow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Gaming Local Run 4 Client Agent-Y760AMDPQ", null, tagsOfScenario, argumentsOfScenario);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 22
 testRunner.Given("Run Clients \'10.119.164.190\' And Run Version \'VantageUWPType=MicroFrontendsVantag" +
                        "e\' Run Cat \'cat=IntellegentSubMode || cat=PowerPlanPQPlans || cat=GamingEnableNa" +
                        "himic || cat=GamingEnableX-rite\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Gaming Local Run 5 Client Agent-Y560AMDB")]
        [NUnit.Framework.CategoryAttribute("MicroGamingMultipleClientsSpecFlow")]
        public virtual void RunGamingLocalRun5ClientAgent_Y560AMDB()
        {
            string[] tagsOfScenario = new string[] {
                    "MicroGamingMultipleClientsSpecFlow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Gaming Local Run 5 Client Agent-Y560AMDB", null, tagsOfScenario, argumentsOfScenario);
#line 26
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 27
 testRunner.Given("Run Clients \'10.119.175.34\' And Run Version \'VantageUWPType=MicroFrontendsVantage" +
                        "\' Run Cat \'cat=PowerPlanBalanceMode || cat=HWInfoAMD || cat=GamingNetworkBoostIn" +
                        "stallVantage\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Gaming Local Run 6 Client Agent-Y560AMDBQ")]
        [NUnit.Framework.CategoryAttribute("MicroGamingMultipleClientsSpecFlow")]
        public virtual void RunGamingLocalRun6ClientAgent_Y560AMDBQ()
        {
            string[] tagsOfScenario = new string[] {
                    "MicroGamingMultipleClientsSpecFlow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Gaming Local Run 6 Client Agent-Y560AMDBQ", null, tagsOfScenario, argumentsOfScenario);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 32
 testRunner.Given(@"Run Clients '10.119.169.187' And Run Version 'VantageUWPType=MicroFrontendsVantage' Run Cat 'cat=PowerPlanBQPlans  || cat= GamingTagDetection || cat=OverDriveSupported || cat=Thermalmode4.0Supported || cat=LightingNBSupported ||cat=GamingSearchTP ||cat=GamingSearch ||cat=GamingSearchMacroKey ||cat=GamingSearchHybridMode ||cat=GamingSearchOverDrive '", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Gaming Local Run 7 Client Agent-Y560AMDPB")]
        [NUnit.Framework.CategoryAttribute("MicroGamingMultipleClientsSpecFlow")]
        public virtual void RunGamingLocalRun7ClientAgent_Y560AMDPB()
        {
            string[] tagsOfScenario = new string[] {
                    "MicroGamingMultipleClientsSpecFlow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Gaming Local Run 7 Client Agent-Y560AMDPB", null, tagsOfScenario, argumentsOfScenario);
#line 36
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 37
 testRunner.Given("Run Clients \'10.119.188.123\' And Run Version \'VantageUWPType=MicroFrontendsVantag" +
                        "e\' Run Cat \'cat=PowerPlanPBPlans || cat=HWInfoAMDOCOFF || cat=LightingeffectDMTi" +
                        "psNB || cat=LightingeffectitemTipsNB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Gaming Local Run 8 Client Agent-Y560AMDP")]
        [NUnit.Framework.CategoryAttribute("MicroGamingMultipleClientsSpecFlow")]
        public virtual void RunGamingLocalRun8ClientAgent_Y560AMDP()
        {
            string[] tagsOfScenario = new string[] {
                    "MicroGamingMultipleClientsSpecFlow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Gaming Local Run 8 Client Agent-Y560AMDP", null, tagsOfScenario, argumentsOfScenario);
#line 41
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 42
 testRunner.Given("Run Clients \'10.119.177.64\' And Run Version \'VantageUWPType=MicroFrontendsVantage" +
                        "\' Run Cat \'cat=PowerPlanPerformanceMode\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Gaming Local Run 9 Client Agent-Y560AMDNewGPUOC")]
        [NUnit.Framework.CategoryAttribute("MicroGamingMultipleClientsSpecFlow")]
        public virtual void RunGamingLocalRun9ClientAgent_Y560AMDNewGPUOC()
        {
            string[] tagsOfScenario = new string[] {
                    "MicroGamingMultipleClientsSpecFlow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Gaming Local Run 9 Client Agent-Y560AMDNewGPUOC", null, tagsOfScenario, argumentsOfScenario);
#line 46
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 47
 testRunner.Given("Run Clients \'10.119.138.239\' And Run Version \'VantageUWPType=MicroFrontendsVantag" +
                        "e\' Run Cat \'cat=PowerPlanManualThreePlans || cat=HWInfoAMDOCON || cat=PowerPlanM" +
                        "odifyPlanSettings\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Gaming Local Run 10 Client Agent-Y760AMD")]
        [NUnit.Framework.CategoryAttribute("MicroGamingMultipleClientsSpecFlow")]
        public virtual void RunGamingLocalRun10ClientAgent_Y760AMD()
        {
            string[] tagsOfScenario = new string[] {
                    "MicroGamingMultipleClientsSpecFlow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Gaming Local Run 10 Client Agent-Y760AMD", null, tagsOfScenario, argumentsOfScenario);
#line 51
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 52
 testRunner.Given("Run Clients \'10.119.148.194\' And Run Version \'VantageUWPType=MicroFrontendsVantag" +
                        "e\' Run Cat \'cat=PowerPlanNoPlan || cat=PowerPlanModifyPlanCreateSamePlan\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Gaming Local Run 11 Client Agent-Y760AMDQ")]
        [NUnit.Framework.CategoryAttribute("MicroGamingMultipleClientsSpecFlow")]
        public virtual void RunGamingLocalRun11ClientAgent_Y760AMDQ()
        {
            string[] tagsOfScenario = new string[] {
                    "MicroGamingMultipleClientsSpecFlow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Gaming Local Run 11 Client Agent-Y760AMDQ", null, tagsOfScenario, argumentsOfScenario);
#line 56
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 57
 testRunner.Given(@"Run Clients '10.119.175.240' And Run Version 'VantageUWPType=MicroFrontendsVantage' Run Cat 'cat=PowerPlanQuietPlan || cat=X60NBGPUOCOn||cat=X60NBGPUOCOnACToDC||cat=X60NBGPUOCOnDCToAC ||cat=ThermalModeDCToACModeX60AutoOn ||cat=ThermalModeDCModeX60AutoOff ||cat=ThermalModeACToDCModeX60AutoOn'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Gaming Local Run 12 Client Agent-C730")]
        [NUnit.Framework.CategoryAttribute("MicroGamingMultipleClientsSpecFlow")]
        public virtual void RunGamingLocalRun12ClientAgent_C730()
        {
            string[] tagsOfScenario = new string[] {
                    "MicroGamingMultipleClientsSpecFlow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Gaming Local Run 12 Client Agent-C730", null, tagsOfScenario, argumentsOfScenario);
#line 61
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 62
 testRunner.Given(@"Run Clients '10.119.144.100' And Run Version 'VantageUWPType=MicroFrontendsVantage' Run Cat 'cat=GamingReskinWiFiSecuritySubpage || cat=GamingCapacity_C730 || cat=GamingOLdCPUOC || cat=OldDriverLackXTUS4 || cat=OldDriverLackNetfilter || cat=OldDriverLackNetfilterS3 || cat=OldDriverLackNetfilterS4 || cat=OldDriverLackLightingS4  || cat=GamingOLdCPUOCNoWifi  || cat=CPUOCSupported  || cat=ThermalmodeUnSupported || cat=LightingTowerSupportedLEDDriver|| cat=GamingMemoryOCtestNoWifi || cat=GamingSearchLighting || cat=GamingSearchRAMOC || cat=GamingSearchOldCPUOC || cat=GamingSearchNoDriverNB || cat=GamingSearchNoDriverLighting || cat=GamingSearchNoDriverOldCPUOC || cat=GamingSearchNoDriverRAMOC || cat=GamingSearchNoThermalMode'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Gaming Local Run 13 Client Agent-Y560IntelNewCPUGPUOC")]
        [NUnit.Framework.CategoryAttribute("MicroGamingMultipleClientsSpecFlow")]
        public virtual void RunGamingLocalRun13ClientAgent_Y560IntelNewCPUGPUOC()
        {
            string[] tagsOfScenario = new string[] {
                    "MicroGamingMultipleClientsSpecFlow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Gaming Local Run 13 Client Agent-Y560IntelNewCPUGPUOC", null, tagsOfScenario, argumentsOfScenario);
#line 66
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 67
 testRunner.Given(@"Run Clients '10.119.133.97' And Run Version 'VantageUWPType=MicroFrontendsVantage' Run Cat 'cat=X60NBCPUGPUOCOn || cat=X60NBCPUGPUOCOnACToDC || cat=X60NBCPUGPUOCOnDCToAC || cat=HWInfoIntelCPUGPUOCOn || cat=ThermalModeDCModeX60 || cat=GamingThermalModeX60New ||cat=GamingSearchX60GPUOC || cat=GamingSearchVRAMOC || cat=GamingSearchNoDriverX60GPUOC || cat=GamingSearchNoDriverVRAMOC'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Gaming Local Run 14 Client Agent-Y760IntelNewCPUOC")]
        [NUnit.Framework.CategoryAttribute("MicroGamingMultipleClientsSpecFlow")]
        public virtual void RunGamingLocalRun14ClientAgent_Y760IntelNewCPUOC()
        {
            string[] tagsOfScenario = new string[] {
                    "MicroGamingMultipleClientsSpecFlow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Gaming Local Run 14 Client Agent-Y760IntelNewCPUOC", null, tagsOfScenario, argumentsOfScenario);
#line 71
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 72
 testRunner.Given(@"Run Clients '10.119.146.59' And Run Version 'VantageUWPType=MicroFrontendsVantage' Run Cat 'cat=X60NBCPUOCOn || cat=X60NBCPUOCOnACToDC || cat=X60NBCPUOCOnDCToAC|| cat=HWInfoIntelCPUOCOn || cat= ThermalModeDCModeX60AutoOn || cat=ThermalModeDCToACModeX60AutoOff || cat= ThermalModeACModeX60AutoOn'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Gaming Local Run 15 Client Agent-Y74015")]
        [NUnit.Framework.CategoryAttribute("MicroGamingMultipleClientsSpecFlow")]
        public virtual void RunGamingLocalRun15ClientAgent_Y74015()
        {
            string[] tagsOfScenario = new string[] {
                    "MicroGamingMultipleClientsSpecFlow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Gaming Local Run 15 Client Agent-Y74015", null, tagsOfScenario, argumentsOfScenario);
#line 76
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 77
 testRunner.Given(@"Run Clients '10.119.165.49' And Run Version 'VantageUWPType=MicroFrontendsVantage' Run Cat 'cat=GamingMemoryOCOfftest || cat=GamingMacroKey15InchKeyboardLayout || cat=GamingOldThermalModeAC || cat=GamingOldThermalModeDC || cat= AutoClose || cat=RAMOCSupportedDriverinstalled'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Gaming Local Run 16 Client Agent-T750RKL")]
        [NUnit.Framework.CategoryAttribute("MicroGamingMultipleClientsSpecFlow")]
        public virtual void RunGamingLocalRun16ClientAgent_T750RKL()
        {
            string[] tagsOfScenario = new string[] {
                    "MicroGamingMultipleClientsSpecFlow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Gaming Local Run 16 Client Agent-T750RKL", null, tagsOfScenario, argumentsOfScenario);
#line 81
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 82
    testRunner.Given(@"Run Clients '10.119.171.85' And Run Version 'VantageUWPType=MicroFrontendsVantage' Run Cat 'cat=GamingGPULightingProfileDefaultNV || cat=GPULightingDriverLackNV || cat=LightingeffectDMTipsRGB || cat=LightingeffectitemTipsRGB || cat=GPULightingBrightness || cat=GPULightingColorSquare || cat=GPULightingEffect || cat=GPULightingSpeed || cat=LightingSwitchEightLights || cat=X50MemoryLightingDefault || cat=X50MemoryLightingBrightness || cat=X50MemoryLightingColorSquare || cat=X50MemoryLightingEffect || cat=X50MemoryLightingSpeed || cat=LightingDTSixLightsRear || cat=DTLightingOldSingleColorEffect || cat=DTLightingOldRGBEffect || cat=DTLightingOldSingleSpeed || cat=DTLightingOldSingleBrightness || cat=NVTurboBoostNotSupported || cat=DTLightingOldSingleColorSquare'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Gaming Local Run 17 Client Agent-T750CML")]
        [NUnit.Framework.CategoryAttribute("MicroGamingMultipleClientsSpecFlow")]
        public virtual void RunGamingLocalRun17ClientAgent_T750CML()
        {
            string[] tagsOfScenario = new string[] {
                    "MicroGamingMultipleClientsSpecFlow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Gaming Local Run 17 Client Agent-T750CML", null, tagsOfScenario, argumentsOfScenario);
#line 86
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 87
    testRunner.Given("Run Clients \'10.119.154.64\' And Run Version \'VantageUWPType=MicroFrontendsVantage" +
                        "\' Run Cat \'cat=LightingDTSixLightsCooling || cat=GamingX50CPUOCOtherItemsT750\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Gaming Local Run 18 Client Agent-T550Intel")]
        [NUnit.Framework.CategoryAttribute("MicroGamingMultipleClientsSpecFlow")]
        public virtual void RunGamingLocalRun18ClientAgent_T550Intel()
        {
            string[] tagsOfScenario = new string[] {
                    "MicroGamingMultipleClientsSpecFlow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Gaming Local Run 18 Client Agent-T550Intel", null, tagsOfScenario, argumentsOfScenario);
#line 91
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 92
    testRunner.Given("Run Clients \'10.119.153.183\' And Run Version \'VantageUWPType=MicroFrontendsVantag" +
                        "e\' Run Cat \'cat=T550IntelLightingRear || cat=HomepageLighting\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Gaming Local Run 19 Client Agent-T770ADL")]
        [NUnit.Framework.CategoryAttribute("MicroGamingMultipleClientsSpecFlow")]
        public virtual void RunGamingLocalRun19ClientAgent_T770ADL()
        {
            string[] tagsOfScenario = new string[] {
                    "MicroGamingMultipleClientsSpecFlow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Gaming Local Run 19 Client Agent-T770ADL", null, tagsOfScenario, argumentsOfScenario);
#line 96
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 97
    testRunner.Given(@"Run Clients '10.119.185.6' And Run Version 'VantageUWPType=MicroFrontendsVantage' Run Cat 'cat=DTLightingRGBBrightness || cat=DTLightingNewSingleBrightness || cat=DTLightingNewRGBBrightness || cat=DTLightingRGBColorSquare || cat=DTLightingNewSingleColorSquare || cat=DTLightingNewRGBColorSquare || cat=DTLightingRGBEffect || cat=DTLightingNewSingleColorEffect || cat=DTLightingNewSingleColorEffect || cat=DTLightingRGBNewEffect || cat=DTLightingRGBSpeed || cat=DTLightingNewSingleSpeed || cat=DTLightingNewRGBSpeed || cat=LightingNeweffectDMTipsRGB || cat=LightingNeweffectitemTipsRGB || cat=LightingDTX70SixLightsRear || cat=NVTurboBoost'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
