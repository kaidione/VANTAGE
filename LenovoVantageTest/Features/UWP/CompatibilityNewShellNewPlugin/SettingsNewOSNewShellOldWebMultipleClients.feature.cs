// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.4.0.0
//      SpecFlow Generator Version:3.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace LenovoVantageTest.Features.UWP.CompatibilityNewShellNewPlugin
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("SettingsNewOSNewShellOldWebMultipleClients")]
    public partial class SettingsNewOSNewShellOldWebMultipleClientsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "SettingsNewOSNewShellOldWebMultipleClients.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/UWP/CompatibilityNewShellNewPlugin", "SettingsNewOSNewShellOldWebMultipleClients", "\tSettings Bamboo Agent 1 To Multiple Client", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Settings Local Run 1 Client17")]
        [NUnit.Framework.CategoryAttribute("SettingsNewOsNSOWMultiple")]
        public virtual void RunSettingsLocalRun1Client17()
        {
            string[] tagsOfScenario = new string[] {
                    "SettingsNewOsNSOWMultiple"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Settings Local Run 1 Client17", null, tagsOfScenario, argumentsOfScenario);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.Given(@"Run Clients '10.119.187.200' And Run Version 'VantageUWPType=MicroFrontendsVantage' Run Cat 'cat=NOSKeyboardBacklightToolbarThinkpad ||cat=NOSBatteryChargeToolbarThinkpad ||cat=NOSAirplaneToolbaTthinkpad||cat=NOSToolbarPriorityThinkpad || cat=OSToolBarlowPower || cat=OSToolbarAirplaneModeACDC || cat=OSToolbarThinkACDC || cat=DolbySettings||cat=EnergyStarLogo||cat=HSKeyBoardBacklight||cat=ThinkNotSupportVoip || cat=CheckFlipToStartNotDisplayOnThinkpad || cat=CheckThinkPadAlwaysOnUSB || cat=CheckBatteryConditionOnThinkPad || cat=AirplaneModelIcon || cat=KeyboardCS16Mechins || cat=OldHSAMicrophoneAudio || cat=CheckBatteryinformationtextthinkpad ||cat=BatteryChargeThresholdOneBattery|| cat=AirplaneModelACtoDC || cat=SettingsSearchSwapAccessoriesPage || cat=SettingsSearchUserDefinedKeyAccessoriesPage || cat=SettingsSearchkeyboardfunctionsAccessoriesPage || cat=BatterySettingsTopPositionNoSmartStandbyThink || cat=IntelligentScreenOnly || cat=SettingsSearchPowerPageEasyResume || cat=BatteryGaugeResetOneBatteryNeedRunonBJ19ACTDC || cat=CheckBatteryConditionOnThinkPadAcDc || cat=ThinkpadSupportHighSolution || cat=UserDefinedKey || cat=HSToolbar'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Settings Local Run 2 Client19")]
        [NUnit.Framework.CategoryAttribute("SettingsNewOsNSOWMultiple")]
        public virtual void RunSettingsLocalRun2Client19()
        {
            string[] tagsOfScenario = new string[] {
                    "SettingsNewOsNSOWMultiple"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Settings Local Run 2 Client19", null, tagsOfScenario, argumentsOfScenario);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 12
 testRunner.Given(@"Run Clients '10.119.153.207' And Run Version 'NewShellNewPlugin=NewShellNewPlugin' Run Cat 'cat=OSTopRowToolbarOnThinkpad || cat=OSToolBarMachineBoughtinChina || cat=OSToolBarOnly || cat=SmartStandby || cat=SmartStandbyTask86 || cat=SmartStandbyReinstall || cat=ThinkSupportVoip || cat=CheckRemoveECM || cat=KeyboardCS20LanguageKeyBoard || cat=KeyboardCS20Mechins || cat=CheckBatteryConditionOnThinkPad95W || cat=SettingsSearchPowerPage || cat=SettingsSearchVOIPAccessoriesPage || cat=ConservationModeNotSupportTinkPad || cat=ThinkePadSupportSwap '", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Settings Local Run 3 Client20")]
        [NUnit.Framework.CategoryAttribute("SettingsNewOsNSOWMultiple")]
        public virtual void RunSettingsLocalRun3Client20()
        {
            string[] tagsOfScenario = new string[] {
                    "SettingsNewOsNSOWMultiple"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Settings Local Run 3 Client20", null, tagsOfScenario, argumentsOfScenario);
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 17
 testRunner.Given(@"Run Clients '10.119.173.22' And Run Version 'NewShellNewPlugin=NewShellNewPlugin' Run Cat 'cat=OSKeyboardBacklightfourToolbarIdea || cat=OSToolBarViewWarrantyPage || cat=autokeyboardbacklightonIdeapad ||cat=SR2 ||cat=SmartMotionAlarm || cat=HardwareSettingsHPD || cat=CheckIdeaPadAlwaysOnUSB || cat=ConservationModeCutRepidAndConservation || cat=QuickSettingsCameraButtonNarrator || cat=HiddenKeyboardForIdeapad || cat=HardwareSettingsVideoPlayback || cat=keyboardbacklightNot3OptionsonIdeapad || cat=SettingsSearchZeroTouchSmartAssistPage || cat=SettingsSearchAccessoriesPage '", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Settings Local Run 4 Client Red Yoga Slim 7 14ARE05")]
        [NUnit.Framework.CategoryAttribute("SettingsNewOsNSOWMultiple")]
        public virtual void RunSettingsLocalRun4ClientRedYogaSlim714ARE05()
        {
            string[] tagsOfScenario = new string[] {
                    "SettingsNewOsNSOWMultiple"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Settings Local Run 4 Client Red Yoga Slim 7 14ARE05", null, tagsOfScenario, argumentsOfScenario);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 22
 testRunner.Given(@"Run Clients '10.119.177.121' And Run Version 'NewShellNewPlugin=NewShellNewPlugin' Run Cat 'cat=OSTopRowToolbarIdea || cat=OSKeyboardBacklightToolbarIdea || cat=OSToolBar  || cat=NOSToolbarLink || cat=NOSConservationModeToolbar || cat=NOSRapidChargeToolbar || cat=NOSToolbarPriorityIdeapad || cat=OSIdeaToolbarConservationModeAC || cat=OSIdeaToolbarRapidChargeAC || cat=IdeaBacklight || cat=OSIdeaToolbarConservationModeACDC || cat=OSIdeaToolbarRapidChargeACDC || cat=OSToolbarACDC || cat=OSToolbarIdeaACDC || cat=IdeaPadBatteryConditionWithBattery || cat=CheckRapidChargeFullChargeTime || cat=CheckRapidCharge || cat=CheckRapidChargeRemoveAdapterStatus || cat=CheckBatteryinformationideaDC || cat=CheckBatteryinformationideaAC '", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Settings Local Run 5 Glient ITS46")]
        [NUnit.Framework.CategoryAttribute("SettingsNewOsNSOWMultiple")]
        public virtual void RunSettingsLocalRun5GlientITS46()
        {
            string[] tagsOfScenario = new string[] {
                    "SettingsNewOsNSOWMultiple"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Settings Local Run 5 Glient ITS46", null, tagsOfScenario, argumentsOfScenario);
#line 26
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 27
    testRunner.Given("Run Clients \'10.119.162.231\' And Run Version \'NewShellNewPlugin=NewShellNewPlugin" +
                        "\' Run Cat \'cat=NOSToolbarPrivacyGuard || cat=CheckPrivacyGaurd\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Settings Local Run 6 Glient Gaming Legion 5 15ITH6")]
        [NUnit.Framework.CategoryAttribute("SettingsNewOsNSOWMultiple")]
        public virtual void RunSettingsLocalRun6GlientGamingLegion515ITH6()
        {
            string[] tagsOfScenario = new string[] {
                    "SettingsNewOsNSOWMultiple"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Settings Local Run 6 Glient Gaming Legion 5 15ITH6", null, tagsOfScenario, argumentsOfScenario);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 32
    testRunner.Given(@"Run Clients '10.119.189.127' And Run Version 'NewShellNewPlugin=NewShellNewPlugin' Run Cat 'cat=ToolbarimageforNewWindows || cat=QuickSettingsOSInGamingMachine || cat=CheckCameraAndCameraPrivacygameming || cat=SettingsSearchSmartFlipToBootPowerPageGaming || cat=SmartBattery2.0GammingMachine || cat=NotSupportIdeaBacklight || cat=CheckCameraAndCameraPrivacygameming'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Settings Local Run 7 Glient XiaoXinPro-13ARE 2020")]
        [NUnit.Framework.CategoryAttribute("SettingsNewOsNSOWMultiple")]
        public virtual void RunSettingsLocalRun7GlientXiaoXinPro_13ARE2020()
        {
            string[] tagsOfScenario = new string[] {
                    "SettingsNewOsNSOWMultiple"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Settings Local Run 7 Glient XiaoXinPro-13ARE 2020", null, tagsOfScenario, argumentsOfScenario);
#line 36
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 37
    testRunner.Given("Run Clients \'10.119.161.51\' And Run Version \'NewShellNewPlugin=NewShellNewPlugin\'" +
                        " Run Cat \'cat=OSECourseToolbar || cat=IdeaPadNotSupportSwap18 || cat=CheckKeyboa" +
                        "rdTopRowForIdeaPad\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Settings Local Run 8 Glient ThinkPad Yoga Gen5")]
        [NUnit.Framework.CategoryAttribute("SettingsNewOsNSOWMultiple")]
        public virtual void RunSettingsLocalRun8GlientThinkPadYogaGen5()
        {
            string[] tagsOfScenario = new string[] {
                    "SettingsNewOsNSOWMultiple"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Settings Local Run 8 Glient ThinkPad Yoga Gen5", null, tagsOfScenario, argumentsOfScenario);
#line 41
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 42
    testRunner.Given(@"Run Clients '10.119.144.128' And Run Version 'NewShellNewPlugin=NewShellNewPlugin' Run Cat 'cat=NOSToolbarCPUMemory || cat=OSTopRowToolbarThinkpad || cat=OSWifiToolbar || cat=OSMicrophoneToolbar || cat=OSCameraToolbar || cat=BatteryGaugeResetOneBatteryNeedRunonBJ19 || cat=QuickSettingsOS || cat=QuickSettingsOSGreat || cat=QuickSettingsOnlyMicrophoneUpdate || cat=CheckLEBatteryChargeThresholdOneBattery || cat= BatteryChargeThresholdSupportOneBattery || cat=CheckQuestionMarkMessage '", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Settings Local Run 9 Glient X1 Yoga 2nd No Battery")]
        [NUnit.Framework.CategoryAttribute("SettingsNewOsNSOWMultiple")]
        public virtual void RunSettingsLocalRun9GlientX1Yoga2NdNoBattery()
        {
            string[] tagsOfScenario = new string[] {
                    "SettingsNewOsNSOWMultiple"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Settings Local Run 9 Glient X1 Yoga 2nd No Battery", null, tagsOfScenario, argumentsOfScenario);
#line 46
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 47
    testRunner.Given("Run Clients \'10.119.172.55\' And Run Version \'NewShellNewPlugin=NewShellNewPlugin\'" +
                        " Run Cat \'cat=OSToolbarNoBattery || cat=CheckEasyResume \'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Settings Local Run 10 Client25")]
        [NUnit.Framework.CategoryAttribute("SettingsNewOsNSOWMultiple")]
        public virtual void RunSettingsLocalRun10Client25()
        {
            string[] tagsOfScenario = new string[] {
                    "SettingsNewOsNSOWMultiple"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Settings Local Run 10 Client25", null, tagsOfScenario, argumentsOfScenario);
#line 51
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 52
 testRunner.Given("Run Clients \'10.119.181.161\' And Run Version \'NewShellNewPlugin=NewShellNewPlugin" +
                        "\' Run Cat \'cat=QuickSettingsCameraButton || cat=NewHSAForteMediaMicrophoneAudio " +
                        "|| cat=NOSMBMicrophoneAudio || cat=CheckFlipToStart\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Settings Local Run 11 Client07")]
        [NUnit.Framework.CategoryAttribute("SettingsNewOsNSOWMultiple")]
        public virtual void RunSettingsLocalRun11Client07()
        {
            string[] tagsOfScenario = new string[] {
                    "SettingsNewOsNSOWMultiple"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Settings Local Run 11 Client07", null, tagsOfScenario, argumentsOfScenario);
#line 56
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 57
 testRunner.Given(@"Run Clients '10.119.168.212' And Run Version 'NewShellNewPlugin=NewShellNewPlugin' Run Cat 'cat=NotSupportSmartAlarm||cat=HSCameraBlur || cat=BatteryGaugeResetOneBatteryIdeaPad || cat=CheckIdeaPadNotSupportRapidCharge || cat=SettingsSearchCameraBlurPage || cat=CheckCameraAndCameraPrivacy || cat=SmokeNoSmartMotionAlarm '", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Settings Local Run 14 Glient 21")]
        [NUnit.Framework.CategoryAttribute("SettingsNewOsNSOWMultiple")]
        public virtual void RunSettingsLocalRun14Glient21()
        {
            string[] tagsOfScenario = new string[] {
                    "SettingsNewOsNSOWMultiple"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Settings Local Run 14 Glient 21", null, tagsOfScenario, argumentsOfScenario);
#line 61
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 62
 testRunner.Given(@"Run Clients '10.119.168.121' And Run Version 'NewShellNewPlugin=NewShellNewPlugin' Run Cat 'cat=UserDefinedKeyNotSupport || cat=APS  || cat=ThinkAPS ||cat=CheckBatteryConditionOnThinkPad230W || cat=SettingsSearchSmartAssistPage || cat=CheckThinkPadNotSupportRapidCharge || cat=ThinkpadNotSupportHiddenKeyboard || cat=ThinkePadNotSupportSwap06'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Settings Local Run 12 Glient keyboardbacklight3ptionson")]
        [NUnit.Framework.CategoryAttribute("SettingsNewOsNSOWMultiple")]
        public virtual void RunSettingsLocalRun12GlientKeyboardbacklight3Ptionson()
        {
            string[] tagsOfScenario = new string[] {
                    "SettingsNewOsNSOWMultiple"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Settings Local Run 12 Glient keyboardbacklight3ptionson", null, tagsOfScenario, argumentsOfScenario);
#line 66
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 67
 testRunner.Given(@"Run Clients '10.119.153.152' And Run Version 'NewShellNewPlugin=NewShellNewPlugin' Run Cat 'cat=keyboardbacklight3OptionsonIdeapad || cat=BatterySettingsTopPositionIdea || cat=TestSealedWarrnty || cat=SealedBatteryToast ||cat=ConservationModeCheckButteryCharged || cat=ConservationModeSupportSomeIdea ||cat=ConservationModeCheckConservationIcon ||cat=ConservationModeCutWindwo || cat=CheckNoRemoveECM'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Settings Local Run 13 Glient Zeus-SIT")]
        [NUnit.Framework.CategoryAttribute("SettingsNewOsNSOWMultiple")]
        public virtual void RunSettingsLocalRun13GlientZeus_SIT()
        {
            string[] tagsOfScenario = new string[] {
                    "SettingsNewOsNSOWMultiple"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Settings Local Run 13 Glient Zeus-SIT", null, tagsOfScenario, argumentsOfScenario);
#line 71
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 72
 testRunner.Given(@"Run Clients '10.119.156.112' And Run Version 'NewShellNewPlugin=NewShellNewPlugin' Run Cat 'cat=HPDHardwareSettings || cat=BatterySettingsTopPositionThink || cat=NOSToolbarCPUMemorySleepHibernate || cat=SmartBattery2.0NotSupport || cat=MicrophoneKeystroke || cat=CheckHiddenKeyboardFunctions'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Settings Local Run 14 Glient ECM")]
        [NUnit.Framework.CategoryAttribute("SettingsNewOsNSOWMultiple")]
        public virtual void RunSettingsLocalRun14GlientECM()
        {
            string[] tagsOfScenario = new string[] {
                    "SettingsNewOsNSOWMultiple"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Settings Local Run 14 Glient ECM", null, tagsOfScenario, argumentsOfScenario);
#line 76
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 77
 testRunner.Given("Run Clients \'10.119.149.196\' And Run Version \'NewShellNewPlugin=NewShellNewPlugin" +
                        "\' Run Cat \'cat=DaytimeAndECM || cat=DaytimeAndECM-Hibernate || cat=TestSealedWar" +
                        "rntyDesktop || cat=HSToolbarThinkPad\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Settings Local Run 16 Client Settings Search Gaming Legion Y740S-15IMH")]
        [NUnit.Framework.CategoryAttribute("SettingsNewOsNSOWMultiple")]
        public virtual void RunSettingsLocalRun16ClientSettingsSearchGamingLegionY740S_15IMH()
        {
            string[] tagsOfScenario = new string[] {
                    "SettingsNewOsNSOWMultiple"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Settings Local Run 16 Client Settings Search Gaming Legion Y740S-15IMH", null, tagsOfScenario, argumentsOfScenario);
#line 81
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 82
 testRunner.Given("Run Clients \'10.119.177.130\' And Run Version \'NewShellNewPlugin=NewShellNewPlugin" +
                        "\' Run Cat \'cat=SettingsSearchPowerPageGamingself \'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Settings Local Run 17 Client S560-16ITS")]
        [NUnit.Framework.CategoryAttribute("SettingsNewOsNSOWMultiple")]
        public virtual void RunSettingsLocalRun17ClientS560_16ITS()
        {
            string[] tagsOfScenario = new string[] {
                    "SettingsNewOsNSOWMultiple"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Settings Local Run 17 Client S560-16ITS", null, tagsOfScenario, argumentsOfScenario);
#line 86
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 87
 testRunner.Given("Run Clients \'10.119.165.117\' And Run Version \'NewShellNewPlugin=NewShellNewPlugin" +
                        "\' Run Cat \'cat=SmartBattery2.0Manual \'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Settings Local Run 18 Client SmartBattery")]
        [NUnit.Framework.CategoryAttribute("SettingsNewOsNSOWMultiple")]
        public virtual void RunSettingsLocalRun18ClientSmartBattery()
        {
            string[] tagsOfScenario = new string[] {
                    "SettingsNewOsNSOWMultiple"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Settings Local Run 18 Client SmartBattery", null, tagsOfScenario, argumentsOfScenario);
#line 91
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 92
 testRunner.Given("Run Clients \'10.119.175.44\' And Run Version \'NewShellNewPlugin=NewShellNewPlugin\'" +
                        " Run Cat \'cat=SmartBattery2.0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Settings Local Run 19 Client ConservationMode Blacklist")]
        [NUnit.Framework.CategoryAttribute("SettingsNewOsNSOWMultiple")]
        public virtual void RunSettingsLocalRun19ClientConservationModeBlacklist()
        {
            string[] tagsOfScenario = new string[] {
                    "SettingsNewOsNSOWMultiple"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Settings Local Run 19 Client ConservationMode Blacklist", null, tagsOfScenario, argumentsOfScenario);
#line 96
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 97
 testRunner.Given("Run Clients \'10.119.163.59\' And Run Version \'NewShellNewPlugin=NewShellNewPlugin\'" +
                        " Run Cat \'cat=ConservationModeBlacklist || cat=KeyboardCS20IdeaPad || cat=CheckI" +
                        "deaPadAlwaysOnUSBNoCheckbox\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run Settings Local Run 20 Client ThinkPad X1 Carbon 6th")]
        [NUnit.Framework.CategoryAttribute("SettingsNewOsNSOWMultiple")]
        public virtual void RunSettingsLocalRun20ClientThinkPadX1Carbon6Th()
        {
            string[] tagsOfScenario = new string[] {
                    "SettingsNewOsNSOWMultiple"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run Settings Local Run 20 Client ThinkPad X1 Carbon 6th", null, tagsOfScenario, argumentsOfScenario);
#line 101
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 102
 testRunner.Given(@"Run Clients '10.119.140.28' And Run Version 'NewShellNewPlugin=NewShellNewPlugin' Run Cat 'cat=BatterySettingsTopPositionNoBatteryThink || cat= CheckBatteryConditionOnThinkPadNoBattery || cat=MicrophoneOptimizationMode || cat=MicrophoneSliderBar || cat=MicrophoneToggle || cat=MicrophoneAEC || cat=NoIntelligentScreenOnThink || cat=HSAMicrophoneAudio '", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
