// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.4.0.0
//      SpecFlow Generator Version:3.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace LenovoVantageTest.Features.UWP.Vantage_NerveCenter
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("VAN19762_Part1_ThermalModeCommon")]
    public partial class VAN19762_Part1_ThermalModeCommonFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "VAN19762_Part1_ThermalModeCommon.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/UWP/Vantage_NerveCenter", "VAN19762_Part1_ThermalModeCommon", "\tTest Case：https://lnvusjira.lenovonet.lenovo.local/browse/VAN-19762\r\n\tAuthor： Pe" +
                    "ngjie Chen", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
#line 6
 testRunner.Given("Machine is Gaming", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
 testRunner.Given("The Machine is X Series \'X50,X60\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.Given("The Machine support Specific function \'ThermalModeNew\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
 testRunner.When("Install \'GPU\' Driver", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN19762_TestStep01_Check Thermal Mode is existing in LEGION EDGE")]
        [NUnit.Framework.CategoryAttribute("GamingThermalModeX50")]
        [NUnit.Framework.CategoryAttribute("GamingSmokeThermalMode3")]
        [NUnit.Framework.CategoryAttribute("GamingSmokeThermalMode4")]
        public virtual void VAN19762_TestStep01_CheckThermalModeIsExistingInLEGIONEDGE()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingThermalModeX50",
                    "GamingSmokeThermalMode3",
                    "GamingSmokeThermalMode4"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN19762_TestStep01_Check Thermal Mode is existing in LEGION EDGE", null, tagsOfScenario, argumentsOfScenario);
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 13
 testRunner.Then("The Thermal Mode is shown in Legion Edge", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN19762_TestStep02_Check Thermal Mode is the first from the top in LEGION EDGE")]
        [NUnit.Framework.CategoryAttribute("GamingThermalModeX50")]
        public virtual void VAN19762_TestStep02_CheckThermalModeIsTheFirstFromTheTopInLEGIONEDGE()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingThermalModeX50"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN19762_TestStep02_Check Thermal Mode is the first from the top in LEGION EDGE", null, tagsOfScenario, argumentsOfScenario);
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 17
 testRunner.Then("The LEGION EDGE Section priority is displayed correctly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN19762_TestStep03_Check Thermal Mode default mode is Balance")]
        [NUnit.Framework.CategoryAttribute("GamingThermalModeX50NB")]
        public virtual void VAN19762_TestStep03_CheckThermalModeDefaultModeIsBalance()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingThermalModeX50NB"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN19762_TestStep03_Check Thermal Mode default mode is Balance", null, tagsOfScenario, argumentsOfScenario);
#line 20
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 21
 testRunner.Given("The Machine Type is DT or NB \'NB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 22
 testRunner.Then("The Gaming mode value is 2 And the Method is GetSmartFanMode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table179 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "status",
                            "ispopwindows"});
                table179.AddRow(new string[] {
                            "balance",
                            "shown",
                            "no"});
#line 23
 testRunner.Then("The specific mode checked or unchecked or shown or hidden for gaming new thermal " +
                        "mode", ((string)(null)), table179, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN19762_TestStep04_Check Thermal Mode default mode is Balance icon")]
        [NUnit.Framework.CategoryAttribute("GamingThermalModeX50NB")]
        public virtual void VAN19762_TestStep04_CheckThermalModeDefaultModeIsBalanceIcon()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingThermalModeX50NB"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN19762_TestStep04_Check Thermal Mode default mode is Balance icon", null, tagsOfScenario, argumentsOfScenario);
#line 28
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 29
 testRunner.Given("The Machine Type is DT or NB \'NB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 30
 testRunner.Then("The Gaming mode value is 2 And the Method is GetSmartFanMode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 31
 testRunner.Then("Take Screen Shot Thermal_Mode_UI_default_balance_icon_TestStep04  in 19762 under " +
                        "ThermalModeCommon", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN19762_TestStep05_Check Thermal Mode default mode is Performance")]
        [NUnit.Framework.CategoryAttribute("GamingThermalModeX50DT")]
        public virtual void VAN19762_TestStep05_CheckThermalModeDefaultModeIsPerformance()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingThermalModeX50DT"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN19762_TestStep05_Check Thermal Mode default mode is Performance", null, tagsOfScenario, argumentsOfScenario);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 35
 testRunner.Given("The Machine Type is DT or NB \'DT\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 36
 testRunner.Then("The Gaming mode value is 3 And the Method is GetSmartFanMode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table180 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "status",
                            "ispopwindows"});
                table180.AddRow(new string[] {
                            "performance",
                            "shown",
                            "no"});
#line 37
 testRunner.Then("The specific mode checked or unchecked or shown or hidden for gaming new thermal " +
                        "mode", ((string)(null)), table180, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN19762_TestStep06_Check Thermal Mode default mode is Performance icon")]
        [NUnit.Framework.CategoryAttribute("GamingThermalModeX50DT")]
        public virtual void VAN19762_TestStep06_CheckThermalModeDefaultModeIsPerformanceIcon()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingThermalModeX50DT"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN19762_TestStep06_Check Thermal Mode default mode is Performance icon", null, tagsOfScenario, argumentsOfScenario);
#line 42
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 43
 testRunner.Given("The Machine Type is DT or NB \'DT\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 44
 testRunner.Then("The Gaming mode value is 3 And the Method is GetSmartFanMode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 45
 testRunner.Then("Take Screen Shot Thermal_Mode_UI_default_performance_icon_TestStep06  in 19762 un" +
                        "der ThermalModeCommon", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN19762_TestStep07_Check Thermal Mode clickable")]
        [NUnit.Framework.CategoryAttribute("GamingThermalModeX50")]
        public virtual void VAN19762_TestStep07_CheckThermalModeClickable()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingThermalModeX50"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN19762_TestStep07_Check Thermal Mode clickable", null, tagsOfScenario, argumentsOfScenario);
#line 48
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 49
 testRunner.Then("The Thermal Mode Setting popup is shown or hidden \'hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 51
 testRunner.When("user click new thermal mode button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 52
 testRunner.Then("The Thermal Mode Setting popup is shown or hidden \'shown\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 53
 testRunner.Given("Show Warn Info \'please check the mouse is a hand type for VAN19762_TestStep07\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN19762_TestStep08_Check Thermal Mode Setting popup will be opened")]
        [NUnit.Framework.CategoryAttribute("GamingThermalModeX50")]
        public virtual void VAN19762_TestStep08_CheckThermalModeSettingPopupWillBeOpened()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingThermalModeX50"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN19762_TestStep08_Check Thermal Mode Setting popup will be opened", null, tagsOfScenario, argumentsOfScenario);
#line 56
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 58
 testRunner.When("user click new thermal mode button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 59
 testRunner.Then("The Thermal Mode Setting popup is shown or hidden \'shown\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN19762_TestStep09_Check The Thermal Mode Setting popup is consistent with UI sp" +
            "ec")]
        [NUnit.Framework.CategoryAttribute("GamingThermalModeX50")]
        public virtual void VAN19762_TestStep09_CheckTheThermalModeSettingPopupIsConsistentWithUISpec()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingThermalModeX50"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN19762_TestStep09_Check The Thermal Mode Setting popup is consistent with UI sp" +
                    "ec", null, tagsOfScenario, argumentsOfScenario);
#line 62
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 64
 testRunner.When("user click new thermal mode button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 65
 testRunner.Then("The Thermal Mode Setting popup is shown or hidden \'shown\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 66
 testRunner.Then("Take Screen Shot Thermal_Mode_Settings_UI_TestStep09  in 19762 under ThermalModeC" +
                        "ommon", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN19762_TestStep10_Check The Thermal Mode Setting popup is consistent with UI sp" +
            "ec")]
        [NUnit.Framework.CategoryAttribute("GamingThermalModeX50")]
        [NUnit.Framework.CategoryAttribute("GamingSmokeThermalMode3")]
        public virtual void VAN19762_TestStep10_CheckTheThermalModeSettingPopupIsConsistentWithUISpec()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingThermalModeX50",
                    "GamingSmokeThermalMode3"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN19762_TestStep10_Check The Thermal Mode Setting popup is consistent with UI sp" +
                    "ec", null, tagsOfScenario, argumentsOfScenario);
#line 69
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 71
 testRunner.When("user click new thermal mode button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 72
 testRunner.Then("The Thermal Mode Setting popup is shown or hidden \'shown\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table181 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "desc"});
                table181.AddRow(new string[] {
                            "popupTitle",
                            "Thermal Mode Setting"});
                table181.AddRow(new string[] {
                            "popupDescCommon",
                            "Choose the mode you want to use."});
                table181.AddRow(new string[] {
                            "popupDescFNQ",
                            "You can switch mode using shortcut Fn+Q."});
                table181.AddRow(new string[] {
                            "performanceTitle",
                            "Performance Mode"});
                table181.AddRow(new string[] {
                            "performanceDescNB",
                            "Boost your computer performance with higher fan speed and power consumption. You " +
                                "can choose to turn on the Overclocking function. Performance Mode is applicable " +
                                "only when ac power adaptor is plugged in."});
                table181.AddRow(new string[] {
                            "performanceDescDT",
                            "Boost your computer performance with higher fan speed and power consumption. You " +
                                "can choose to turn on the Overclocking function."});
                table181.AddRow(new string[] {
                            "enableOCDesc",
                            "Enable CPU/GPU Overclocking in Performance Mode. ADVANCED"});
                table181.AddRow(new string[] {
                            "onlyGPUOCDesc",
                            "Enable GPU Overclocking in Performance Mode. ADVANCED"});
                table181.AddRow(new string[] {
                            "balanceTitle",
                            "Balance Mode"});
                table181.AddRow(new string[] {
                            "balanceDesc",
                            "Automatically adjust the performance and fan speed according to the system requir" +
                                "ement."});
                table181.AddRow(new string[] {
                            "quietTitle",
                            "Quiet Mode"});
                table181.AddRow(new string[] {
                            "quietDesc",
                            "Keep quiet by reducing your computer performance and fan speed where possible wit" +
                                "h low power consumption."});
                table181.AddRow(new string[] {
                            "autoswitchDesc",
                            "Automatically switch to Performance Mode when launching games and switch back aft" +
                                "er exiting the game."});
#line 73
 testRunner.Then("Thermal Mode Setting All the descriptions are consistent with the gaming designed" +
                        " descriptions", ((string)(null)), table181, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN19762_TestStep11_New_Check The Thermal Mode Setting popup is consistent with U" +
            "I spec")]
        [NUnit.Framework.CategoryAttribute("GamingThermalModeX60New")]
        public virtual void VAN19762_TestStep11_New_CheckTheThermalModeSettingPopupIsConsistentWithUISpec()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingThermalModeX60New"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN19762_TestStep11_New_Check The Thermal Mode Setting popup is consistent with U" +
                    "I spec", null, tagsOfScenario, argumentsOfScenario);
#line 90
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 92
 testRunner.When("user click new thermal mode button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 93
 testRunner.Then("The Thermal Mode Setting popup is shown or hidden \'shown\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 94
 testRunner.Then("Take Screen Shot Thermal_Mode_Settings_UI_TestStep11New  in 19762 under ThermalMo" +
                        "deCommon", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN19762_TestStep12_New_Check The Thermal Mode Setting popup is consistent with U" +
            "I spec")]
        [NUnit.Framework.CategoryAttribute("GamingThermalModeX60New")]
        [NUnit.Framework.CategoryAttribute("GamingSmokeThermalMode4")]
        public virtual void VAN19762_TestStep12_New_CheckTheThermalModeSettingPopupIsConsistentWithUISpec()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingThermalModeX60New",
                    "GamingSmokeThermalMode4"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN19762_TestStep12_New_Check The Thermal Mode Setting popup is consistent with U" +
                    "I spec", null, tagsOfScenario, argumentsOfScenario);
#line 97
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 99
 testRunner.When("user click new thermal mode button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 100
 testRunner.Then("The Thermal Mode Setting popup is shown or hidden \'shown\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table182 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "desc"});
                table182.AddRow(new string[] {
                            "popupTitle",
                            "Thermal Mode Setting"});
                table182.AddRow(new string[] {
                            "popupDescCommon",
                            "Choose the mode you want to use."});
                table182.AddRow(new string[] {
                            "popupDescFNQ",
                            "You can switch mode using shortcut Fn+Q."});
                table182.AddRow(new string[] {
                            "performanceTitle",
                            "Performance Mode"});
                table182.AddRow(new string[] {
                            "performanceDescNB",
                            "Boost your computer performance with higher fan speed and power consumption. Perf" +
                                "ormance Mode is applicable only when ac power adaptor is plugged in."});
                table182.AddRow(new string[] {
                            "balanceTitle",
                            "Balance Mode"});
                table182.AddRow(new string[] {
                            "balanceDesc",
                            "Automatically adjust the performance and fan speed according to the system requir" +
                                "ement."});
                table182.AddRow(new string[] {
                            "autoadjustDesc",
                            "Automatically detect the current game and tune CPU/GPU performance. When enabled," +
                                " the temperature on your computer and fan noise might increase."});
                table182.AddRow(new string[] {
                            "quietTitle",
                            "Quiet Mode"});
                table182.AddRow(new string[] {
                            "quietDesc",
                            "Keep quiet by reducing your computer performance and fan speed where possible wit" +
                                "h low power consumption."});
#line 101
 testRunner.Then("Thermal Mode Setting All the descriptions are consistent with the gaming designed" +
                        " descriptions", ((string)(null)), table182, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN19762_TestStep11_Check The Thermal Mode Setting popup will show three modes")]
        [NUnit.Framework.CategoryAttribute("GamingThermalModeX50ThreeMode")]
        public virtual void VAN19762_TestStep11_CheckTheThermalModeSettingPopupWillShowThreeModes()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingThermalModeX50ThreeMode"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN19762_TestStep11_Check The Thermal Mode Setting popup will show three modes", null, tagsOfScenario, argumentsOfScenario);
#line 115
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 116
 testRunner.When("user click new thermal mode button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 117
 testRunner.Then("The Thermal Mode Setting popup is shown or hidden \'shown\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table183 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "desc"});
                table183.AddRow(new string[] {
                            "performance",
                            "Performance Mode"});
                table183.AddRow(new string[] {
                            "balance",
                            "Balance Mode"});
                table183.AddRow(new string[] {
                            "quiet",
                            "Quiet Mode"});
#line 118
 testRunner.Then("It Will show some modes in Thermal Mode Setting popup", ((string)(null)), table183, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN19762_TestStep12_Check The Thermal Mode Setting popup will show two modes")]
        [NUnit.Framework.CategoryAttribute("GamingThermalModeX50TwoMode")]
        [NUnit.Framework.CategoryAttribute("GamingSmokeThermalMode3TwoMode")]
        public virtual void VAN19762_TestStep12_CheckTheThermalModeSettingPopupWillShowTwoModes()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingThermalModeX50TwoMode",
                    "GamingSmokeThermalMode3TwoMode"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN19762_TestStep12_Check The Thermal Mode Setting popup will show two modes", null, tagsOfScenario, argumentsOfScenario);
#line 125
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 126
 testRunner.Given("The Machine support Specific function \'ThermalModeOnlyTwoMode\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 127
 testRunner.When("user click new thermal mode button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 128
 testRunner.Then("The Thermal Mode Setting popup is shown or hidden \'shown\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table184 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "desc"});
                table184.AddRow(new string[] {
                            "performance",
                            "Performance Mode"});
                table184.AddRow(new string[] {
                            "balance",
                            "Balance Mode"});
#line 129
 testRunner.Then("It Will show some modes in Thermal Mode Setting popup", ((string)(null)), table184, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN19762_TestStep13_Check Thermal Mode default mode is Balance in Thermal Mode Se" +
            "tting popup")]
        [NUnit.Framework.CategoryAttribute("GamingThermalModeX50NB")]
        public virtual void VAN19762_TestStep13_CheckThermalModeDefaultModeIsBalanceInThermalModeSettingPopup()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingThermalModeX50NB"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN19762_TestStep13_Check Thermal Mode default mode is Balance in Thermal Mode Se" +
                    "tting popup", null, tagsOfScenario, argumentsOfScenario);
#line 135
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 136
 testRunner.Given("The Machine Type is DT or NB \'NB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 137
 testRunner.When("user click new thermal mode button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 138
 testRunner.Then("The Thermal Mode Setting popup is shown or hidden \'shown\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 139
 testRunner.Then("The Gaming mode value is 2 And the Method is GetSmartFanMode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table185 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "status",
                            "ispopwindows"});
                table185.AddRow(new string[] {
                            "balance",
                            "checked",
                            "yes"});
#line 140
 testRunner.Then("The specific mode checked or unchecked or shown or hidden for gaming new thermal " +
                        "mode", ((string)(null)), table185, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
