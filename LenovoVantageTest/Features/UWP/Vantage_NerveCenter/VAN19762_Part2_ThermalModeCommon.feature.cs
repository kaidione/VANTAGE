// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.4.0.0
//      SpecFlow Generator Version:3.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace LenovoVantageTest.Features.UWP.Vantage_NerveCenter
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("VAN19762_Part2_ThermalModeCommon")]
    public partial class VAN19762_Part2_ThermalModeCommonFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "VAN19762_Part2_ThermalModeCommon.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/UWP/Vantage_NerveCenter", "VAN19762_Part2_ThermalModeCommon", "\tTest Case：https://lnvusjira.lenovonet.lenovo.local/browse/VAN-19762\r\n\tAuthor： Pe" +
                    "ngjie Chen", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
#line 6
 testRunner.Given("Machine is Gaming", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
 testRunner.Given("The Machine is X Series \'X50,X60\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.Given("The Machine support Specific function \'ThermalModeNew\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
 testRunner.When("Install \'GPU\' Driver", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN19762_TestStep14_Check Thermal Mode default mode is Performance in Thermal Mod" +
            "e Setting popup")]
        [NUnit.Framework.CategoryAttribute("GamingThermalModeX50DT")]
        public virtual void VAN19762_TestStep14_CheckThermalModeDefaultModeIsPerformanceInThermalModeSettingPopup()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingThermalModeX50DT"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN19762_TestStep14_Check Thermal Mode default mode is Performance in Thermal Mod" +
                    "e Setting popup", null, tagsOfScenario, argumentsOfScenario);
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 13
 testRunner.Given("The Machine Type is DT or NB \'DT\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 14
 testRunner.When("user click new thermal mode button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 15
 testRunner.Then("The Thermal Mode Setting popup is shown or hidden \'shown\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 16
 testRunner.Then("The Gaming mode value is 3 And the Method is GetSmartFanMode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table186 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "status",
                            "ispopwindows"});
                table186.AddRow(new string[] {
                            "performance",
                            "checked",
                            "yes"});
#line 17
 testRunner.Then("The specific mode checked or unchecked or shown or hidden for gaming new thermal " +
                        "mode", ((string)(null)), table186, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN19762_TestStep15_Check Thermal Mode Setting popup still show when click other " +
            "plance")]
        [NUnit.Framework.CategoryAttribute("GamingThermalModeX50")]
        public virtual void VAN19762_TestStep15_CheckThermalModeSettingPopupStillShowWhenClickOtherPlance()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingThermalModeX50"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN19762_TestStep15_Check Thermal Mode Setting popup still show when click other " +
                    "plance", null, tagsOfScenario, argumentsOfScenario);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 23
 testRunner.When("user click new thermal mode button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 24
 testRunner.Then("The Thermal Mode Setting popup is shown or hidden \'shown\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 25
 testRunner.When("user click Thermal Mode Setting popup other place", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 26
 testRunner.Then("The Thermal Mode Setting popup is shown or hidden \'shown\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN19762_TestStep16_Check Enable OverClocking checkbox should be displayed and th" +
            "e description strings should be consistent with design")]
        [NUnit.Framework.CategoryAttribute("GamingThermalModeX50CPUGPUOC")]
        [NUnit.Framework.CategoryAttribute("GamingSmokeThermalMode3CPUGPUOC")]
        public virtual void VAN19762_TestStep16_CheckEnableOverClockingCheckboxShouldBeDisplayedAndTheDescriptionStringsShouldBeConsistentWithDesign()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingThermalModeX50CPUGPUOC",
                    "GamingSmokeThermalMode3CPUGPUOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN19762_TestStep16_Check Enable OverClocking checkbox should be displayed and th" +
                    "e description strings should be consistent with design", null, tagsOfScenario, argumentsOfScenario);
#line 29
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 30
 testRunner.Given("The Machine support Specific function \'CPUGPUOverclockNew\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 31
 testRunner.When("user click new thermal mode button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 32
 testRunner.Then("The Thermal Mode Setting popup is shown or hidden \'shown\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table187 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "desc"});
                table187.AddRow(new string[] {
                            "enableOCDesc",
                            "Enable CPU/GPU Overclocking in Performance Mode. ADVANCED"});
                table187.AddRow(new string[] {
                            "onlyGPUOCDesc",
                            "Enable GPU Overclocking in Performance Mode. ADVANCED"});
#line 33
 testRunner.Then("Thermal Mode Setting All the descriptions are consistent with the gaming designed" +
                        " descriptions", ((string)(null)), table187, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN19762_TestStep17_Check Enable OverClocking checkbox should be displayed and th" +
            "e description strings should be consistent with design")]
        [NUnit.Framework.CategoryAttribute("GamingThermalModeX50GPUOC")]
        [NUnit.Framework.CategoryAttribute("GamingSmokeThermalMode3GPUOC")]
        public virtual void VAN19762_TestStep17_CheckEnableOverClockingCheckboxShouldBeDisplayedAndTheDescriptionStringsShouldBeConsistentWithDesign()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingThermalModeX50GPUOC",
                    "GamingSmokeThermalMode3GPUOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN19762_TestStep17_Check Enable OverClocking checkbox should be displayed and th" +
                    "e description strings should be consistent with design", null, tagsOfScenario, argumentsOfScenario);
#line 39
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 40
 testRunner.Given("The Machine support Specific function \'GPUOverclockNew\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 41
 testRunner.When("user click new thermal mode button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 42
 testRunner.Then("The Thermal Mode Setting popup is shown or hidden \'shown\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table188 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "desc"});
                table188.AddRow(new string[] {
                            "enableOCDesc",
                            "Enable CPU/GPU Overclocking in Performance Mode. ADVANCED"});
                table188.AddRow(new string[] {
                            "onlyGPUOCDesc",
                            "Enable GPU Overclocking in Performance Mode. ADVANCED"});
#line 43
 testRunner.Then("Thermal Mode Setting All the descriptions are consistent with the gaming designed" +
                        " descriptions", ((string)(null)), table188, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN19762_TestStep18_Check Enable OverClocking checkbox and description should not" +
            " be displayed")]
        [NUnit.Framework.CategoryAttribute("GamingThermalModeX50NOOC")]
        public virtual void VAN19762_TestStep18_CheckEnableOverClockingCheckboxAndDescriptionShouldNotBeDisplayed()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingThermalModeX50NOOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN19762_TestStep18_Check Enable OverClocking checkbox and description should not" +
                    " be displayed", null, tagsOfScenario, argumentsOfScenario);
#line 49
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 50
 testRunner.Given("The Machine support Specific function \'NotSupportOverclock\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 51
 testRunner.When("user click new thermal mode button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 52
 testRunner.Then("The Thermal Mode Setting popup is shown or hidden \'shown\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table189 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "desc"});
                table189.AddRow(new string[] {
                            "enableOCDesc",
                            "Enable CPU/GPU Overclocking in Performance Mode. ADVANCED"});
                table189.AddRow(new string[] {
                            "onlyGPUOCDesc",
                            "Enable GPU Overclocking in Performance Mode. ADVANCED"});
#line 53
 testRunner.Then("Thermal Mode Setting All the descriptions are consistent with the gaming designed" +
                        " descriptions", ((string)(null)), table189, "Then ");
#line hidden
#line 57
 testRunner.Then("The Enable OverClocking checked or unchecked or shown or hidden for gaming new th" +
                        "ermal mode \'hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN19762_TestStep19_Check Enable OverClocking checkbox is unchecked")]
        [NUnit.Framework.CategoryAttribute("GamingThermalModeX50OC")]
        [NUnit.Framework.CategoryAttribute("GamingSmokeThermalMode3OCCheckbox")]
        public virtual void VAN19762_TestStep19_CheckEnableOverClockingCheckboxIsUnchecked()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingThermalModeX50OC",
                    "GamingSmokeThermalMode3OCCheckbox"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN19762_TestStep19_Check Enable OverClocking checkbox is unchecked", null, tagsOfScenario, argumentsOfScenario);
#line 60
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 61
 testRunner.When("user click new thermal mode button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 62
 testRunner.Then("The Thermal Mode Setting popup is shown or hidden \'shown\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 63
 testRunner.Then("The Enable OverClocking checked or unchecked or shown or hidden for gaming new th" +
                        "ermal mode \'unchecked\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN19762_TestStep20_Check The ADVANCED link button is at the right of Enable Over" +
            "Clocking description in Performance Mode")]
        [NUnit.Framework.CategoryAttribute("GamingThermalModeX50OC")]
        public virtual void VAN19762_TestStep20_CheckTheADVANCEDLinkButtonIsAtTheRightOfEnableOverClockingDescriptionInPerformanceMode()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingThermalModeX50OC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN19762_TestStep20_Check The ADVANCED link button is at the right of Enable Over" +
                    "Clocking description in Performance Mode", null, tagsOfScenario, argumentsOfScenario);
#line 66
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 67
 testRunner.When("user click new thermal mode button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 68
 testRunner.Then("The Thermal Mode Setting popup is shown or hidden \'shown\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 69
 testRunner.Then("The ADVANCED link button is at the right of Enable OverClocking description", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN19762_TestStep21_Check The ADVANCED link button should not displayed in Perfor" +
            "mance Mode")]
        [NUnit.Framework.CategoryAttribute("GamingThermalModeX50NOOC")]
        [NUnit.Framework.CategoryAttribute("GamingSmokeThermalMode3NOOC")]
        public virtual void VAN19762_TestStep21_CheckTheADVANCEDLinkButtonShouldNotDisplayedInPerformanceMode()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingThermalModeX50NOOC",
                    "GamingSmokeThermalMode3NOOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN19762_TestStep21_Check The ADVANCED link button should not displayed in Perfor" +
                    "mance Mode", null, tagsOfScenario, argumentsOfScenario);
#line 72
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 73
 testRunner.Given("The Machine support Specific function \'NotSupportOverclock\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 74
 testRunner.When("user click new thermal mode button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 75
 testRunner.Then("The Thermal Mode Setting popup is shown or hidden \'shown\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 76
 testRunner.Then("The ADVANCED link button should shown or hidden in Performance Mode \'hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN19762_TestStep21_New_Check default status of Auto switch toggle should be OFF")]
        [NUnit.Framework.CategoryAttribute("GamingThermalModeX60New")]
        [NUnit.Framework.CategoryAttribute("GamingSmokeThermalMode4AutoAdjust")]
        public virtual void VAN19762_TestStep21_New_CheckDefaultStatusOfAutoSwitchToggleShouldBeOFF()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingThermalModeX60New",
                    "GamingSmokeThermalMode4AutoAdjust"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN19762_TestStep21_New_Check default status of Auto switch toggle should be OFF", null, tagsOfScenario, argumentsOfScenario);
#line 79
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 80
 testRunner.When("user click new thermal mode button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 81
 testRunner.Then("The Thermal Mode Setting popup is shown or hidden \'shown\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 82
 testRunner.Then("The status of Auto Adjust Checkbox is ON or OFF \'OFF\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN19762_TestStep22_New_Check Auto Adjust Checkbox and description")]
        [NUnit.Framework.CategoryAttribute("GamingThermalModeX60New")]
        [NUnit.Framework.CategoryAttribute("GamingSmokeThermalMode4AutoAdjust")]
        public virtual void VAN19762_TestStep22_New_CheckAutoAdjustCheckboxAndDescription()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingThermalModeX60New",
                    "GamingSmokeThermalMode4AutoAdjust"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN19762_TestStep22_New_Check Auto Adjust Checkbox and description", null, tagsOfScenario, argumentsOfScenario);
#line 85
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 86
 testRunner.When("user click new thermal mode button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 87
 testRunner.Then("The Thermal Mode Setting popup is shown or hidden \'shown\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table190 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "desc"});
                table190.AddRow(new string[] {
                            "autoadjustDesc",
                            "Automatically detect the current game and tune CPU/GPU performance. When enabled," +
                                " the temperature on your computer and fan noise might increase."});
#line 88
 testRunner.Then("Thermal Mode Setting All the descriptions are consistent with the gaming designed" +
                        " descriptions", ((string)(null)), table190, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN19762_TestStep23_Check default status of Auto switch toggle should be OFF")]
        [NUnit.Framework.CategoryAttribute("GamingThermalModeX50")]
        [NUnit.Framework.CategoryAttribute("GamingSmokeThermalMode3AutoSwitch")]
        public virtual void VAN19762_TestStep23_CheckDefaultStatusOfAutoSwitchToggleShouldBeOFF()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingThermalModeX50",
                    "GamingSmokeThermalMode3AutoSwitch"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN19762_TestStep23_Check default status of Auto switch toggle should be OFF", null, tagsOfScenario, argumentsOfScenario);
#line 93
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 94
 testRunner.When("user click new thermal mode button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 95
 testRunner.Then("The Thermal Mode Setting popup is shown or hidden \'shown\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 96
 testRunner.Then("The status of Auto switch toggle is ON or OFF \'OFF\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN19762_TestStep24_Check Auto Switch Toggle and description")]
        [NUnit.Framework.CategoryAttribute("GamingThermalModeX50")]
        [NUnit.Framework.CategoryAttribute("GamingSmokeThermalMode3AutoSwitch")]
        public virtual void VAN19762_TestStep24_CheckAutoSwitchToggleAndDescription()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingThermalModeX50",
                    "GamingSmokeThermalMode3AutoSwitch"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN19762_TestStep24_Check Auto Switch Toggle and description", null, tagsOfScenario, argumentsOfScenario);
#line 99
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 100
 testRunner.When("user click new thermal mode button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 101
 testRunner.Then("The Thermal Mode Setting popup is shown or hidden \'shown\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table191 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "desc"});
                table191.AddRow(new string[] {
                            "autoswitchDesc",
                            "Automatically switch to Performance Mode when launching games and switch back aft" +
                                "er exiting the game."});
#line 102
 testRunner.Then("Thermal Mode Setting All the descriptions are consistent with the gaming designed" +
                        " descriptions", ((string)(null)), table191, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN19762_TestStep26_Check Thermal Mode Setting popup is closed")]
        [NUnit.Framework.CategoryAttribute("GamingThermalModeX50")]
        public virtual void VAN19762_TestStep26_CheckThermalModeSettingPopupIsClosed()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingThermalModeX50"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN19762_TestStep26_Check Thermal Mode Setting popup is closed", null, tagsOfScenario, argumentsOfScenario);
#line 107
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 108
 testRunner.When("user click new thermal mode button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 109
 testRunner.Then("The Thermal Mode Setting popup is shown or hidden \'shown\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 110
 testRunner.Given("Click X button in Thermal Mode Setting popup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 111
 testRunner.Then("The Thermal Mode Setting popup is shown or hidden \'hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
