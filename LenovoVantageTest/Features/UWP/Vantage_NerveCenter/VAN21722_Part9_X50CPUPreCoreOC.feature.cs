// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.4.0.0
//      SpecFlow Generator Version:3.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace LenovoVantageTest.Features.UWP.Vantage_NerveCenter
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("VAN21722_Part9_X50CPUPreCoreOC")]
    public partial class VAN21722_Part9_X50CPUPreCoreOCFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "VAN21722_Part9_X50CPUPreCoreOC.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/UWP/Vantage_NerveCenter", "VAN21722_Part9_X50CPUPreCoreOC", "\tTest Case：https://lnvusjira.lenovonet.lenovo.local/browse/VAN-19762\r\n\tAuthor： Pe" +
                    "ngjie Chen", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
#line 6
 testRunner.Given("Machine is Gaming", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
 testRunner.Given("The Machine is X Series \'X50\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.Given("The Machine Type is DT or NB \'DT\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
 testRunner.Given("The Machine support Specific function \'CPUGPUOverclockNew\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 10
 testRunner.Given("driver is installed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 11
 testRunner.Given("CPU name and contains the \'K/HK/KF\' characters", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 12
 testRunner.Given("click the Thermal mode area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 13
 testRunner.Given("click the Advance OC button in the Thermal mode settings page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 14
 testRunner.Given("click the proceed button in the Warning dialog", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep169_Check drag the 8 Core Ratio blocker on the slider bar to the" +
            " right and plus and minus icon clicable")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep169_CheckDragThe8CoreRatioBlockerOnTheSliderBarToTheRightAndPlusAndMinusIconClicable()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep169_Check drag the 8 Core Ratio blocker on the slider bar to the" +
                    " right and plus and minus icon clicable", null, tagsOfScenario, argumentsOfScenario);
#line 17
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 18
 testRunner.When("user hover specific title in the CPU Overclock area \'8 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 19
 testRunner.When("user drag the \'8 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "center\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
 testRunner.Then("The \'8 Core Ratio\' plus icon status \'clickable\'or minus icon status \'clickable\' i" +
                        "n the CPU Overclock area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep170_Check drag the 8 Core Ratio blocker on the slider bar to the" +
            " right and the other Core Ratio items values should not be changed")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep170_CheckDragThe8CoreRatioBlockerOnTheSliderBarToTheRightAndTheOtherCoreRatioItemsValuesShouldNotBeChanged()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep170_Check drag the 8 Core Ratio blocker on the slider bar to the" +
                    " right and the other Core Ratio items values should not be changed", null, tagsOfScenario, argumentsOfScenario);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 24
 testRunner.When("user hover specific title in the CPU Overclock area \'8 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 25
 testRunner.Given("Get slider bar value in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 26
 testRunner.When("user drag the \'8 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "3\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table228 = new TechTalk.SpecFlow.Table(new string[] {
                            "item",
                            "changestatus"});
                table228.AddRow(new string[] {
                            "1 Core Ratio",
                            "no"});
                table228.AddRow(new string[] {
                            "2 Core Ratio",
                            "no"});
                table228.AddRow(new string[] {
                            "3 Core Ratio",
                            "no"});
                table228.AddRow(new string[] {
                            "4 Core Ratio",
                            "no"});
                table228.AddRow(new string[] {
                            "5 Core Ratio",
                            "no"});
                table228.AddRow(new string[] {
                            "6 Core Ratio",
                            "no"});
                table228.AddRow(new string[] {
                            "7 Core Ratio",
                            "no"});
                table228.AddRow(new string[] {
                            "8 Core Ratio",
                            "yes"});
                table228.AddRow(new string[] {
                            "9 Core Ratio",
                            "no"});
                table228.AddRow(new string[] {
                            "10 Core Ratio",
                            "no"});
#line 27
 testRunner.Then("the items values should not be changed or changed", ((string)(null)), table228, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep171_Check click 8 Core Ratio minus icon and the value should be " +
            "less than before")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep171_CheckClick8CoreRatioMinusIconAndTheValueShouldBeLessThanBefore()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep171_Check click 8 Core Ratio minus icon and the value should be " +
                    "less than before", null, tagsOfScenario, argumentsOfScenario);
#line 41
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 42
 testRunner.When("user hover specific title in the CPU Overclock area \'8 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 43
 testRunner.Given("Get slider bar value in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 44
 testRunner.When("user click \'1\' times \'8 Core Ratio\' plus or minus \'-\' icon in the CPU Overclock a" +
                        "rea", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 45
 testRunner.Then("the value should be less or larger than before in the CPU Overclock area \'less\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep172_Check click 8 Core Ratio minus icon and the other Core Ratio" +
            " items values should not be changed")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep172_CheckClick8CoreRatioMinusIconAndTheOtherCoreRatioItemsValuesShouldNotBeChanged()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep172_Check click 8 Core Ratio minus icon and the other Core Ratio" +
                    " items values should not be changed", null, tagsOfScenario, argumentsOfScenario);
#line 48
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 49
 testRunner.When("user hover specific title in the CPU Overclock area \'8 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 50
 testRunner.Given("Get slider bar value in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 51
 testRunner.When("user click \'3\' times \'8 Core Ratio\' plus or minus \'-\' icon in the CPU Overclock a" +
                        "rea", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table229 = new TechTalk.SpecFlow.Table(new string[] {
                            "item",
                            "changestatus"});
                table229.AddRow(new string[] {
                            "1 Core Ratio",
                            "no"});
                table229.AddRow(new string[] {
                            "2 Core Ratio",
                            "no"});
                table229.AddRow(new string[] {
                            "3 Core Ratio",
                            "no"});
                table229.AddRow(new string[] {
                            "4 Core Ratio",
                            "no"});
                table229.AddRow(new string[] {
                            "5 Core Ratio",
                            "no"});
                table229.AddRow(new string[] {
                            "6 Core Ratio",
                            "no"});
                table229.AddRow(new string[] {
                            "7 Core Ratio",
                            "no"});
                table229.AddRow(new string[] {
                            "8 Core Ratio",
                            "yes"});
                table229.AddRow(new string[] {
                            "9 Core Ratio",
                            "no"});
                table229.AddRow(new string[] {
                            "10 Core Ratio",
                            "no"});
#line 52
 testRunner.Then("the items values should not be changed or changed", ((string)(null)), table229, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep173_Check drag the 8 Core Ratio blocker on the slider bar to the" +
            " left and 8 Core Ratio Slider Value is correct")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep173_CheckDragThe8CoreRatioBlockerOnTheSliderBarToTheLeftAnd8CoreRatioSliderValueIsCorrect()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep173_Check drag the 8 Core Ratio blocker on the slider bar to the" +
                    " left and 8 Core Ratio Slider Value is correct", null, tagsOfScenario, argumentsOfScenario);
#line 66
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 67
 testRunner.When("user hover specific title in the CPU Overclock area \'8 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 68
 testRunner.When("user drag the \'8 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "right\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 69
 testRunner.Then("Take Screen Shot 8_Core_Ratio_Slider_left_before_TestStep173  in 21722 under X50C" +
                        "PUPreCoreOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 70
 testRunner.When("user click \'3\' times \'8 Core Ratio\' plus or minus \'-\' icon in the CPU Overclock a" +
                        "rea", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 71
 testRunner.Then("Take Screen Shot 8_Core_Ratio_Slider_left_after_TestStep173   in 21722 under X50C" +
                        "PUPreCoreOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 72
 testRunner.Then("the value should be less or larger than before in the CPU Overclock area \'less\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 73
 testRunner.Then("The \'8 Core Ratio\' value in the CPU Overclock area should be same and consistent " +
                        "with Spec definition \'49\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep174_Check click 8 Core Ratio plus icon and the value should be l" +
            "arger than before")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep174_CheckClick8CoreRatioPlusIconAndTheValueShouldBeLargerThanBefore()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep174_Check click 8 Core Ratio plus icon and the value should be l" +
                    "arger than before", null, tagsOfScenario, argumentsOfScenario);
#line 76
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 77
 testRunner.When("user hover specific title in the CPU Overclock area \'8 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 78
 testRunner.When("user click \'1\' times \'8 Core Ratio\' plus or minus \'+\' icon in the CPU Overclock a" +
                        "rea", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 79
 testRunner.Then("the value should be less or larger than before in the CPU Overclock area \'larger\'" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep175_Check click 8 Core Ratio plus icon and the other Core Ratio " +
            "items values should not be changed")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep175_CheckClick8CoreRatioPlusIconAndTheOtherCoreRatioItemsValuesShouldNotBeChanged()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep175_Check click 8 Core Ratio plus icon and the other Core Ratio " +
                    "items values should not be changed", null, tagsOfScenario, argumentsOfScenario);
#line 82
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 83
 testRunner.When("user hover specific title in the CPU Overclock area \'8 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 84
 testRunner.Given("Get slider bar value in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 85
 testRunner.When("user click \'2\' times \'8 Core Ratio\' plus or minus \'+\' icon in the CPU Overclock a" +
                        "rea", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table230 = new TechTalk.SpecFlow.Table(new string[] {
                            "item",
                            "changestatus"});
                table230.AddRow(new string[] {
                            "1 Core Ratio",
                            "no"});
                table230.AddRow(new string[] {
                            "2 Core Ratio",
                            "no"});
                table230.AddRow(new string[] {
                            "3 Core Ratio",
                            "no"});
                table230.AddRow(new string[] {
                            "4 Core Ratio",
                            "no"});
                table230.AddRow(new string[] {
                            "5 Core Ratio",
                            "no"});
                table230.AddRow(new string[] {
                            "6 Core Ratio",
                            "no"});
                table230.AddRow(new string[] {
                            "7 Core Ratio",
                            "no"});
                table230.AddRow(new string[] {
                            "8 Core Ratio",
                            "yes"});
                table230.AddRow(new string[] {
                            "9 Core Ratio",
                            "no"});
                table230.AddRow(new string[] {
                            "10 Core Ratio",
                            "no"});
#line 86
 testRunner.Then("the items values should not be changed or changed", ((string)(null)), table230, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep176_Check drag the 8 Core Ratio blocker on the slider bar to the" +
            " right and 8 Core Ratio Slider Value is correct")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep176_CheckDragThe8CoreRatioBlockerOnTheSliderBarToTheRightAnd8CoreRatioSliderValueIsCorrect()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep176_Check drag the 8 Core Ratio blocker on the slider bar to the" +
                    " right and 8 Core Ratio Slider Value is correct", null, tagsOfScenario, argumentsOfScenario);
#line 100
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 101
 testRunner.When("user hover specific title in the CPU Overclock area \'8 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 102
 testRunner.When("user drag the \'8 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "left\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 103
 testRunner.Then("Take Screen Shot 8_Core_Ratio_Slider_right_before_TestStep176 in 21722 under X50C" +
                        "PUPreCoreOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 104
 testRunner.When("user click \'3\' times \'8 Core Ratio\' plus or minus \'+\' icon in the CPU Overclock a" +
                        "rea", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 105
 testRunner.Then("Take Screen Shot 8_Core_Ratio_Slider_right_after_TestStep176 in 21722 under X50CP" +
                        "UPreCoreOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 106
 testRunner.Then("the value should be less or larger than before in the CPU Overclock area \'larger\'" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 107
 testRunner.Then("The \'8 Core Ratio\' value in the CPU Overclock area should be same and consistent " +
                        "with Spec definition \'49\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep177_Check 9 Core Ratio Slider on the slider bar should be at the" +
            " far right")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep177_Check9CoreRatioSliderOnTheSliderBarShouldBeAtTheFarRight()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep177_Check 9 Core Ratio Slider on the slider bar should be at the" +
                    " far right", null, tagsOfScenario, argumentsOfScenario);
#line 110
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 111
 testRunner.When("user hover specific title in the CPU Overclock area \'9 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 112
 testRunner.When("user drag the \'9 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "right\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 113
 testRunner.Then("Take Screen Shot 9_Core_Ratio_Slider_Right_TestStep177  in 21722 under X50CPUPreC" +
                        "oreOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 114
 testRunner.Then("The \'9 Core Ratio\' value in the CPU Overclock area should be same and consistent " +
                        "with Spec definition \'MaxValue\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep178_Check 9 Core Ratio Slider MaxValue is 52")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep178_Check9CoreRatioSliderMaxValueIs52()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep178_Check 9 Core Ratio Slider MaxValue is 52", null, tagsOfScenario, argumentsOfScenario);
#line 117
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 118
 testRunner.When("user hover specific title in the CPU Overclock area \'9 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 119
 testRunner.When("user drag the \'9 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "right\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 120
 testRunner.Then("The \'9 Core Ratio\' value in the CPU Overclock area should be same and consistent " +
                        "with Spec definition \'MaxValue\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep179_Check 9 Core Ratio Slider MaxValue is 52 and plus icon uncli" +
            "ckable and minus icon clickable")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep179_Check9CoreRatioSliderMaxValueIs52AndPlusIconUnclickableAndMinusIconClickable()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep179_Check 9 Core Ratio Slider MaxValue is 52 and plus icon uncli" +
                    "ckable and minus icon clickable", null, tagsOfScenario, argumentsOfScenario);
#line 123
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 124
 testRunner.When("user hover specific title in the CPU Overclock area \'9 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 125
 testRunner.When("user drag the \'9 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "right\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 126
 testRunner.Then("The \'9 Core Ratio\' value in the CPU Overclock area should be same and consistent " +
                        "with Spec definition \'MaxValue\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 127
 testRunner.Then("The \'9 Core Ratio\' plus icon status \'unclickable\'or minus icon status \'clickable\'" +
                        " in the CPU Overclock area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep180_Check 9 Core Ratio Slider on the slider bar should be at the" +
            " far left")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep180_Check9CoreRatioSliderOnTheSliderBarShouldBeAtTheFarLeft()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep180_Check 9 Core Ratio Slider on the slider bar should be at the" +
                    " far left", null, tagsOfScenario, argumentsOfScenario);
#line 130
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 131
 testRunner.When("user hover specific title in the CPU Overclock area \'9 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 132
 testRunner.When("user drag the \'9 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "left\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 133
 testRunner.Then("Take Screen Shot 9_Core_Ratio_Slider_Left_TestStep180  in 21722 under X50CPUPreCo" +
                        "reOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 134
 testRunner.Then("The \'9 Core Ratio\' value in the CPU Overclock area should be same and consistent " +
                        "with Spec definition \'MinValue\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep181_Check 9 Core Ratio Slider MinValue is 46")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep181_Check9CoreRatioSliderMinValueIs46()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep181_Check 9 Core Ratio Slider MinValue is 46", null, tagsOfScenario, argumentsOfScenario);
#line 137
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 138
 testRunner.When("user hover specific title in the CPU Overclock area \'9 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 139
 testRunner.When("user drag the \'9 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "left\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 140
 testRunner.Then("The \'9 Core Ratio\' value in the CPU Overclock area should be same and consistent " +
                        "with Spec definition \'MinValue\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep182_Check 9 Core Ratio Slider MinValue is 46 and plus icon click" +
            "able and minus icon unclickable")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep182_Check9CoreRatioSliderMinValueIs46AndPlusIconClickableAndMinusIconUnclickable()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep182_Check 9 Core Ratio Slider MinValue is 46 and plus icon click" +
                    "able and minus icon unclickable", null, tagsOfScenario, argumentsOfScenario);
#line 143
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 144
 testRunner.When("user hover specific title in the CPU Overclock area \'9 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 145
 testRunner.When("user drag the \'9 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "left\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 146
 testRunner.Then("The \'9 Core Ratio\' value in the CPU Overclock area should be same and consistent " +
                        "with Spec definition \'MinValue\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 147
 testRunner.Then("The \'9 Core Ratio\' plus icon status \'clickable\'or minus icon status \'unclickable\'" +
                        " in the CPU Overclock area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep183_Check 9 Core Ratio Slider MinValue is 46 and the other Core " +
            "Ratio items values should not be changed.")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep183_Check9CoreRatioSliderMinValueIs46AndTheOtherCoreRatioItemsValuesShouldNotBeChanged_()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep183_Check 9 Core Ratio Slider MinValue is 46 and the other Core " +
                    "Ratio items values should not be changed.", null, tagsOfScenario, argumentsOfScenario);
#line 150
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 151
 testRunner.When("user hover specific title in the CPU Overclock area \'9 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 152
 testRunner.Given("Get slider bar value in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 153
 testRunner.When("user drag the \'9 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "left\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table231 = new TechTalk.SpecFlow.Table(new string[] {
                            "item",
                            "changestatus"});
                table231.AddRow(new string[] {
                            "1 Core Ratio",
                            "no"});
                table231.AddRow(new string[] {
                            "2 Core Ratio",
                            "no"});
                table231.AddRow(new string[] {
                            "3 Core Ratio",
                            "no"});
                table231.AddRow(new string[] {
                            "4 Core Ratio",
                            "no"});
                table231.AddRow(new string[] {
                            "5 Core Ratio",
                            "no"});
                table231.AddRow(new string[] {
                            "6 Core Ratio",
                            "no"});
                table231.AddRow(new string[] {
                            "7 Core Ratio",
                            "no"});
                table231.AddRow(new string[] {
                            "8 Core Ratio",
                            "no"});
                table231.AddRow(new string[] {
                            "9 Core Ratio",
                            "yes"});
                table231.AddRow(new string[] {
                            "10 Core Ratio",
                            "no"});
#line 154
 testRunner.Then("the items values should not be changed or changed", ((string)(null)), table231, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep184_Check drag the 9 Core Ratio blocker on the slider bar to the" +
            " right and 9 Core Ratio Slider Value is correct")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep184_CheckDragThe9CoreRatioBlockerOnTheSliderBarToTheRightAnd9CoreRatioSliderValueIsCorrect()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep184_Check drag the 9 Core Ratio blocker on the slider bar to the" +
                    " right and 9 Core Ratio Slider Value is correct", null, tagsOfScenario, argumentsOfScenario);
#line 168
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 169
 testRunner.When("user hover specific title in the CPU Overclock area \'9 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 170
 testRunner.When("user drag the \'9 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "left\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 171
 testRunner.Then("Take Screen Shot 9_Core_Ratio_Slider_right_before_TestStep184  in 21722 under X50" +
                        "CPUPreCoreOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 172
 testRunner.When("user drag the \'9 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "3\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 173
 testRunner.Then("Take Screen Shot 9_Core_Ratio_Slider_right_after_TestStep184  in 21722 under X50C" +
                        "PUPreCoreOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 174
 testRunner.Then("the value should be less or larger than before in the CPU Overclock area \'larger\'" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 175
 testRunner.Then("The \'9 Core Ratio\' value in the CPU Overclock area should be same and consistent " +
                        "with Spec definition \'49\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep185_Check drag the 9 Core Ratio blocker on the slider bar to the" +
            " right and plus and minus icon clicable")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep185_CheckDragThe9CoreRatioBlockerOnTheSliderBarToTheRightAndPlusAndMinusIconClicable()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep185_Check drag the 9 Core Ratio blocker on the slider bar to the" +
                    " right and plus and minus icon clicable", null, tagsOfScenario, argumentsOfScenario);
#line 178
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 179
 testRunner.When("user hover specific title in the CPU Overclock area \'9 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 180
 testRunner.When("user drag the \'9 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "center\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 181
 testRunner.Then("The \'9 Core Ratio\' plus icon status \'clickable\'or minus icon status \'clickable\' i" +
                        "n the CPU Overclock area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep186_Check drag the 9 Core Ratio blocker on the slider bar to the" +
            " right and the other Core Ratio items values should not be changed")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep186_CheckDragThe9CoreRatioBlockerOnTheSliderBarToTheRightAndTheOtherCoreRatioItemsValuesShouldNotBeChanged()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep186_Check drag the 9 Core Ratio blocker on the slider bar to the" +
                    " right and the other Core Ratio items values should not be changed", null, tagsOfScenario, argumentsOfScenario);
#line 184
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 185
 testRunner.When("user hover specific title in the CPU Overclock area \'9 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 186
 testRunner.Given("Get slider bar value in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 187
 testRunner.When("user drag the \'9 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "3\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table232 = new TechTalk.SpecFlow.Table(new string[] {
                            "item",
                            "changestatus"});
                table232.AddRow(new string[] {
                            "1 Core Ratio",
                            "no"});
                table232.AddRow(new string[] {
                            "2 Core Ratio",
                            "no"});
                table232.AddRow(new string[] {
                            "3 Core Ratio",
                            "no"});
                table232.AddRow(new string[] {
                            "4 Core Ratio",
                            "no"});
                table232.AddRow(new string[] {
                            "5 Core Ratio",
                            "no"});
                table232.AddRow(new string[] {
                            "6 Core Ratio",
                            "no"});
                table232.AddRow(new string[] {
                            "7 Core Ratio",
                            "no"});
                table232.AddRow(new string[] {
                            "8 Core Ratio",
                            "no"});
                table232.AddRow(new string[] {
                            "9 Core Ratio",
                            "yes"});
                table232.AddRow(new string[] {
                            "10 Core Ratio",
                            "no"});
#line 188
 testRunner.Then("the items values should not be changed or changed", ((string)(null)), table232, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep187_Check click 9 Core Ratio minus icon and the value should be " +
            "less than before")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep187_CheckClick9CoreRatioMinusIconAndTheValueShouldBeLessThanBefore()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep187_Check click 9 Core Ratio minus icon and the value should be " +
                    "less than before", null, tagsOfScenario, argumentsOfScenario);
#line 202
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 203
 testRunner.When("user hover specific title in the CPU Overclock area \'9 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 204
 testRunner.Given("Get slider bar value in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 205
 testRunner.When("user click \'1\' times \'9 Core Ratio\' plus or minus \'-\' icon in the CPU Overclock a" +
                        "rea", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 206
 testRunner.Then("the value should be less or larger than before in the CPU Overclock area \'less\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep188_Check click 9 Core Ratio minus icon and the other Core Ratio" +
            " items values should not be changed")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep188_CheckClick9CoreRatioMinusIconAndTheOtherCoreRatioItemsValuesShouldNotBeChanged()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep188_Check click 9 Core Ratio minus icon and the other Core Ratio" +
                    " items values should not be changed", null, tagsOfScenario, argumentsOfScenario);
#line 209
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 210
 testRunner.When("user hover specific title in the CPU Overclock area \'9 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 211
 testRunner.Given("Get slider bar value in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 212
 testRunner.When("user click \'3\' times \'9 Core Ratio\' plus or minus \'-\' icon in the CPU Overclock a" +
                        "rea", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table233 = new TechTalk.SpecFlow.Table(new string[] {
                            "item",
                            "changestatus"});
                table233.AddRow(new string[] {
                            "1 Core Ratio",
                            "no"});
                table233.AddRow(new string[] {
                            "2 Core Ratio",
                            "no"});
                table233.AddRow(new string[] {
                            "3 Core Ratio",
                            "no"});
                table233.AddRow(new string[] {
                            "4 Core Ratio",
                            "no"});
                table233.AddRow(new string[] {
                            "5 Core Ratio",
                            "no"});
                table233.AddRow(new string[] {
                            "6 Core Ratio",
                            "no"});
                table233.AddRow(new string[] {
                            "7 Core Ratio",
                            "no"});
                table233.AddRow(new string[] {
                            "8 Core Ratio",
                            "no"});
                table233.AddRow(new string[] {
                            "9 Core Ratio",
                            "yes"});
                table233.AddRow(new string[] {
                            "10 Core Ratio",
                            "no"});
#line 213
 testRunner.Then("the items values should not be changed or changed", ((string)(null)), table233, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep189_Check drag the 9 Core Ratio blocker on the slider bar to the" +
            " left and 9 Core Ratio Slider Value is correct")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep189_CheckDragThe9CoreRatioBlockerOnTheSliderBarToTheLeftAnd9CoreRatioSliderValueIsCorrect()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep189_Check drag the 9 Core Ratio blocker on the slider bar to the" +
                    " left and 9 Core Ratio Slider Value is correct", null, tagsOfScenario, argumentsOfScenario);
#line 227
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 228
 testRunner.When("user hover specific title in the CPU Overclock area \'9 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 229
 testRunner.When("user drag the \'9 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "right\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 230
 testRunner.Then("Take Screen Shot 9_Core_Ratio_Slider_left_before_TestStep189 in 21722 under X50CP" +
                        "UPreCoreOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 231
 testRunner.When("user click \'3\' times \'9 Core Ratio\' plus or minus \'-\' icon in the CPU Overclock a" +
                        "rea", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 232
 testRunner.Then("Take Screen Shot 9_Core_Ratio_Slider_left_after_TestStep189 in 21722 under X50CPU" +
                        "PreCoreOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 233
 testRunner.Then("the value should be less or larger than before in the CPU Overclock area \'less\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 234
 testRunner.Then("The \'9 Core Ratio\' value in the CPU Overclock area should be same and consistent " +
                        "with Spec definition \'49\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
