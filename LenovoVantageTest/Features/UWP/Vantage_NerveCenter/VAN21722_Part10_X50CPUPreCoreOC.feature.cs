// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.4.0.0
//      SpecFlow Generator Version:3.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace LenovoVantageTest.Features.UWP.Vantage_NerveCenter
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("VAN21722_Part10_X50CPUPreCoreOC")]
    public partial class VAN21722_Part10_X50CPUPreCoreOCFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "VAN21722_Part10_X50CPUPreCoreOC.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/UWP/Vantage_NerveCenter", "VAN21722_Part10_X50CPUPreCoreOC", "\tTest Case：https://lnvusjira.lenovonet.lenovo.local/browse/VAN-19762\r\n\tAuthor： Pe" +
                    "ngjie Chen", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
#line 6
 testRunner.Given("Machine is Gaming", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
 testRunner.Given("The Machine is X Series \'X50\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.Given("The Machine Type is DT or NB \'DT\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
 testRunner.Given("The Machine support Specific function \'CPUGPUOverclockNew\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 10
 testRunner.Given("driver is installed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 11
 testRunner.Given("CPU name and contains the \'K/HK/KF\' characters", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 12
 testRunner.Given("click the Thermal mode area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 13
 testRunner.Given("click the Advance OC button in the Thermal mode settings page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 14
 testRunner.Given("click the proceed button in the Warning dialog", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep190_Check click 9 Core Ratio plus icon and the value should be l" +
            "arger than before")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep190_CheckClick9CoreRatioPlusIconAndTheValueShouldBeLargerThanBefore()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep190_Check click 9 Core Ratio plus icon and the value should be l" +
                    "arger than before", null, tagsOfScenario, argumentsOfScenario);
#line 17
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 18
 testRunner.When("user hover specific title in the CPU Overclock area \'9 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 19
 testRunner.When("user click \'1\' times \'9 Core Ratio\' plus or minus \'+\' icon in the CPU Overclock a" +
                        "rea", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
 testRunner.Then("the value should be less or larger than before in the CPU Overclock area \'larger\'" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep191_Check click 9 Core Ratio plus icon and the other Core Ratio " +
            "items values should not be changed")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep191_CheckClick9CoreRatioPlusIconAndTheOtherCoreRatioItemsValuesShouldNotBeChanged()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep191_Check click 9 Core Ratio plus icon and the other Core Ratio " +
                    "items values should not be changed", null, tagsOfScenario, argumentsOfScenario);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 24
 testRunner.When("user hover specific title in the CPU Overclock area \'9 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 25
 testRunner.Given("Get slider bar value in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 26
 testRunner.When("user click \'2\' times \'9 Core Ratio\' plus or minus \'+\' icon in the CPU Overclock a" +
                        "rea", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table192 = new TechTalk.SpecFlow.Table(new string[] {
                            "item",
                            "changestatus"});
                table192.AddRow(new string[] {
                            "1 Core Ratio",
                            "no"});
                table192.AddRow(new string[] {
                            "2 Core Ratio",
                            "no"});
                table192.AddRow(new string[] {
                            "3 Core Ratio",
                            "no"});
                table192.AddRow(new string[] {
                            "4 Core Ratio",
                            "no"});
                table192.AddRow(new string[] {
                            "5 Core Ratio",
                            "no"});
                table192.AddRow(new string[] {
                            "6 Core Ratio",
                            "no"});
                table192.AddRow(new string[] {
                            "7 Core Ratio",
                            "no"});
                table192.AddRow(new string[] {
                            "8 Core Ratio",
                            "no"});
                table192.AddRow(new string[] {
                            "9 Core Ratio",
                            "yes"});
                table192.AddRow(new string[] {
                            "10 Core Ratio",
                            "no"});
#line 27
 testRunner.Then("the items values should not be changed or changed", ((string)(null)), table192, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep192_Check drag the 9 Core Ratio blocker on the slider bar to the" +
            " right and 9 Core Ratio Slider Value is correct")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep192_CheckDragThe9CoreRatioBlockerOnTheSliderBarToTheRightAnd9CoreRatioSliderValueIsCorrect()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep192_Check drag the 9 Core Ratio blocker on the slider bar to the" +
                    " right and 9 Core Ratio Slider Value is correct", null, tagsOfScenario, argumentsOfScenario);
#line 41
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 42
 testRunner.When("user hover specific title in the CPU Overclock area \'9 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 43
 testRunner.When("user drag the \'9 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "left\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 44
 testRunner.Then("Take Screen Shot 9_Core_Ratio_Slider_right_before_TestStep192 in 21722 under X50C" +
                        "PUPreCoreOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 45
 testRunner.When("user click \'3\' times \'9 Core Ratio\' plus or minus \'+\' icon in the CPU Overclock a" +
                        "rea", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 46
 testRunner.Then("Take Screen Shot 9_Core_Ratio_Slider_right_after_TestStep192 in 21722 under X50CP" +
                        "UPreCoreOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 47
 testRunner.Then("the value should be less or larger than before in the CPU Overclock area \'larger\'" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 48
 testRunner.Then("The \'9 Core Ratio\' value in the CPU Overclock area should be same and consistent " +
                        "with Spec definition \'49\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep193_Check 10 Core Ratio Slider on the slider bar should be at th" +
            "e far right")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep193_Check10CoreRatioSliderOnTheSliderBarShouldBeAtTheFarRight()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep193_Check 10 Core Ratio Slider on the slider bar should be at th" +
                    "e far right", null, tagsOfScenario, argumentsOfScenario);
#line 51
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 52
 testRunner.When("user hover specific title in the CPU Overclock area \'10 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 53
 testRunner.When("user drag the \'10 Core Ratio\' blocker on the slider bar to the specific location " +
                        "\'right\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 54
 testRunner.Then("Take Screen Shot 10_Core_Ratio_Slider_Right_TestStep193  in 21722 under X50CPUPre" +
                        "CoreOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 55
 testRunner.Then("The \'10 Core Ratio\' value in the CPU Overclock area should be same and consistent" +
                        " with Spec definition \'MaxValue\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep194_Check 10 Core Ratio Slider MaxValue is 52")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep194_Check10CoreRatioSliderMaxValueIs52()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep194_Check 10 Core Ratio Slider MaxValue is 52", null, tagsOfScenario, argumentsOfScenario);
#line 58
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 59
 testRunner.When("user hover specific title in the CPU Overclock area \'10 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 60
 testRunner.When("user drag the \'10 Core Ratio\' blocker on the slider bar to the specific location " +
                        "\'right\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 61
 testRunner.Then("The \'10 Core Ratio\' value in the CPU Overclock area should be same and consistent" +
                        " with Spec definition \'MaxValue\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep195_Check 10 Core Ratio Slider MaxValue is 52 and plus icon uncl" +
            "ickable and minus icon clickable")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep195_Check10CoreRatioSliderMaxValueIs52AndPlusIconUnclickableAndMinusIconClickable()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep195_Check 10 Core Ratio Slider MaxValue is 52 and plus icon uncl" +
                    "ickable and minus icon clickable", null, tagsOfScenario, argumentsOfScenario);
#line 64
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 65
 testRunner.When("user hover specific title in the CPU Overclock area \'10 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 66
 testRunner.When("user drag the \'10 Core Ratio\' blocker on the slider bar to the specific location " +
                        "\'right\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 67
 testRunner.Then("The \'10 Core Ratio\' value in the CPU Overclock area should be same and consistent" +
                        " with Spec definition \'MaxValue\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 68
 testRunner.Then("The \'10 Core Ratio\' plus icon status \'unclickable\'or minus icon status \'clickable" +
                        "\' in the CPU Overclock area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep196_Check 10 Core Ratio Slider on the slider bar should be at th" +
            "e far left")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep196_Check10CoreRatioSliderOnTheSliderBarShouldBeAtTheFarLeft()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep196_Check 10 Core Ratio Slider on the slider bar should be at th" +
                    "e far left", null, tagsOfScenario, argumentsOfScenario);
#line 71
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 72
 testRunner.When("user hover specific title in the CPU Overclock area \'10 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 73
 testRunner.When("user drag the \'10 Core Ratio\' blocker on the slider bar to the specific location " +
                        "\'left\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 74
 testRunner.Then("Take Screen Shot 10_Core_Ratio_Slider_Left_TestStep196  in 21722 under X50CPUPreC" +
                        "oreOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 75
 testRunner.Then("The \'10 Core Ratio\' value in the CPU Overclock area should be same and consistent" +
                        " with Spec definition \'MinValue\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep197_Check 10 Core Ratio Slider MinValue is 46")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep197_Check10CoreRatioSliderMinValueIs46()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep197_Check 10 Core Ratio Slider MinValue is 46", null, tagsOfScenario, argumentsOfScenario);
#line 78
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 79
 testRunner.When("user hover specific title in the CPU Overclock area \'10 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 80
 testRunner.When("user drag the \'10 Core Ratio\' blocker on the slider bar to the specific location " +
                        "\'left\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 81
 testRunner.Then("The \'10 Core Ratio\' value in the CPU Overclock area should be same and consistent" +
                        " with Spec definition \'MinValue\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep198_Check 10 Core Ratio Slider MinValue is 46 and plus icon clic" +
            "kable and minus icon unclickable")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep198_Check10CoreRatioSliderMinValueIs46AndPlusIconClickableAndMinusIconUnclickable()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep198_Check 10 Core Ratio Slider MinValue is 46 and plus icon clic" +
                    "kable and minus icon unclickable", null, tagsOfScenario, argumentsOfScenario);
#line 84
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 85
 testRunner.When("user hover specific title in the CPU Overclock area \'10 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 86
 testRunner.When("user drag the \'10 Core Ratio\' blocker on the slider bar to the specific location " +
                        "\'left\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 87
 testRunner.Then("The \'10 Core Ratio\' value in the CPU Overclock area should be same and consistent" +
                        " with Spec definition \'MinValue\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 88
 testRunner.Then("The \'10 Core Ratio\' plus icon status \'clickable\'or minus icon status \'unclickable" +
                        "\' in the CPU Overclock area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep199_Check 10 Core Ratio Slider MinValue is 46 and the other Core" +
            " Ratio items values should not be changed.")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep199_Check10CoreRatioSliderMinValueIs46AndTheOtherCoreRatioItemsValuesShouldNotBeChanged_()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep199_Check 10 Core Ratio Slider MinValue is 46 and the other Core" +
                    " Ratio items values should not be changed.", null, tagsOfScenario, argumentsOfScenario);
#line 91
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 92
 testRunner.When("user hover specific title in the CPU Overclock area \'10 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 93
 testRunner.Given("Get slider bar value in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 94
 testRunner.When("user drag the \'10 Core Ratio\' blocker on the slider bar to the specific location " +
                        "\'left\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table193 = new TechTalk.SpecFlow.Table(new string[] {
                            "item",
                            "changestatus"});
                table193.AddRow(new string[] {
                            "1 Core Ratio",
                            "no"});
                table193.AddRow(new string[] {
                            "2 Core Ratio",
                            "no"});
                table193.AddRow(new string[] {
                            "3 Core Ratio",
                            "no"});
                table193.AddRow(new string[] {
                            "4 Core Ratio",
                            "no"});
                table193.AddRow(new string[] {
                            "5 Core Ratio",
                            "no"});
                table193.AddRow(new string[] {
                            "6 Core Ratio",
                            "no"});
                table193.AddRow(new string[] {
                            "7 Core Ratio",
                            "no"});
                table193.AddRow(new string[] {
                            "8 Core Ratio",
                            "no"});
                table193.AddRow(new string[] {
                            "9 Core Ratio",
                            "no"});
                table193.AddRow(new string[] {
                            "10 Core Ratio",
                            "yes"});
#line 95
 testRunner.Then("the items values should not be changed or changed", ((string)(null)), table193, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep200_Check drag the 10 Core Ratio blocker on the slider bar to th" +
            "e right and 10 Core Ratio Slider Value is correct")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep200_CheckDragThe10CoreRatioBlockerOnTheSliderBarToTheRightAnd10CoreRatioSliderValueIsCorrect()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep200_Check drag the 10 Core Ratio blocker on the slider bar to th" +
                    "e right and 10 Core Ratio Slider Value is correct", null, tagsOfScenario, argumentsOfScenario);
#line 109
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 110
 testRunner.When("user hover specific title in the CPU Overclock area \'10 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 111
 testRunner.When("user drag the \'10 Core Ratio\' blocker on the slider bar to the specific location " +
                        "\'left\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 112
 testRunner.Then("Take Screen Shot 10_Core_Ratio_Slider_right_before_TestStep200 in 21722 under X50" +
                        "CPUPreCoreOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 113
 testRunner.When("user drag the \'10 Core Ratio\' blocker on the slider bar to the specific location " +
                        "\'3\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 114
 testRunner.Then("Take Screen Shot 10_Core_Ratio_Slider_right_after_TestStep200 in 21722 under X50C" +
                        "PUPreCoreOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 115
 testRunner.Then("the value should be less or larger than before in the CPU Overclock area \'larger\'" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 116
 testRunner.Then("The \'10 Core Ratio\' value in the CPU Overclock area should be same and consistent" +
                        " with Spec definition \'49\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep201_Check drag the 10 Core Ratio blocker on the slider bar to th" +
            "e right and plus and minus icon clicable")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep201_CheckDragThe10CoreRatioBlockerOnTheSliderBarToTheRightAndPlusAndMinusIconClicable()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep201_Check drag the 10 Core Ratio blocker on the slider bar to th" +
                    "e right and plus and minus icon clicable", null, tagsOfScenario, argumentsOfScenario);
#line 119
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 120
 testRunner.When("user hover specific title in the CPU Overclock area \'10 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 121
 testRunner.When("user drag the \'10 Core Ratio\' blocker on the slider bar to the specific location " +
                        "\'center\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 122
 testRunner.Then("The \'10 Core Ratio\' plus icon status \'clickable\'or minus icon status \'clickable\' " +
                        "in the CPU Overclock area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep202_Check drag the 10 Core Ratio blocker on the slider bar to th" +
            "e right and the other Core Ratio items values should not be changed")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep202_CheckDragThe10CoreRatioBlockerOnTheSliderBarToTheRightAndTheOtherCoreRatioItemsValuesShouldNotBeChanged()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep202_Check drag the 10 Core Ratio blocker on the slider bar to th" +
                    "e right and the other Core Ratio items values should not be changed", null, tagsOfScenario, argumentsOfScenario);
#line 125
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 126
 testRunner.When("user hover specific title in the CPU Overclock area \'10 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 127
 testRunner.Given("Get slider bar value in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 128
 testRunner.When("user drag the \'10 Core Ratio\' blocker on the slider bar to the specific location " +
                        "\'3\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table194 = new TechTalk.SpecFlow.Table(new string[] {
                            "item",
                            "changestatus"});
                table194.AddRow(new string[] {
                            "1 Core Ratio",
                            "no"});
                table194.AddRow(new string[] {
                            "2 Core Ratio",
                            "no"});
                table194.AddRow(new string[] {
                            "3 Core Ratio",
                            "no"});
                table194.AddRow(new string[] {
                            "4 Core Ratio",
                            "no"});
                table194.AddRow(new string[] {
                            "5 Core Ratio",
                            "no"});
                table194.AddRow(new string[] {
                            "6 Core Ratio",
                            "no"});
                table194.AddRow(new string[] {
                            "7 Core Ratio",
                            "no"});
                table194.AddRow(new string[] {
                            "8 Core Ratio",
                            "no"});
                table194.AddRow(new string[] {
                            "9 Core Ratio",
                            "no"});
                table194.AddRow(new string[] {
                            "10 Core Ratio",
                            "yes"});
#line 129
 testRunner.Then("the items values should not be changed or changed", ((string)(null)), table194, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep203_Check click 10 Core Ratio minus icon and the value should be" +
            " less than before")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep203_CheckClick10CoreRatioMinusIconAndTheValueShouldBeLessThanBefore()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep203_Check click 10 Core Ratio minus icon and the value should be" +
                    " less than before", null, tagsOfScenario, argumentsOfScenario);
#line 143
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 144
 testRunner.When("user hover specific title in the CPU Overclock area \'10 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 145
 testRunner.Given("Get slider bar value in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 146
 testRunner.When("user click \'1\' times \'10 Core Ratio\' plus or minus \'-\' icon in the CPU Overclock " +
                        "area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 147
 testRunner.Then("the value should be less or larger than before in the CPU Overclock area \'less\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep204_Check click 10 Core Ratio minus icon and the other Core Rati" +
            "o items values should not be changed")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep204_CheckClick10CoreRatioMinusIconAndTheOtherCoreRatioItemsValuesShouldNotBeChanged()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep204_Check click 10 Core Ratio minus icon and the other Core Rati" +
                    "o items values should not be changed", null, tagsOfScenario, argumentsOfScenario);
#line 150
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 151
 testRunner.When("user hover specific title in the CPU Overclock area \'10 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 152
 testRunner.Given("Get slider bar value in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 153
 testRunner.When("user click \'3\' times \'10 Core Ratio\' plus or minus \'-\' icon in the CPU Overclock " +
                        "area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table195 = new TechTalk.SpecFlow.Table(new string[] {
                            "item",
                            "changestatus"});
                table195.AddRow(new string[] {
                            "1 Core Ratio",
                            "no"});
                table195.AddRow(new string[] {
                            "2 Core Ratio",
                            "no"});
                table195.AddRow(new string[] {
                            "3 Core Ratio",
                            "no"});
                table195.AddRow(new string[] {
                            "4 Core Ratio",
                            "no"});
                table195.AddRow(new string[] {
                            "5 Core Ratio",
                            "no"});
                table195.AddRow(new string[] {
                            "6 Core Ratio",
                            "no"});
                table195.AddRow(new string[] {
                            "7 Core Ratio",
                            "no"});
                table195.AddRow(new string[] {
                            "8 Core Ratio",
                            "no"});
                table195.AddRow(new string[] {
                            "9 Core Ratio",
                            "no"});
                table195.AddRow(new string[] {
                            "10 Core Ratio",
                            "yes"});
#line 154
 testRunner.Then("the items values should not be changed or changed", ((string)(null)), table195, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep205_Check drag the 10 Core Ratio blocker on the slider bar to th" +
            "e left and 10 Core Ratio Slider Value is correct")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep205_CheckDragThe10CoreRatioBlockerOnTheSliderBarToTheLeftAnd10CoreRatioSliderValueIsCorrect()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep205_Check drag the 10 Core Ratio blocker on the slider bar to th" +
                    "e left and 10 Core Ratio Slider Value is correct", null, tagsOfScenario, argumentsOfScenario);
#line 168
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 169
 testRunner.When("user hover specific title in the CPU Overclock area \'10 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 170
 testRunner.When("user drag the \'10 Core Ratio\' blocker on the slider bar to the specific location " +
                        "\'right\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 171
 testRunner.Then("Take Screen Shot 10_Core_Ratio_Slider_left_before_TestStep205 in 21722 under X50C" +
                        "PUPreCoreOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 172
 testRunner.When("user click \'3\' times \'10 Core Ratio\' plus or minus \'-\' icon in the CPU Overclock " +
                        "area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 173
 testRunner.Then("Take Screen Shot 10_Core_Ratio_Slider_left_after_TestStep205 in 21722 under X50CP" +
                        "UPreCoreOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 174
 testRunner.Then("the value should be less or larger than before in the CPU Overclock area \'less\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 175
 testRunner.Then("The \'10 Core Ratio\' value in the CPU Overclock area should be same and consistent" +
                        " with Spec definition \'49\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep206_Check click 10 Core Ratio plus icon and the value should be " +
            "larger than before")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep206_CheckClick10CoreRatioPlusIconAndTheValueShouldBeLargerThanBefore()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep206_Check click 10 Core Ratio plus icon and the value should be " +
                    "larger than before", null, tagsOfScenario, argumentsOfScenario);
#line 178
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 179
 testRunner.When("user hover specific title in the CPU Overclock area \'10 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 180
 testRunner.When("user click \'1\' times \'10 Core Ratio\' plus or minus \'+\' icon in the CPU Overclock " +
                        "area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 181
 testRunner.Then("the value should be less or larger than before in the CPU Overclock area \'larger\'" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep207_Check click 10 Core Ratio plus icon and the other Core Ratio" +
            " items values should not be changed")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep207_CheckClick10CoreRatioPlusIconAndTheOtherCoreRatioItemsValuesShouldNotBeChanged()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep207_Check click 10 Core Ratio plus icon and the other Core Ratio" +
                    " items values should not be changed", null, tagsOfScenario, argumentsOfScenario);
#line 184
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 185
 testRunner.When("user hover specific title in the CPU Overclock area \'10 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 186
 testRunner.Given("Get slider bar value in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 187
 testRunner.When("user click \'2\' times \'10 Core Ratio\' plus or minus \'+\' icon in the CPU Overclock " +
                        "area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table196 = new TechTalk.SpecFlow.Table(new string[] {
                            "item",
                            "changestatus"});
                table196.AddRow(new string[] {
                            "1 Core Ratio",
                            "no"});
                table196.AddRow(new string[] {
                            "2 Core Ratio",
                            "no"});
                table196.AddRow(new string[] {
                            "3 Core Ratio",
                            "no"});
                table196.AddRow(new string[] {
                            "4 Core Ratio",
                            "no"});
                table196.AddRow(new string[] {
                            "5 Core Ratio",
                            "no"});
                table196.AddRow(new string[] {
                            "6 Core Ratio",
                            "no"});
                table196.AddRow(new string[] {
                            "7 Core Ratio",
                            "no"});
                table196.AddRow(new string[] {
                            "8 Core Ratio",
                            "no"});
                table196.AddRow(new string[] {
                            "9 Core Ratio",
                            "no"});
                table196.AddRow(new string[] {
                            "10 Core Ratio",
                            "yes"});
#line 188
 testRunner.Then("the items values should not be changed or changed", ((string)(null)), table196, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep208_Check drag the 10 Core Ratio blocker on the slider bar to th" +
            "e right and 10 Core Ratio Slider Value is correct")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep208_CheckDragThe10CoreRatioBlockerOnTheSliderBarToTheRightAnd10CoreRatioSliderValueIsCorrect()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep208_Check drag the 10 Core Ratio blocker on the slider bar to th" +
                    "e right and 10 Core Ratio Slider Value is correct", null, tagsOfScenario, argumentsOfScenario);
#line 202
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 203
 testRunner.When("user hover specific title in the CPU Overclock area \'10 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 204
 testRunner.When("user drag the \'10 Core Ratio\' blocker on the slider bar to the specific location " +
                        "\'left\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 205
 testRunner.Then("Take Screen Shot 10_Core_Ratio_Slider_right_before_TestStep208 in 21722 under X50" +
                        "CPUPreCoreOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 206
 testRunner.When("user click \'3\' times \'10 Core Ratio\' plus or minus \'+\' icon in the CPU Overclock " +
                        "area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 207
 testRunner.Then("Take Screen Shot 10_Core_Ratio_Slider_right_after_TestStep208 in 21722 under X50C" +
                        "PUPreCoreOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 208
 testRunner.Then("the value should be less or larger than before in the CPU Overclock area \'larger\'" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 209
 testRunner.Then("The \'10 Core Ratio\' value in the CPU Overclock area should be same and consistent" +
                        " with Spec definition \'49\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
