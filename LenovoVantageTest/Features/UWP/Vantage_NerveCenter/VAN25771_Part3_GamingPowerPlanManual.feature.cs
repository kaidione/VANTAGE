// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.4.0.0
//      SpecFlow Generator Version:3.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace LenovoVantageTest.Features.UWP.Vantage_NerveCenter
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("VAN25771_Part3_GamingPowerPlanManualOnePowerPlan")]
    public partial class VAN25771_Part3_GamingPowerPlanManualOnePowerPlanFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "VAN25771_Part3_GamingPowerPlanManual.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/UWP/Vantage_NerveCenter", "VAN25771_Part3_GamingPowerPlanManualOnePowerPlan", "    Test Case： https://lnvusjira.lenovonet.lenovo.local/browse/VAN-25771\r\n    Aut" +
                    "hor： Xu Wei\r\n    Automated Test Step：34-51", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
#line 7
    testRunner.Given("Machine is Gaming", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN25771_TestStep34_Check Legion Perfromance mode should be selected in the Syste" +
            "m Power Plans")]
        [NUnit.Framework.CategoryAttribute("PowerPlanPerformanceMode")]
        public virtual void VAN25771_TestStep34_CheckLegionPerfromanceModeShouldBeSelectedInTheSystemPowerPlans()
        {
            string[] tagsOfScenario = new string[] {
                    "PowerPlanPerformanceMode"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN25771_TestStep34_Check Legion Perfromance mode should be selected in the Syste" +
                    "m Power Plans", null, tagsOfScenario, argumentsOfScenario);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 11
 testRunner.Then("Power Plan Or GUID \'Legion Performance Mode\' Is \'52521609-efc9-4268-b9ba-67dea73f" +
                        "18b2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 12
 testRunner.Then("Power Plan Or GUID \'Legion Balance Mode\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 13
 testRunner.Then("Power Plan Or GUID \'85d583c5-cf2e-4197-80fd-3789a227a72c\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 14
 testRunner.Then("Power Plan Or GUID \'Legion Quiet Mode\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 15
 testRunner.Then("Power Plan Or GUID \'16edbccd-dee9-4ec4-ace5-2f0b5f2a8975\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 16
 testRunner.Given("click the Thermal mode area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 17
 testRunner.Given("The thermal mode is Performance Mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 18
 testRunner.Given("View Control Panel via \'small\' type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 19
 testRunner.Given("Choose A Power Plan \'Legion Performance Mode\' Is \'Selected\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 20
 testRunner.Then("Close The Power Options Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN25771_TestStep35_Check Active mode should be Legion Performance mode and GUID")]
        [NUnit.Framework.CategoryAttribute("PowerPlanPerformanceMode")]
        public virtual void VAN25771_TestStep35_CheckActiveModeShouldBeLegionPerformanceModeAndGUID()
        {
            string[] tagsOfScenario = new string[] {
                    "PowerPlanPerformanceMode"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN25771_TestStep35_Check Active mode should be Legion Performance mode and GUID", null, tagsOfScenario, argumentsOfScenario);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 24
 testRunner.Then("Power Plan Or GUID \'Legion Performance Mode\' Is \'52521609-efc9-4268-b9ba-67dea73f" +
                        "18b2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 25
 testRunner.Then("Power Plan Or GUID \'Legion Balance Mode\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 26
 testRunner.Then("Power Plan Or GUID \'85d583c5-cf2e-4197-80fd-3789a227a72c\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 27
 testRunner.Then("Power Plan Or GUID \'Legion Quiet Mode\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 28
 testRunner.Then("Power Plan Or GUID \'16edbccd-dee9-4ec4-ace5-2f0b5f2a8975\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 29
 testRunner.Given("click the Thermal mode area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 30
 testRunner.Given("The thermal mode is Performance Mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 31
 testRunner.Then("Power Plan Or GUID \'Legion Performance Mode\' Is \'Active\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 32
 testRunner.Then("Power Plan Or GUID \'52521609-efc9-4268-b9ba-67dea73f18b2\' Is \'Active\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN25771_TestStep36_Check Legion Perfromance mode should be selected in the Syste" +
            "m Power Plans")]
        [NUnit.Framework.CategoryAttribute("PowerPlanPerformanceMode")]
        public virtual void VAN25771_TestStep36_CheckLegionPerfromanceModeShouldBeSelectedInTheSystemPowerPlans()
        {
            string[] tagsOfScenario = new string[] {
                    "PowerPlanPerformanceMode"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN25771_TestStep36_Check Legion Perfromance mode should be selected in the Syste" +
                    "m Power Plans", null, tagsOfScenario, argumentsOfScenario);
#line 35
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 36
 testRunner.Then("Power Plan Or GUID \'Legion Performance Mode\' Is \'52521609-efc9-4268-b9ba-67dea73f" +
                        "18b2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 37
 testRunner.Then("Power Plan Or GUID \'Legion Balance Mode\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 38
 testRunner.Then("Power Plan Or GUID \'85d583c5-cf2e-4197-80fd-3789a227a72c\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 39
 testRunner.Then("Power Plan Or GUID \'Legion Quiet Mode\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 40
 testRunner.Then("Power Plan Or GUID \'16edbccd-dee9-4ec4-ace5-2f0b5f2a8975\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 41
 testRunner.Given("click the Thermal mode area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 42
 testRunner.Given("The thermal mode is Performance Mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 43
 testRunner.Given("The thermal mode is Quiet Mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 44
 testRunner.Given("View Control Panel via \'small\' type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 45
 testRunner.Given("Choose A Power Plan \'Legion Performance Mode\' Is \'Selected\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 46
 testRunner.Then("Close The Power Options Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN25771_TestStep37_Check Active mode should be Legion Performance mode and GUID")]
        [NUnit.Framework.CategoryAttribute("PowerPlanPerformanceMode")]
        public virtual void VAN25771_TestStep37_CheckActiveModeShouldBeLegionPerformanceModeAndGUID()
        {
            string[] tagsOfScenario = new string[] {
                    "PowerPlanPerformanceMode"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN25771_TestStep37_Check Active mode should be Legion Performance mode and GUID", null, tagsOfScenario, argumentsOfScenario);
#line 49
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 50
 testRunner.Then("Power Plan Or GUID \'Legion Performance Mode\' Is \'52521609-efc9-4268-b9ba-67dea73f" +
                        "18b2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 51
 testRunner.Then("Power Plan Or GUID \'Legion Balance Mode\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 52
 testRunner.Then("Power Plan Or GUID \'85d583c5-cf2e-4197-80fd-3789a227a72c\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 53
 testRunner.Then("Power Plan Or GUID \'Legion Quiet Mode\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 54
 testRunner.Then("Power Plan Or GUID \'16edbccd-dee9-4ec4-ace5-2f0b5f2a8975\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 55
 testRunner.Given("click the Thermal mode area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 56
 testRunner.Given("The thermal mode is Performance Mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 57
 testRunner.Given("The thermal mode is Quiet Mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 58
 testRunner.Then("Power Plan Or GUID \'Legion Performance Mode\' Is \'Active\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 59
 testRunner.Then("Power Plan Or GUID \'52521609-efc9-4268-b9ba-67dea73f18b2\' Is \'Active\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN25771_TestStep38_Check Legion Balance mode should be selected in the System Po" +
            "wer Plans")]
        [NUnit.Framework.CategoryAttribute("PowerPlanPerformanceMode")]
        public virtual void VAN25771_TestStep38_CheckLegionBalanceModeShouldBeSelectedInTheSystemPowerPlans()
        {
            string[] tagsOfScenario = new string[] {
                    "PowerPlanPerformanceMode"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN25771_TestStep38_Check Legion Balance mode should be selected in the System Po" +
                    "wer Plans", null, tagsOfScenario, argumentsOfScenario);
#line 62
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 63
 testRunner.Then("Power Plan Or GUID \'Legion Performance Mode\' Is \'52521609-efc9-4268-b9ba-67dea73f" +
                        "18b2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 64
 testRunner.Then("Power Plan Or GUID \'Legion Balance Mode\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 65
 testRunner.Then("Power Plan Or GUID \'85d583c5-cf2e-4197-80fd-3789a227a72c\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 66
 testRunner.Then("Power Plan Or GUID \'Legion Quiet Mode\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 67
 testRunner.Then("Power Plan Or GUID \'16edbccd-dee9-4ec4-ace5-2f0b5f2a8975\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 68
 testRunner.Given("click the Thermal mode area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 69
 testRunner.Given("The thermal mode is Performance Mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 70
 testRunner.Given("The thermal mode is Balance Mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 71
 testRunner.Given("View Control Panel via \'small\' type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 72
 testRunner.Given("Choose A Power Plan \'Legion Performance Mode\' Is \'Selected\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 73
 testRunner.Then("Close The Power Options Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN25771_TestStep39_Check Active mode should be Legion Performance mode and GUID")]
        [NUnit.Framework.CategoryAttribute("PowerPlanPerformanceMode")]
        public virtual void VAN25771_TestStep39_CheckActiveModeShouldBeLegionPerformanceModeAndGUID()
        {
            string[] tagsOfScenario = new string[] {
                    "PowerPlanPerformanceMode"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN25771_TestStep39_Check Active mode should be Legion Performance mode and GUID", null, tagsOfScenario, argumentsOfScenario);
#line 76
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 77
 testRunner.Then("Power Plan Or GUID \'Legion Performance Mode\' Is \'52521609-efc9-4268-b9ba-67dea73f" +
                        "18b2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 78
 testRunner.Then("Power Plan Or GUID \'Legion Balance Mode\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 79
 testRunner.Then("Power Plan Or GUID \'85d583c5-cf2e-4197-80fd-3789a227a72c\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 80
 testRunner.Then("Power Plan Or GUID \'Legion Quiet Mode\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 81
 testRunner.Then("Power Plan Or GUID \'16edbccd-dee9-4ec4-ace5-2f0b5f2a8975\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 82
 testRunner.Given("click the Thermal mode area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 83
 testRunner.Given("The thermal mode is Performance Mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 84
 testRunner.Given("The thermal mode is Balance Mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 85
 testRunner.Then("Power Plan Or GUID \'Legion Performance Mode\' Is \'Active\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 86
 testRunner.Then("Power Plan Or GUID \'52521609-efc9-4268-b9ba-67dea73f18b2\' Is \'Active\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN25771_TestStep40_Check Legion Balance mode should be selected in the System Po" +
            "wer Plans")]
        [NUnit.Framework.CategoryAttribute("PowerPlanBalanceMode")]
        public virtual void VAN25771_TestStep40_CheckLegionBalanceModeShouldBeSelectedInTheSystemPowerPlans()
        {
            string[] tagsOfScenario = new string[] {
                    "PowerPlanBalanceMode"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN25771_TestStep40_Check Legion Balance mode should be selected in the System Po" +
                    "wer Plans", null, tagsOfScenario, argumentsOfScenario);
#line 89
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 90
 testRunner.Then("Power Plan Or GUID \'Legion Performance Mode\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 91
 testRunner.Then("Power Plan Or GUID \'52521609-efc9-4268-b9ba-67dea73f18b2\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 92
 testRunner.Then("Power Plan Or GUID \'Legion Balance Mode\' Is \'85d583c5-cf2e-4197-80fd-3789a227a72c" +
                        "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 93
 testRunner.Then("Power Plan Or GUID \'Legion Quiet Mode\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 94
 testRunner.Then("Power Plan Or GUID \'16edbccd-dee9-4ec4-ace5-2f0b5f2a8975\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 95
 testRunner.Given("click the Thermal mode area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 96
 testRunner.Given("The thermal mode is Balance Mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 97
 testRunner.Given("View Control Panel via \'small\' type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 98
 testRunner.Given("Choose A Power Plan \'Legion Balance Mode\' Is \'Selected\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 99
 testRunner.Then("Close The Power Options Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN25771_TestStep41_Check Active mode should be Legion Balance mode and GUID")]
        [NUnit.Framework.CategoryAttribute("PowerPlanBalanceMode")]
        public virtual void VAN25771_TestStep41_CheckActiveModeShouldBeLegionBalanceModeAndGUID()
        {
            string[] tagsOfScenario = new string[] {
                    "PowerPlanBalanceMode"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN25771_TestStep41_Check Active mode should be Legion Balance mode and GUID", null, tagsOfScenario, argumentsOfScenario);
#line 102
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 103
 testRunner.Then("Power Plan Or GUID \'Legion Performance Mode\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 104
 testRunner.Then("Power Plan Or GUID \'52521609-efc9-4268-b9ba-67dea73f18b2\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 105
 testRunner.Then("Power Plan Or GUID \'Legion Balance Mode\' Is \'85d583c5-cf2e-4197-80fd-3789a227a72c" +
                        "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 106
 testRunner.Then("Power Plan Or GUID \'Legion Quiet Mode\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 107
 testRunner.Then("Power Plan Or GUID \'16edbccd-dee9-4ec4-ace5-2f0b5f2a8975\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 108
 testRunner.Given("click the Thermal mode area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 109
 testRunner.Given("The thermal mode is Balance Mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 110
 testRunner.Then("Power Plan Or GUID \'Legion Balance Mode\' Is \'Active\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 111
 testRunner.Then("Power Plan Or GUID \'85d583c5-cf2e-4197-80fd-3789a227a72c\' Is \'Active\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN25771_TestStep42_Check Legion Balance mode should be selected in the System Po" +
            "wer Plans")]
        [NUnit.Framework.CategoryAttribute("PowerPlanBalanceMode")]
        public virtual void VAN25771_TestStep42_CheckLegionBalanceModeShouldBeSelectedInTheSystemPowerPlans()
        {
            string[] tagsOfScenario = new string[] {
                    "PowerPlanBalanceMode"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN25771_TestStep42_Check Legion Balance mode should be selected in the System Po" +
                    "wer Plans", null, tagsOfScenario, argumentsOfScenario);
#line 114
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 115
 testRunner.Then("Power Plan Or GUID \'Legion Performance Mode\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 116
 testRunner.Then("Power Plan Or GUID \'52521609-efc9-4268-b9ba-67dea73f18b2\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 117
 testRunner.Then("Power Plan Or GUID \'Legion Balance Mode\' Is \'85d583c5-cf2e-4197-80fd-3789a227a72c" +
                        "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 118
 testRunner.Then("Power Plan Or GUID \'Legion Quiet Mode\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 119
 testRunner.Then("Power Plan Or GUID \'16edbccd-dee9-4ec4-ace5-2f0b5f2a8975\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 120
 testRunner.Given("click the Thermal mode area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 121
 testRunner.Given("The thermal mode is Balance Mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 122
 testRunner.Given("The thermal mode is Performance Mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 123
 testRunner.Given("View Control Panel via \'small\' type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 124
 testRunner.Given("Choose A Power Plan \'Legion Balance Mode\' Is \'Selected\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 125
 testRunner.Then("Close The Power Options Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN25771_TestStep43_Check Active mode should be Legion Balance mode and GUID")]
        [NUnit.Framework.CategoryAttribute("PowerPlanBalanceMode")]
        public virtual void VAN25771_TestStep43_CheckActiveModeShouldBeLegionBalanceModeAndGUID()
        {
            string[] tagsOfScenario = new string[] {
                    "PowerPlanBalanceMode"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN25771_TestStep43_Check Active mode should be Legion Balance mode and GUID", null, tagsOfScenario, argumentsOfScenario);
#line 128
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 129
 testRunner.Then("Power Plan Or GUID \'Legion Performance Mode\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 130
 testRunner.Then("Power Plan Or GUID \'52521609-efc9-4268-b9ba-67dea73f18b2\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 131
 testRunner.Then("Power Plan Or GUID \'Legion Balance Mode\' Is \'85d583c5-cf2e-4197-80fd-3789a227a72c" +
                        "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 132
 testRunner.Then("Power Plan Or GUID \'Legion Quiet Mode\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 133
 testRunner.Then("Power Plan Or GUID \'16edbccd-dee9-4ec4-ace5-2f0b5f2a8975\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 134
 testRunner.Given("click the Thermal mode area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 135
 testRunner.Given("The thermal mode is Balance Mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 136
 testRunner.Given("The thermal mode is Performance Mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 137
 testRunner.Then("Power Plan Or GUID \'Legion Balance Mode\' Is \'Active\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 138
 testRunner.Then("Power Plan Or GUID \'85d583c5-cf2e-4197-80fd-3789a227a72c\' Is \'Active\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN25771_TestStep44_Check Legion Balance mode should be selected in the System Po" +
            "wer Plans")]
        [NUnit.Framework.CategoryAttribute("PowerPlanBalanceMode")]
        public virtual void VAN25771_TestStep44_CheckLegionBalanceModeShouldBeSelectedInTheSystemPowerPlans()
        {
            string[] tagsOfScenario = new string[] {
                    "PowerPlanBalanceMode"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN25771_TestStep44_Check Legion Balance mode should be selected in the System Po" +
                    "wer Plans", null, tagsOfScenario, argumentsOfScenario);
#line 141
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 142
 testRunner.Then("Power Plan Or GUID \'Legion Performance Mode\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 143
 testRunner.Then("Power Plan Or GUID \'52521609-efc9-4268-b9ba-67dea73f18b2\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 144
 testRunner.Then("Power Plan Or GUID \'Legion Balance Mode\' Is \'85d583c5-cf2e-4197-80fd-3789a227a72c" +
                        "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 145
 testRunner.Then("Power Plan Or GUID \'Legion Quiet Mode\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 146
 testRunner.Then("Power Plan Or GUID \'16edbccd-dee9-4ec4-ace5-2f0b5f2a8975\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 147
 testRunner.Given("click the Thermal mode area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 148
 testRunner.Given("The thermal mode is Balance Mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 149
 testRunner.Given("The thermal mode is Quiet Mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 150
 testRunner.Given("View Control Panel via \'small\' type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 151
 testRunner.Given("Choose A Power Plan \'Legion Balance Mode\' Is \'Selected\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 152
 testRunner.Then("Close The Power Options Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN25771_TestStep45_Check Active mode should be Legion Balance mode and GUID")]
        [NUnit.Framework.CategoryAttribute("PowerPlanBalanceMode")]
        public virtual void VAN25771_TestStep45_CheckActiveModeShouldBeLegionBalanceModeAndGUID()
        {
            string[] tagsOfScenario = new string[] {
                    "PowerPlanBalanceMode"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN25771_TestStep45_Check Active mode should be Legion Balance mode and GUID", null, tagsOfScenario, argumentsOfScenario);
#line 155
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 156
 testRunner.Then("Power Plan Or GUID \'Legion Performance Mode\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 157
 testRunner.Then("Power Plan Or GUID \'52521609-efc9-4268-b9ba-67dea73f18b2\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 158
 testRunner.Then("Power Plan Or GUID \'Legion Balance Mode\' Is \'85d583c5-cf2e-4197-80fd-3789a227a72c" +
                        "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 159
 testRunner.Then("Power Plan Or GUID \'Legion Quiet Mode\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 160
 testRunner.Then("Power Plan Or GUID \'16edbccd-dee9-4ec4-ace5-2f0b5f2a8975\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 161
 testRunner.Given("click the Thermal mode area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 162
 testRunner.Given("The thermal mode is Balance Mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 163
 testRunner.Given("The thermal mode is Quiet Mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 164
 testRunner.Then("Power Plan Or GUID \'Legion Balance Mode\' Is \'Active\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 165
 testRunner.Then("Power Plan Or GUID \'85d583c5-cf2e-4197-80fd-3789a227a72c\' Is \'Active\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN25771_TestStep46_Check Legion Quiet mode should be selected in the System Powe" +
            "r Plans")]
        [NUnit.Framework.CategoryAttribute("PowerPlanQuietPlan")]
        public virtual void VAN25771_TestStep46_CheckLegionQuietModeShouldBeSelectedInTheSystemPowerPlans()
        {
            string[] tagsOfScenario = new string[] {
                    "PowerPlanQuietPlan"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN25771_TestStep46_Check Legion Quiet mode should be selected in the System Powe" +
                    "r Plans", null, tagsOfScenario, argumentsOfScenario);
#line 168
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 169
 testRunner.Then("Power Plan Or GUID \'Legion Performance Mode\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 170
 testRunner.Then("Power Plan Or GUID \'52521609-efc9-4268-b9ba-67dea73f18b2\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 171
 testRunner.Then("Power Plan Or GUID \'Legion Balance Mode\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 172
 testRunner.Then("Power Plan Or GUID \'85d583c5-cf2e-4197-80fd-3789a227a72c\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 173
 testRunner.Then("Power Plan Or GUID \'Legion Quiet Mode\' Is \'16edbccd-dee9-4ec4-ace5-2f0b5f2a8975\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 174
 testRunner.Given("click the Thermal mode area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 175
 testRunner.Given("The thermal mode is Quiet Mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 176
 testRunner.Given("View Control Panel via \'small\' type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 177
 testRunner.Given("Choose A Power Plan \'Legion Quiet Mode\' Is \'Selected\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 178
 testRunner.Then("Close The Power Options Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN25771_TestStep47_Check Active mode should be Legion Quiet mode and GUID")]
        [NUnit.Framework.CategoryAttribute("PowerPlanQuietPlan")]
        public virtual void VAN25771_TestStep47_CheckActiveModeShouldBeLegionQuietModeAndGUID()
        {
            string[] tagsOfScenario = new string[] {
                    "PowerPlanQuietPlan"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN25771_TestStep47_Check Active mode should be Legion Quiet mode and GUID", null, tagsOfScenario, argumentsOfScenario);
#line 181
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 182
 testRunner.Then("Power Plan Or GUID \'Legion Performance Mode\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 183
 testRunner.Then("Power Plan Or GUID \'52521609-efc9-4268-b9ba-67dea73f18b2\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 184
 testRunner.Then("Power Plan Or GUID \'Legion Balance Mode\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 185
 testRunner.Then("Power Plan Or GUID \'85d583c5-cf2e-4197-80fd-3789a227a72c\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 186
 testRunner.Then("Power Plan Or GUID \'Legion Quiet Mode\' Is \'16edbccd-dee9-4ec4-ace5-2f0b5f2a8975\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 187
 testRunner.Given("click the Thermal mode area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 188
 testRunner.Given("The thermal mode is Quiet Mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 189
 testRunner.Then("Power Plan Or GUID \'Legion Quiet Mode\' Is \'Active\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 190
 testRunner.Then("Power Plan Or GUID \'16edbccd-dee9-4ec4-ace5-2f0b5f2a8975\' Is \'Active\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN25771_TestStep48_Check Legion Quiet mode should be selected in the System Powe" +
            "r Plans")]
        [NUnit.Framework.CategoryAttribute("PowerPlanQuietPlan")]
        public virtual void VAN25771_TestStep48_CheckLegionQuietModeShouldBeSelectedInTheSystemPowerPlans()
        {
            string[] tagsOfScenario = new string[] {
                    "PowerPlanQuietPlan"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN25771_TestStep48_Check Legion Quiet mode should be selected in the System Powe" +
                    "r Plans", null, tagsOfScenario, argumentsOfScenario);
#line 193
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 194
 testRunner.Then("Power Plan Or GUID \'Legion Performance Mode\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 195
 testRunner.Then("Power Plan Or GUID \'52521609-efc9-4268-b9ba-67dea73f18b2\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 196
 testRunner.Then("Power Plan Or GUID \'Legion Balance Mode\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 197
 testRunner.Then("Power Plan Or GUID \'85d583c5-cf2e-4197-80fd-3789a227a72c\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 198
 testRunner.Then("Power Plan Or GUID \'Legion Quiet Mode\' Is \'16edbccd-dee9-4ec4-ace5-2f0b5f2a8975\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 199
 testRunner.Given("click the Thermal mode area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 200
 testRunner.Given("The thermal mode is Quiet Mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 201
 testRunner.Given("The thermal mode is Performance Mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 202
 testRunner.Given("View Control Panel via \'small\' type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 203
 testRunner.Given("Choose A Power Plan \'Legion Quiet Mode\' Is \'Selected\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 204
 testRunner.Then("Close The Power Options Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN25771_TestStep49_Check Active mode should be Legion Quiet mode and GUID")]
        [NUnit.Framework.CategoryAttribute("PowerPlanQuietPlan")]
        public virtual void VAN25771_TestStep49_CheckActiveModeShouldBeLegionQuietModeAndGUID()
        {
            string[] tagsOfScenario = new string[] {
                    "PowerPlanQuietPlan"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN25771_TestStep49_Check Active mode should be Legion Quiet mode and GUID", null, tagsOfScenario, argumentsOfScenario);
#line 207
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 208
 testRunner.Then("Power Plan Or GUID \'Legion Performance Mode\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 209
 testRunner.Then("Power Plan Or GUID \'52521609-efc9-4268-b9ba-67dea73f18b2\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 210
 testRunner.Then("Power Plan Or GUID \'Legion Balance Mode\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 211
 testRunner.Then("Power Plan Or GUID \'85d583c5-cf2e-4197-80fd-3789a227a72c\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 212
 testRunner.Then("Power Plan Or GUID \'Legion Quiet Mode\' Is \'16edbccd-dee9-4ec4-ace5-2f0b5f2a8975\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 213
 testRunner.Given("click the Thermal mode area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 214
 testRunner.Given("The thermal mode is Quiet Mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 215
 testRunner.Given("The thermal mode is Performance Mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 216
 testRunner.Then("Power Plan Or GUID \'Legion Quiet Mode\' Is \'Active\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 217
 testRunner.Then("Power Plan Or GUID \'16edbccd-dee9-4ec4-ace5-2f0b5f2a8975\' Is \'Active\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN25771_TestStep50_Check Legion Quiet mode should be selected in the System Powe" +
            "r Plans")]
        [NUnit.Framework.CategoryAttribute("PowerPlanQuietPlan")]
        public virtual void VAN25771_TestStep50_CheckLegionQuietModeShouldBeSelectedInTheSystemPowerPlans()
        {
            string[] tagsOfScenario = new string[] {
                    "PowerPlanQuietPlan"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN25771_TestStep50_Check Legion Quiet mode should be selected in the System Powe" +
                    "r Plans", null, tagsOfScenario, argumentsOfScenario);
#line 220
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 221
 testRunner.Then("Power Plan Or GUID \'Legion Performance Mode\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 222
 testRunner.Then("Power Plan Or GUID \'52521609-efc9-4268-b9ba-67dea73f18b2\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 223
 testRunner.Then("Power Plan Or GUID \'Legion Balance Mode\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 224
 testRunner.Then("Power Plan Or GUID \'85d583c5-cf2e-4197-80fd-3789a227a72c\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 225
 testRunner.Then("Power Plan Or GUID \'Legion Quiet Mode\' Is \'16edbccd-dee9-4ec4-ace5-2f0b5f2a8975\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 226
 testRunner.Given("click the Thermal mode area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 227
 testRunner.Given("The thermal mode is Quiet Mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 228
 testRunner.Given("The thermal mode is Balance Mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 229
 testRunner.Given("View Control Panel via \'small\' type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 230
 testRunner.Given("Choose A Power Plan \'Legion Quiet Mode\' Is \'Selected\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 231
 testRunner.Then("Close The Power Options Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN25771_TestStep51_Check Active mode should be Legion Quiet mode and GUID")]
        [NUnit.Framework.CategoryAttribute("PowerPlanQuietPlan")]
        public virtual void VAN25771_TestStep51_CheckActiveModeShouldBeLegionQuietModeAndGUID()
        {
            string[] tagsOfScenario = new string[] {
                    "PowerPlanQuietPlan"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN25771_TestStep51_Check Active mode should be Legion Quiet mode and GUID", null, tagsOfScenario, argumentsOfScenario);
#line 234
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 235
 testRunner.Then("Power Plan Or GUID \'Legion Performance Mode\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 236
 testRunner.Then("Power Plan Or GUID \'52521609-efc9-4268-b9ba-67dea73f18b2\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 237
 testRunner.Then("Power Plan Or GUID \'Legion Balance Mode\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 238
 testRunner.Then("Power Plan Or GUID \'85d583c5-cf2e-4197-80fd-3789a227a72c\' Is \'Hidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 239
 testRunner.Then("Power Plan Or GUID \'Legion Quiet Mode\' Is \'16edbccd-dee9-4ec4-ace5-2f0b5f2a8975\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 240
 testRunner.Given("click the Thermal mode area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 241
 testRunner.Given("The thermal mode is Quiet Mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 242
 testRunner.Given("The thermal mode is Balance Mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 243
 testRunner.Then("Power Plan Or GUID \'Legion Quiet Mode\' Is \'Active\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 244
 testRunner.Then("Power Plan Or GUID \'16edbccd-dee9-4ec4-ace5-2f0b5f2a8975\' Is \'Active\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
