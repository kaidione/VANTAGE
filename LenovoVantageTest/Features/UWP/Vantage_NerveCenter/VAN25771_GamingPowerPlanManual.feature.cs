// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.4.0.0
//      SpecFlow Generator Version:3.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace LenovoVantageTest.Features.UWP.Vantage_NerveCenter
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("VAN25771_GamingPowerPlanManualThreePlans")]
    public partial class VAN25771_GamingPowerPlanManualThreePlansFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "VAN25771_GamingPowerPlanManual.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/UWP/Vantage_NerveCenter", "VAN25771_GamingPowerPlanManualThreePlans", "\tTest Case： https://jira.tc.lenovo.com/browse/VAN-25771\r\n\tAuthor： Yang Liu\r\n\tAuto" +
                    "mated Test Step：ThreePlans 1-15", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
#line 7
 testRunner.Given("Machine is Gaming", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN25771_TestStep01_Check the power plans in the System Power Plans")]
        [NUnit.Framework.CategoryAttribute("PowerPlanManualThreePlans")]
        public virtual void VAN25771_TestStep01_CheckThePowerPlansInTheSystemPowerPlans()
        {
            string[] tagsOfScenario = new string[] {
                    "PowerPlanManualThreePlans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN25771_TestStep01_Check the power plans in the System Power Plans", null, tagsOfScenario, argumentsOfScenario);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 11
 testRunner.Then("Power Plan Or GUID \'Legion Performance Mode\' Is \'Shown\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 12
 testRunner.Then("Power Plan Or GUID \'Legion Balance Mode\' Is \'Shown\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 13
 testRunner.Then("Power Plan Or GUID \'Legion Quiet Mode\' Is \'Shown\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN25771_TestStep02_Check the GUID of three modes")]
        [NUnit.Framework.CategoryAttribute("PowerPlanManualThreePlans")]
        public virtual void VAN25771_TestStep02_CheckTheGUIDOfThreeModes()
        {
            string[] tagsOfScenario = new string[] {
                    "PowerPlanManualThreePlans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN25771_TestStep02_Check the GUID of three modes", null, tagsOfScenario, argumentsOfScenario);
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 17
 testRunner.Then("Power Plan Or GUID \'Legion Performance Mode\' Is \'52521609-efc9-4268-b9ba-67dea73f" +
                        "18b2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 18
 testRunner.Then("Power Plan Or GUID \'Legion Balance Mode\' Is \'85d583c5-cf2e-4197-80fd-3789a227a72c" +
                        "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 19
 testRunner.Then("Power Plan Or GUID \'Legion Quiet Mode\' Is \'16edbccd-dee9-4ec4-ace5-2f0b5f2a8975\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN25771_TestStep03_Check thermal mode should be consistent with Power plan with " +
            "target GUID")]
        [NUnit.Framework.CategoryAttribute("PowerPlanManualThreePlans")]
        public virtual void VAN25771_TestStep03_CheckThermalModeShouldBeConsistentWithPowerPlanWithTargetGUID()
        {
            string[] tagsOfScenario = new string[] {
                    "PowerPlanManualThreePlans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN25771_TestStep03_Check thermal mode should be consistent with Power plan with " +
                    "target GUID", null, tagsOfScenario, argumentsOfScenario);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 23
 testRunner.Given("click the Thermal mode area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 24
 testRunner.Given("The thermal mode is Balance Mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 25
 testRunner.Then("Power Plan Or GUID \'Legion Balance Mode\' Is \'Active\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN25771_TestStep04_Check Legion Perfromance mode should be selected in the Syste" +
            "m Power Plans")]
        [NUnit.Framework.CategoryAttribute("PowerPlanManualThreePlans")]
        public virtual void VAN25771_TestStep04_CheckLegionPerfromanceModeShouldBeSelectedInTheSystemPowerPlans()
        {
            string[] tagsOfScenario = new string[] {
                    "PowerPlanManualThreePlans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN25771_TestStep04_Check Legion Perfromance mode should be selected in the Syste" +
                    "m Power Plans", null, tagsOfScenario, argumentsOfScenario);
#line 28
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 29
 testRunner.Then("Power Plan Or GUID \'Legion Performance Mode\' Is \'52521609-efc9-4268-b9ba-67dea73f" +
                        "18b2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 30
 testRunner.Then("Power Plan Or GUID \'Legion Balance Mode\' Is \'85d583c5-cf2e-4197-80fd-3789a227a72c" +
                        "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 31
 testRunner.Then("Power Plan Or GUID \'Legion Quiet Mode\' Is \'16edbccd-dee9-4ec4-ace5-2f0b5f2a8975\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 32
 testRunner.Given("click the Thermal mode area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 33
 testRunner.Given("The thermal mode is Performance Mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 34
 testRunner.Given("View Control Panel via \'small\' type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 35
 testRunner.Given("Choose A Power Plan \'Legion Performance Mode\' Is \'Selected\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 36
 testRunner.Then("Close The Power Options Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN25771_TestStep05_Check Active mode should be Legion Performance mode and GUID " +
            "is 52521609-efc9-4268-b9ba-67dea73f18b2")]
        [NUnit.Framework.CategoryAttribute("PowerPlanManualThreePlans")]
        public virtual void VAN25771_TestStep05_CheckActiveModeShouldBeLegionPerformanceModeAndGUIDIs52521609_Efc9_4268_B9Ba_67Dea73F18B2()
        {
            string[] tagsOfScenario = new string[] {
                    "PowerPlanManualThreePlans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN25771_TestStep05_Check Active mode should be Legion Performance mode and GUID " +
                    "is 52521609-efc9-4268-b9ba-67dea73f18b2", null, tagsOfScenario, argumentsOfScenario);
#line 39
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 40
 testRunner.Then("Power Plan Or GUID \'Legion Performance Mode\' Is \'52521609-efc9-4268-b9ba-67dea73f" +
                        "18b2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 41
 testRunner.Then("Power Plan Or GUID \'Legion Balance Mode\' Is \'85d583c5-cf2e-4197-80fd-3789a227a72c" +
                        "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 42
 testRunner.Then("Power Plan Or GUID \'Legion Quiet Mode\' Is \'16edbccd-dee9-4ec4-ace5-2f0b5f2a8975\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 43
 testRunner.Given("click the Thermal mode area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 44
 testRunner.Given("The thermal mode is Performance Mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 45
 testRunner.Then("Power Plan Or GUID \'Legion Performance Mode\' Is \'Active\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 46
 testRunner.Then("Power Plan Or GUID \'52521609-efc9-4268-b9ba-67dea73f18b2\' Is \'Active\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN25771_TestStep06_Check Legion Quiet mode should be selected in the System Powe" +
            "r Plans")]
        [NUnit.Framework.CategoryAttribute("PowerPlanManualThreePlans")]
        public virtual void VAN25771_TestStep06_CheckLegionQuietModeShouldBeSelectedInTheSystemPowerPlans()
        {
            string[] tagsOfScenario = new string[] {
                    "PowerPlanManualThreePlans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN25771_TestStep06_Check Legion Quiet mode should be selected in the System Powe" +
                    "r Plans", null, tagsOfScenario, argumentsOfScenario);
#line 49
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 50
 testRunner.Then("Power Plan Or GUID \'Legion Performance Mode\' Is \'52521609-efc9-4268-b9ba-67dea73f" +
                        "18b2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 51
 testRunner.Then("Power Plan Or GUID \'Legion Balance Mode\' Is \'85d583c5-cf2e-4197-80fd-3789a227a72c" +
                        "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 52
 testRunner.Then("Power Plan Or GUID \'Legion Quiet Mode\' Is \'16edbccd-dee9-4ec4-ace5-2f0b5f2a8975\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 53
 testRunner.Given("click the Thermal mode area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 54
 testRunner.Given("The thermal mode is Quiet Mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 55
 testRunner.Given("View Control Panel via \'small\' type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 56
 testRunner.Given("Choose A Power Plan \'Legion Quiet Mode\' Is \'Selected\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 57
 testRunner.Then("Close The Power Options Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN25771_TestStep07_Check Active mode should be Legion Quiet mode and GUID is 16e" +
            "dbccd-dee9-4ec4-ace5-2f0b5f2a8975")]
        [NUnit.Framework.CategoryAttribute("PowerPlanManualThreePlans")]
        public virtual void VAN25771_TestStep07_CheckActiveModeShouldBeLegionQuietModeAndGUIDIs16Edbccd_Dee9_4Ec4_Ace5_2F0B5F2A8975()
        {
            string[] tagsOfScenario = new string[] {
                    "PowerPlanManualThreePlans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN25771_TestStep07_Check Active mode should be Legion Quiet mode and GUID is 16e" +
                    "dbccd-dee9-4ec4-ace5-2f0b5f2a8975", null, tagsOfScenario, argumentsOfScenario);
#line 60
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 61
 testRunner.Then("Power Plan Or GUID \'Legion Performance Mode\' Is \'52521609-efc9-4268-b9ba-67dea73f" +
                        "18b2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 62
 testRunner.Then("Power Plan Or GUID \'Legion Balance Mode\' Is \'85d583c5-cf2e-4197-80fd-3789a227a72c" +
                        "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 63
 testRunner.Then("Power Plan Or GUID \'Legion Quiet Mode\' Is \'16edbccd-dee9-4ec4-ace5-2f0b5f2a8975\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 64
 testRunner.Given("click the Thermal mode area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 65
 testRunner.Given("The thermal mode is Quiet Mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 66
 testRunner.Then("Power Plan Or GUID \'Legion Quiet Mode\' Is \'Active\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 67
 testRunner.Then("Power Plan Or GUID \'16edbccd-dee9-4ec4-ace5-2f0b5f2a8975\' Is \'Active\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN25771_TestStep08_Check Legion Balance mode should be selected in the System Po" +
            "wer Plans")]
        [NUnit.Framework.CategoryAttribute("PowerPlanManualThreePlans")]
        public virtual void VAN25771_TestStep08_CheckLegionBalanceModeShouldBeSelectedInTheSystemPowerPlans()
        {
            string[] tagsOfScenario = new string[] {
                    "PowerPlanManualThreePlans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN25771_TestStep08_Check Legion Balance mode should be selected in the System Po" +
                    "wer Plans", null, tagsOfScenario, argumentsOfScenario);
#line 70
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 71
 testRunner.Then("Power Plan Or GUID \'Legion Performance Mode\' Is \'52521609-efc9-4268-b9ba-67dea73f" +
                        "18b2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 72
 testRunner.Then("Power Plan Or GUID \'Legion Balance Mode\' Is \'85d583c5-cf2e-4197-80fd-3789a227a72c" +
                        "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 73
 testRunner.Then("Power Plan Or GUID \'Legion Quiet Mode\' Is \'16edbccd-dee9-4ec4-ace5-2f0b5f2a8975\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 74
 testRunner.Given("click the Thermal mode area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 75
 testRunner.Given("The thermal mode is Balance Mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 76
 testRunner.Given("View Control Panel via \'small\' type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 77
 testRunner.Given("Choose A Power Plan \'Legion Balance Mode\' Is \'Selected\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 78
 testRunner.Then("Close The Power Options Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN25771_TestStep09_Check Active mode should be Legion Balance mode and GUID is 8" +
            "5d583c5-cf2e-4197-80fd-3789a227a72c")]
        [NUnit.Framework.CategoryAttribute("PowerPlanManualThreePlans")]
        public virtual void VAN25771_TestStep09_CheckActiveModeShouldBeLegionBalanceModeAndGUIDIs85D583C5_Cf2E_4197_80Fd_3789A227A72C()
        {
            string[] tagsOfScenario = new string[] {
                    "PowerPlanManualThreePlans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN25771_TestStep09_Check Active mode should be Legion Balance mode and GUID is 8" +
                    "5d583c5-cf2e-4197-80fd-3789a227a72c", null, tagsOfScenario, argumentsOfScenario);
#line 81
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 82
 testRunner.Then("Power Plan Or GUID \'Legion Performance Mode\' Is \'52521609-efc9-4268-b9ba-67dea73f" +
                        "18b2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 83
 testRunner.Then("Power Plan Or GUID \'Legion Balance Mode\' Is \'85d583c5-cf2e-4197-80fd-3789a227a72c" +
                        "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 84
 testRunner.Then("Power Plan Or GUID \'Legion Quiet Mode\' Is \'16edbccd-dee9-4ec4-ace5-2f0b5f2a8975\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 85
 testRunner.Given("click the Thermal mode area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 86
 testRunner.Given("The thermal mode is Balance Mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 87
 testRunner.Then("Power Plan Or GUID \'Legion Balance Mode\' Is \'Active\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 88
 testRunner.Then("Power Plan Or GUID \'85d583c5-cf2e-4197-80fd-3789a227a72c\' Is \'Active\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN25771_TestStep10_Check Perfromance mode should be selected in the Thermal mode" +
            " settings page")]
        [NUnit.Framework.CategoryAttribute("PowerPlanManualThreePlans")]
        public virtual void VAN25771_TestStep10_CheckPerfromanceModeShouldBeSelectedInTheThermalModeSettingsPage()
        {
            string[] tagsOfScenario = new string[] {
                    "PowerPlanManualThreePlans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN25771_TestStep10_Check Perfromance mode should be selected in the Thermal mode" +
                    " settings page", null, tagsOfScenario, argumentsOfScenario);
#line 91
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 92
 testRunner.Then("Power Plan Or GUID \'Legion Performance Mode\' Is \'52521609-efc9-4268-b9ba-67dea73f" +
                        "18b2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 93
 testRunner.Given("View Control Panel via \'small\' type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 94
 testRunner.Given("Choose A Power Plan \'Legion Performance Mode\' Is \'Not Selected\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 95
 testRunner.Then("Close The Power Options Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 96
 testRunner.Given("click the Thermal mode area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 97
 testRunner.Then("The thermal mode is Performance Mode in the Thermal Mode Setting popup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN25771_TestStep11_Check Active mode should be Legion Performance mode and GUID " +
            "is 52521609-efc9-4268-b9ba-67dea73f18b")]
        [NUnit.Framework.CategoryAttribute("PowerPlanManualThreePlans")]
        public virtual void VAN25771_TestStep11_CheckActiveModeShouldBeLegionPerformanceModeAndGUIDIs52521609_Efc9_4268_B9Ba_67Dea73F18B()
        {
            string[] tagsOfScenario = new string[] {
                    "PowerPlanManualThreePlans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN25771_TestStep11_Check Active mode should be Legion Performance mode and GUID " +
                    "is 52521609-efc9-4268-b9ba-67dea73f18b", null, tagsOfScenario, argumentsOfScenario);
#line 100
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 101
 testRunner.Then("Power Plan Or GUID \'Legion Performance Mode\' Is \'52521609-efc9-4268-b9ba-67dea73f" +
                        "18b2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 102
 testRunner.Given("View Control Panel via \'small\' type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 103
 testRunner.Given("Choose A Power Plan \'Legion Performance Mode\' Is \'Selected\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 104
 testRunner.Then("Power Plan Or GUID \'Legion Performance Mode\' Is \'Active\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 105
 testRunner.Then("Power Plan Or GUID \'52521609-efc9-4268-b9ba-67dea73f18b2\' Is \'Active\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 106
 testRunner.Then("Close The Power Options Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN25771_TestStep12_Check Balance mode should be selected in the Thermal mode set" +
            "tings page")]
        [NUnit.Framework.CategoryAttribute("PowerPlanManualThreePlans")]
        public virtual void VAN25771_TestStep12_CheckBalanceModeShouldBeSelectedInTheThermalModeSettingsPage()
        {
            string[] tagsOfScenario = new string[] {
                    "PowerPlanManualThreePlans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN25771_TestStep12_Check Balance mode should be selected in the Thermal mode set" +
                    "tings page", null, tagsOfScenario, argumentsOfScenario);
#line 109
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 110
 testRunner.Then("Power Plan Or GUID \'Legion Balance Mode\' Is \'85d583c5-cf2e-4197-80fd-3789a227a72c" +
                        "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 111
 testRunner.Given("View Control Panel via \'small\' type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 112
 testRunner.Given("Choose A Power Plan \'Legion Balance Mode\' Is \'Not Selected\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 113
 testRunner.Then("Close The Power Options Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 114
 testRunner.Given("click the Thermal mode area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 115
 testRunner.Then("The thermal mode is Balance Mode in the Thermal Mode Setting popup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN25771_TestStep13_Check Active mode should be Legion Balance mode and GUID is 8" +
            "5d583c5-cf2e-4197-80fd-3789a227a72c")]
        [NUnit.Framework.CategoryAttribute("PowerPlanManualThreePlans")]
        public virtual void VAN25771_TestStep13_CheckActiveModeShouldBeLegionBalanceModeAndGUIDIs85D583C5_Cf2E_4197_80Fd_3789A227A72C()
        {
            string[] tagsOfScenario = new string[] {
                    "PowerPlanManualThreePlans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN25771_TestStep13_Check Active mode should be Legion Balance mode and GUID is 8" +
                    "5d583c5-cf2e-4197-80fd-3789a227a72c", null, tagsOfScenario, argumentsOfScenario);
#line 118
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 119
 testRunner.Then("Power Plan Or GUID \'Legion Balance Mode\' Is \'85d583c5-cf2e-4197-80fd-3789a227a72c" +
                        "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 120
 testRunner.Given("View Control Panel via \'small\' type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 121
 testRunner.Given("Choose A Power Plan \'Legion Balance Mode\' Is \'Selected\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 122
 testRunner.Then("Power Plan Or GUID \'Legion Balance Mode\' Is \'Active\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 123
 testRunner.Then("Power Plan Or GUID \'85d583c5-cf2e-4197-80fd-3789a227a72c\' Is \'Active\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 124
 testRunner.Then("Close The Power Options Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN25771_TestStep14_Check Quiet mode should be selected in the Thermal mode setti" +
            "ngs page")]
        [NUnit.Framework.CategoryAttribute("PowerPlanManualThreePlans")]
        public virtual void VAN25771_TestStep14_CheckQuietModeShouldBeSelectedInTheThermalModeSettingsPage()
        {
            string[] tagsOfScenario = new string[] {
                    "PowerPlanManualThreePlans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN25771_TestStep14_Check Quiet mode should be selected in the Thermal mode setti" +
                    "ngs page", null, tagsOfScenario, argumentsOfScenario);
#line 127
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 128
 testRunner.Then("Power Plan Or GUID \'Legion Quiet Mode\' Is \'16edbccd-dee9-4ec4-ace5-2f0b5f2a8975\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 129
 testRunner.Given("View Control Panel via \'small\' type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 130
 testRunner.Given("Choose A Power Plan \'Legion Quiet Mode\' Is \'Not Selected\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 131
 testRunner.Then("Close The Power Options Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 132
 testRunner.Given("click the Thermal mode area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 133
 testRunner.Then("The thermal mode is Quiet Mode in the Thermal Mode Setting popup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN25771_TestStep15_Check Active mode should be Legion Quiet mode and GUID is 16e" +
            "dbccd-dee9-4ec4-ace5-2f0b5f2a8975")]
        [NUnit.Framework.CategoryAttribute("PowerPlanManualThreePlans")]
        public virtual void VAN25771_TestStep15_CheckActiveModeShouldBeLegionQuietModeAndGUIDIs16Edbccd_Dee9_4Ec4_Ace5_2F0B5F2A8975()
        {
            string[] tagsOfScenario = new string[] {
                    "PowerPlanManualThreePlans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN25771_TestStep15_Check Active mode should be Legion Quiet mode and GUID is 16e" +
                    "dbccd-dee9-4ec4-ace5-2f0b5f2a8975", null, tagsOfScenario, argumentsOfScenario);
#line 136
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 137
 testRunner.Then("Power Plan Or GUID \'Legion Quiet Mode\' Is \'16edbccd-dee9-4ec4-ace5-2f0b5f2a8975\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 138
 testRunner.Given("View Control Panel via \'small\' type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 139
 testRunner.Given("Choose A Power Plan \'Legion Quiet Mode\' Is \'Selected\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 140
 testRunner.Then("Power Plan Or GUID \'Legion Quiet Mode\' Is \'Active\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 141
 testRunner.Then("Power Plan Or GUID \'16edbccd-dee9-4ec4-ace5-2f0b5f2a8975\' Is \'Active\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 142
 testRunner.Then("Close The Power Options Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
