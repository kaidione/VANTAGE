// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.4.0.0
//      SpecFlow Generator Version:3.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace LenovoVantageTest.Features.UWP.Vantage_NerveCenter
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("VAN21722_Part7_X50CPUPreCoreOC")]
    public partial class VAN21722_Part7_X50CPUPreCoreOCFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "VAN21722_Part7_X50CPUPreCoreOC.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/UWP/Vantage_NerveCenter", "VAN21722_Part7_X50CPUPreCoreOC", "\tTest Case：https://lnvusjira.lenovonet.lenovo.local/browse/VAN-19762\r\n\tAuthor： Pe" +
                    "ngjie Chen", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
#line 6
 testRunner.Given("Machine is Gaming", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
 testRunner.Given("The Machine is X Series \'X50\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.Given("The Machine Type is DT or NB \'DT\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
 testRunner.Given("The Machine support Specific function \'CPUGPUOverclockNew\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 10
 testRunner.Given("driver is installed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 11
 testRunner.Given("CPU name and contains the \'K/HK/KF\' characters", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 12
 testRunner.Given("click the Thermal mode area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 13
 testRunner.Given("click the Advance OC button in the Thermal mode settings page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 14
 testRunner.Given("click the proceed button in the Warning dialog", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep127_Check click 5 Core Ratio plus icon and the other Core Ratio " +
            "items values should not be changed")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep127_CheckClick5CoreRatioPlusIconAndTheOtherCoreRatioItemsValuesShouldNotBeChanged()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep127_Check click 5 Core Ratio plus icon and the other Core Ratio " +
                    "items values should not be changed", null, tagsOfScenario, argumentsOfScenario);
#line 17
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 18
 testRunner.When("user hover specific title in the CPU Overclock area \'5 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 19
 testRunner.Given("Get slider bar value in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 20
 testRunner.When("user click \'2\' times \'5 Core Ratio\' plus or minus \'+\' icon in the CPU Overclock a" +
                        "rea", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table218 = new TechTalk.SpecFlow.Table(new string[] {
                            "item",
                            "changestatus"});
                table218.AddRow(new string[] {
                            "1 Core Ratio",
                            "no"});
                table218.AddRow(new string[] {
                            "2 Core Ratio",
                            "no"});
                table218.AddRow(new string[] {
                            "3 Core Ratio",
                            "no"});
                table218.AddRow(new string[] {
                            "4 Core Ratio",
                            "no"});
                table218.AddRow(new string[] {
                            "5 Core Ratio",
                            "yes"});
                table218.AddRow(new string[] {
                            "6 Core Ratio",
                            "no"});
                table218.AddRow(new string[] {
                            "7 Core Ratio",
                            "no"});
                table218.AddRow(new string[] {
                            "8 Core Ratio",
                            "no"});
                table218.AddRow(new string[] {
                            "9 Core Ratio",
                            "no"});
                table218.AddRow(new string[] {
                            "10 Core Ratio",
                            "no"});
#line 21
 testRunner.Then("the items values should not be changed or changed", ((string)(null)), table218, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep128_Check drag the 5 Core Ratio blocker on the slider bar to the" +
            " right and 5 Core Ratio Slider Value is correct")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep128_CheckDragThe5CoreRatioBlockerOnTheSliderBarToTheRightAnd5CoreRatioSliderValueIsCorrect()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep128_Check drag the 5 Core Ratio blocker on the slider bar to the" +
                    " right and 5 Core Ratio Slider Value is correct", null, tagsOfScenario, argumentsOfScenario);
#line 35
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 36
 testRunner.When("user hover specific title in the CPU Overclock area \'5 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 37
 testRunner.When("user drag the \'5 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "left\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 38
 testRunner.Then("Take Screen Shot 5_Core_Ratio_Slider_right_before_TestStep128  in 21722 under X50" +
                        "CPUPreCoreOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 39
 testRunner.When("user click \'3\' times \'5 Core Ratio\' plus or minus \'+\' icon in the CPU Overclock a" +
                        "rea", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 40
 testRunner.Then("Take Screen Shot 5_Core_Ratio_Slider_right_after_TestStep128   in 21722 under X50" +
                        "CPUPreCoreOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 41
 testRunner.Then("the value should be less or larger than before in the CPU Overclock area \'larger\'" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 42
 testRunner.Then("The \'5 Core Ratio\' value in the CPU Overclock area should be same and consistent " +
                        "with Spec definition \'50\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep129_Check 6 Core Ratio Slider on the slider bar should be at the" +
            " far right")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep129_Check6CoreRatioSliderOnTheSliderBarShouldBeAtTheFarRight()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep129_Check 6 Core Ratio Slider on the slider bar should be at the" +
                    " far right", null, tagsOfScenario, argumentsOfScenario);
#line 45
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 46
 testRunner.When("user hover specific title in the CPU Overclock area \'6 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 47
 testRunner.When("user drag the \'6 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "right\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 48
 testRunner.Then("Take Screen Shot 6_Core_Ratio_Slider_Right_TestStep129  in 21722 under X50CPUPreC" +
                        "oreOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 49
 testRunner.Then("The \'6 Core Ratio\' value in the CPU Overclock area should be same and consistent " +
                        "with Spec definition \'MaxValue\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep130_Check 6 Core Ratio Slider MaxValue is 52")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep130_Check6CoreRatioSliderMaxValueIs52()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep130_Check 6 Core Ratio Slider MaxValue is 52", null, tagsOfScenario, argumentsOfScenario);
#line 52
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 53
 testRunner.When("user hover specific title in the CPU Overclock area \'6 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 54
 testRunner.When("user drag the \'6 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "right\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 55
 testRunner.Then("The \'6 Core Ratio\' value in the CPU Overclock area should be same and consistent " +
                        "with Spec definition \'MaxValue\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep131_Check 6 Core Ratio Slider MaxValue is 52 and plus icon uncli" +
            "ckable and minus icon clickable")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep131_Check6CoreRatioSliderMaxValueIs52AndPlusIconUnclickableAndMinusIconClickable()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep131_Check 6 Core Ratio Slider MaxValue is 52 and plus icon uncli" +
                    "ckable and minus icon clickable", null, tagsOfScenario, argumentsOfScenario);
#line 58
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 59
 testRunner.When("user hover specific title in the CPU Overclock area \'6 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 60
 testRunner.When("user drag the \'6 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "right\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 61
 testRunner.Then("The \'6 Core Ratio\' value in the CPU Overclock area should be same and consistent " +
                        "with Spec definition \'MaxValue\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 62
 testRunner.Then("The \'6 Core Ratio\' plus icon status \'unclickable\'or minus icon status \'clickable\'" +
                        " in the CPU Overclock area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep132_Check 6 Core Ratio Slider on the slider bar should be at the" +
            " far left")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep132_Check6CoreRatioSliderOnTheSliderBarShouldBeAtTheFarLeft()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep132_Check 6 Core Ratio Slider on the slider bar should be at the" +
                    " far left", null, tagsOfScenario, argumentsOfScenario);
#line 65
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 66
 testRunner.When("user hover specific title in the CPU Overclock area \'6 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 67
 testRunner.When("user drag the \'6 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "left\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 68
 testRunner.Then("Take Screen Shot 6_Core_Ratio_Slider_Left_TestStep132  in 21722 under X50CPUPreCo" +
                        "reOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 69
 testRunner.Then("The \'6 Core Ratio\' value in the CPU Overclock area should be same and consistent " +
                        "with Spec definition \'MinValue\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep133_Check 6 Core Ratio Slider MinValue is 46")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep133_Check6CoreRatioSliderMinValueIs46()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep133_Check 6 Core Ratio Slider MinValue is 46", null, tagsOfScenario, argumentsOfScenario);
#line 72
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 73
 testRunner.When("user hover specific title in the CPU Overclock area \'6 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 74
 testRunner.When("user drag the \'6 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "left\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 75
 testRunner.Then("The \'6 Core Ratio\' value in the CPU Overclock area should be same and consistent " +
                        "with Spec definition \'MinValue\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep134_Check 6 Core Ratio Slider MinValue is 46 and plus icon click" +
            "able and minus icon unclickable")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep134_Check6CoreRatioSliderMinValueIs46AndPlusIconClickableAndMinusIconUnclickable()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep134_Check 6 Core Ratio Slider MinValue is 46 and plus icon click" +
                    "able and minus icon unclickable", null, tagsOfScenario, argumentsOfScenario);
#line 78
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 79
 testRunner.When("user hover specific title in the CPU Overclock area \'6 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 80
 testRunner.When("user drag the \'6 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "left\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 81
 testRunner.Then("The \'6 Core Ratio\' value in the CPU Overclock area should be same and consistent " +
                        "with Spec definition \'MinValue\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 82
 testRunner.Then("The \'6 Core Ratio\' plus icon status \'clickable\'or minus icon status \'unclickable\'" +
                        " in the CPU Overclock area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep135_Check 6 Core Ratio Slider MinValue is 46 and the other Core " +
            "Ratio items values should not be changed.")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep135_Check6CoreRatioSliderMinValueIs46AndTheOtherCoreRatioItemsValuesShouldNotBeChanged_()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep135_Check 6 Core Ratio Slider MinValue is 46 and the other Core " +
                    "Ratio items values should not be changed.", null, tagsOfScenario, argumentsOfScenario);
#line 85
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 86
 testRunner.When("user hover specific title in the CPU Overclock area \'6 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 87
 testRunner.Given("Get slider bar value in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 88
 testRunner.When("user drag the \'6 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "left\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table219 = new TechTalk.SpecFlow.Table(new string[] {
                            "item",
                            "changestatus"});
                table219.AddRow(new string[] {
                            "1 Core Ratio",
                            "no"});
                table219.AddRow(new string[] {
                            "2 Core Ratio",
                            "no"});
                table219.AddRow(new string[] {
                            "3 Core Ratio",
                            "no"});
                table219.AddRow(new string[] {
                            "4 Core Ratio",
                            "no"});
                table219.AddRow(new string[] {
                            "5 Core Ratio",
                            "no"});
                table219.AddRow(new string[] {
                            "6 Core Ratio",
                            "yes"});
                table219.AddRow(new string[] {
                            "7 Core Ratio",
                            "no"});
                table219.AddRow(new string[] {
                            "8 Core Ratio",
                            "no"});
                table219.AddRow(new string[] {
                            "9 Core Ratio",
                            "no"});
                table219.AddRow(new string[] {
                            "10 Core Ratio",
                            "no"});
#line 89
 testRunner.Then("the items values should not be changed or changed", ((string)(null)), table219, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep136_Check drag the 6 Core Ratio blocker on the slider bar to the" +
            " right and 6 Core Ratio Slider Value is correct")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep136_CheckDragThe6CoreRatioBlockerOnTheSliderBarToTheRightAnd6CoreRatioSliderValueIsCorrect()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep136_Check drag the 6 Core Ratio blocker on the slider bar to the" +
                    " right and 6 Core Ratio Slider Value is correct", null, tagsOfScenario, argumentsOfScenario);
#line 103
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 104
 testRunner.When("user hover specific title in the CPU Overclock area \'6 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 105
 testRunner.When("user drag the \'6 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "left\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 106
 testRunner.Then("Take Screen Shot 6_Core_Ratio_Slider_right_before_TestStep136  in 21722 under X50" +
                        "CPUPreCoreOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 107
 testRunner.When("user drag the \'6 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "3\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 108
 testRunner.Then("Take Screen Shot 6_Core_Ratio_Slider_right_after_TestStep136  in 21722 under X50C" +
                        "PUPreCoreOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 109
 testRunner.Then("the value should be less or larger than before in the CPU Overclock area \'larger\'" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 110
 testRunner.Then("The \'6 Core Ratio\' value in the CPU Overclock area should be same and consistent " +
                        "with Spec definition \'49\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep137_Check drag the 6 Core Ratio blocker on the slider bar to the" +
            " right and plus and minus icon clicable")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep137_CheckDragThe6CoreRatioBlockerOnTheSliderBarToTheRightAndPlusAndMinusIconClicable()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep137_Check drag the 6 Core Ratio blocker on the slider bar to the" +
                    " right and plus and minus icon clicable", null, tagsOfScenario, argumentsOfScenario);
#line 113
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 114
 testRunner.When("user hover specific title in the CPU Overclock area \'6 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 115
 testRunner.When("user drag the \'6 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "center\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 116
 testRunner.Then("The \'6 Core Ratio\' plus icon status \'clickable\'or minus icon status \'clickable\' i" +
                        "n the CPU Overclock area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep138_Check drag the 6 Core Ratio blocker on the slider bar to the" +
            " right and the other Core Ratio items values should not be changed")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep138_CheckDragThe6CoreRatioBlockerOnTheSliderBarToTheRightAndTheOtherCoreRatioItemsValuesShouldNotBeChanged()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep138_Check drag the 6 Core Ratio blocker on the slider bar to the" +
                    " right and the other Core Ratio items values should not be changed", null, tagsOfScenario, argumentsOfScenario);
#line 119
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 120
 testRunner.When("user hover specific title in the CPU Overclock area \'6 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 121
 testRunner.Given("Get slider bar value in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 122
 testRunner.When("user drag the \'6 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "3\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table220 = new TechTalk.SpecFlow.Table(new string[] {
                            "item",
                            "changestatus"});
                table220.AddRow(new string[] {
                            "1 Core Ratio",
                            "no"});
                table220.AddRow(new string[] {
                            "2 Core Ratio",
                            "no"});
                table220.AddRow(new string[] {
                            "3 Core Ratio",
                            "no"});
                table220.AddRow(new string[] {
                            "4 Core Ratio",
                            "no"});
                table220.AddRow(new string[] {
                            "5 Core Ratio",
                            "no"});
                table220.AddRow(new string[] {
                            "6 Core Ratio",
                            "yes"});
                table220.AddRow(new string[] {
                            "7 Core Ratio",
                            "no"});
                table220.AddRow(new string[] {
                            "8 Core Ratio",
                            "no"});
                table220.AddRow(new string[] {
                            "9 Core Ratio",
                            "no"});
                table220.AddRow(new string[] {
                            "10 Core Ratio",
                            "no"});
#line 123
 testRunner.Then("the items values should not be changed or changed", ((string)(null)), table220, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep139_Check click 6 Core Ratio minus icon and the value should be " +
            "less than before")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep139_CheckClick6CoreRatioMinusIconAndTheValueShouldBeLessThanBefore()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep139_Check click 6 Core Ratio minus icon and the value should be " +
                    "less than before", null, tagsOfScenario, argumentsOfScenario);
#line 137
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 138
 testRunner.When("user hover specific title in the CPU Overclock area \'6 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 139
 testRunner.Given("Get slider bar value in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 140
 testRunner.When("user click \'1\' times \'6 Core Ratio\' plus or minus \'-\' icon in the CPU Overclock a" +
                        "rea", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 141
 testRunner.Then("the value should be less or larger than before in the CPU Overclock area \'less\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep140_Check click 6 Core Ratio minus icon and the other Core Ratio" +
            " items values should not be changed")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep140_CheckClick6CoreRatioMinusIconAndTheOtherCoreRatioItemsValuesShouldNotBeChanged()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep140_Check click 6 Core Ratio minus icon and the other Core Ratio" +
                    " items values should not be changed", null, tagsOfScenario, argumentsOfScenario);
#line 144
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 145
 testRunner.When("user hover specific title in the CPU Overclock area \'6 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 146
 testRunner.Given("Get slider bar value in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 147
 testRunner.When("user click \'3\' times \'6 Core Ratio\' plus or minus \'-\' icon in the CPU Overclock a" +
                        "rea", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table221 = new TechTalk.SpecFlow.Table(new string[] {
                            "item",
                            "changestatus"});
                table221.AddRow(new string[] {
                            "1 Core Ratio",
                            "no"});
                table221.AddRow(new string[] {
                            "2 Core Ratio",
                            "no"});
                table221.AddRow(new string[] {
                            "3 Core Ratio",
                            "no"});
                table221.AddRow(new string[] {
                            "4 Core Ratio",
                            "no"});
                table221.AddRow(new string[] {
                            "5 Core Ratio",
                            "no"});
                table221.AddRow(new string[] {
                            "6 Core Ratio",
                            "yes"});
                table221.AddRow(new string[] {
                            "7 Core Ratio",
                            "no"});
                table221.AddRow(new string[] {
                            "8 Core Ratio",
                            "no"});
                table221.AddRow(new string[] {
                            "9 Core Ratio",
                            "no"});
                table221.AddRow(new string[] {
                            "10 Core Ratio",
                            "no"});
#line 148
 testRunner.Then("the items values should not be changed or changed", ((string)(null)), table221, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep141_Check drag the 6 Core Ratio blocker on the slider bar to the" +
            " left and 6 Core Ratio Slider Value is correct")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep141_CheckDragThe6CoreRatioBlockerOnTheSliderBarToTheLeftAnd6CoreRatioSliderValueIsCorrect()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep141_Check drag the 6 Core Ratio blocker on the slider bar to the" +
                    " left and 6 Core Ratio Slider Value is correct", null, tagsOfScenario, argumentsOfScenario);
#line 162
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 163
 testRunner.When("user hover specific title in the CPU Overclock area \'6 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 164
 testRunner.When("user drag the \'6 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "right\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 165
 testRunner.Then("Take Screen Shot 6_Core_Ratio_Slider_left_before_TestStep141  in 21722 under X50C" +
                        "PUPreCoreOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 166
 testRunner.When("user click \'3\' times \'6 Core Ratio\' plus or minus \'-\' icon in the CPU Overclock a" +
                        "rea", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 167
 testRunner.Then("Take Screen Shot 6_Core_Ratio_Slider_left_after_TestStep141   in 21722 under X50C" +
                        "PUPreCoreOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 168
 testRunner.Then("the value should be less or larger than before in the CPU Overclock area \'less\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 169
 testRunner.Then("The \'6 Core Ratio\' value in the CPU Overclock area should be same and consistent " +
                        "with Spec definition \'49\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep142_Check click 6 Core Ratio plus icon and the value should be l" +
            "arger than before")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep142_CheckClick6CoreRatioPlusIconAndTheValueShouldBeLargerThanBefore()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep142_Check click 6 Core Ratio plus icon and the value should be l" +
                    "arger than before", null, tagsOfScenario, argumentsOfScenario);
#line 172
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 173
 testRunner.When("user hover specific title in the CPU Overclock area \'6 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 174
 testRunner.When("user click \'1\' times \'6 Core Ratio\' plus or minus \'+\' icon in the CPU Overclock a" +
                        "rea", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 175
 testRunner.Then("the value should be less or larger than before in the CPU Overclock area \'larger\'" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep143_Check click 6 Core Ratio plus icon and the other Core Ratio " +
            "items values should not be changed")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep143_CheckClick6CoreRatioPlusIconAndTheOtherCoreRatioItemsValuesShouldNotBeChanged()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep143_Check click 6 Core Ratio plus icon and the other Core Ratio " +
                    "items values should not be changed", null, tagsOfScenario, argumentsOfScenario);
#line 178
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 179
 testRunner.When("user hover specific title in the CPU Overclock area \'6 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 180
 testRunner.Given("Get slider bar value in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 181
 testRunner.When("user click \'2\' times \'6 Core Ratio\' plus or minus \'+\' icon in the CPU Overclock a" +
                        "rea", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table222 = new TechTalk.SpecFlow.Table(new string[] {
                            "item",
                            "changestatus"});
                table222.AddRow(new string[] {
                            "1 Core Ratio",
                            "no"});
                table222.AddRow(new string[] {
                            "2 Core Ratio",
                            "no"});
                table222.AddRow(new string[] {
                            "3 Core Ratio",
                            "no"});
                table222.AddRow(new string[] {
                            "4 Core Ratio",
                            "no"});
                table222.AddRow(new string[] {
                            "5 Core Ratio",
                            "no"});
                table222.AddRow(new string[] {
                            "6 Core Ratio",
                            "yes"});
                table222.AddRow(new string[] {
                            "7 Core Ratio",
                            "no"});
                table222.AddRow(new string[] {
                            "8 Core Ratio",
                            "no"});
                table222.AddRow(new string[] {
                            "9 Core Ratio",
                            "no"});
                table222.AddRow(new string[] {
                            "10 Core Ratio",
                            "no"});
#line 182
 testRunner.Then("the items values should not be changed or changed", ((string)(null)), table222, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep144_Check drag the 6 Core Ratio blocker on the slider bar to the" +
            " right and 6 Core Ratio Slider Value is correct")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep144_CheckDragThe6CoreRatioBlockerOnTheSliderBarToTheRightAnd6CoreRatioSliderValueIsCorrect()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep144_Check drag the 6 Core Ratio blocker on the slider bar to the" +
                    " right and 6 Core Ratio Slider Value is correct", null, tagsOfScenario, argumentsOfScenario);
#line 196
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 197
 testRunner.When("user hover specific title in the CPU Overclock area \'6 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 198
 testRunner.When("user drag the \'6 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "left\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 199
 testRunner.Then("Take Screen Shot 6_Core_Ratio_Slider_right_before_TestStep144 in 21722 under X50C" +
                        "PUPreCoreOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 200
 testRunner.When("user click \'3\' times \'6 Core Ratio\' plus or minus \'+\' icon in the CPU Overclock a" +
                        "rea", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 201
 testRunner.Then("Take Screen Shot 6_Core_Ratio_Slider_right_after_TestStep144 in 21722 under X50CP" +
                        "UPreCoreOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 202
 testRunner.Then("the value should be less or larger than before in the CPU Overclock area \'larger\'" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 203
 testRunner.Then("The \'6 Core Ratio\' value in the CPU Overclock area should be same and consistent " +
                        "with Spec definition \'49\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep145_Check 7 Core Ratio Slider on the slider bar should be at the" +
            " far right")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep145_Check7CoreRatioSliderOnTheSliderBarShouldBeAtTheFarRight()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep145_Check 7 Core Ratio Slider on the slider bar should be at the" +
                    " far right", null, tagsOfScenario, argumentsOfScenario);
#line 206
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 207
 testRunner.When("user hover specific title in the CPU Overclock area \'7 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 208
 testRunner.When("user drag the \'7 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "right\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 209
 testRunner.Then("Take Screen Shot 7_Core_Ratio_Slider_Right_TestStep145  in 21722 under X50CPUPreC" +
                        "oreOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 210
 testRunner.Then("The \'7 Core Ratio\' value in the CPU Overclock area should be same and consistent " +
                        "with Spec definition \'MaxValue\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep146_Check 7 Core Ratio Slider MaxValue is 52")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep146_Check7CoreRatioSliderMaxValueIs52()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep146_Check 7 Core Ratio Slider MaxValue is 52", null, tagsOfScenario, argumentsOfScenario);
#line 213
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 214
 testRunner.When("user hover specific title in the CPU Overclock area \'7 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 215
 testRunner.When("user drag the \'7 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "right\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 216
 testRunner.Then("The \'7 Core Ratio\' value in the CPU Overclock area should be same and consistent " +
                        "with Spec definition \'MaxValue\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep147_Check 7 Core Ratio Slider MaxValue is 52 and plus icon uncli" +
            "ckable and minus icon clickable")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep147_Check7CoreRatioSliderMaxValueIs52AndPlusIconUnclickableAndMinusIconClickable()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep147_Check 7 Core Ratio Slider MaxValue is 52 and plus icon uncli" +
                    "ckable and minus icon clickable", null, tagsOfScenario, argumentsOfScenario);
#line 219
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 220
 testRunner.When("user hover specific title in the CPU Overclock area \'7 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 221
 testRunner.When("user drag the \'7 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "right\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 222
 testRunner.Then("The \'7 Core Ratio\' value in the CPU Overclock area should be same and consistent " +
                        "with Spec definition \'MaxValue\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 223
 testRunner.Then("The \'7 Core Ratio\' plus icon status \'unclickable\'or minus icon status \'clickable\'" +
                        " in the CPU Overclock area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
