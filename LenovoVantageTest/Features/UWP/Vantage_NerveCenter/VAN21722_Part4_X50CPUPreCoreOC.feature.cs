// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.4.0.0
//      SpecFlow Generator Version:3.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace LenovoVantageTest.Features.UWP.Vantage_NerveCenter
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("VAN21722_Part4_X50CPUPreCoreOC")]
    public partial class VAN21722_Part4_X50CPUPreCoreOCFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "VAN21722_Part4_X50CPUPreCoreOC.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/UWP/Vantage_NerveCenter", "VAN21722_Part4_X50CPUPreCoreOC", "\tTest Case：https://lnvusjira.lenovonet.lenovo.local/browse/VAN-19762\r\n\tAuthor： Pe" +
                    "ngjie Chen", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
#line 6
 testRunner.Given("Machine is Gaming", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
 testRunner.Given("The Machine is X Series \'X50\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.Given("The Machine Type is DT or NB \'DT\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
 testRunner.Given("The Machine support Specific function \'CPUGPUOverclockNew\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 10
 testRunner.Given("driver is installed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 11
 testRunner.Given("CPU name and contains the \'K/HK/KF\' characters", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 12
 testRunner.Given("click the Thermal mode area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 13
 testRunner.Given("click the Advance OC button in the Thermal mode settings page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 14
 testRunner.Given("click the proceed button in the Warning dialog", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep64_Check drag the 1 Core Ratio blocker on the slider bar to the " +
            "right and 1 Core Ratio Slider Value is correct")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep64_CheckDragThe1CoreRatioBlockerOnTheSliderBarToTheRightAnd1CoreRatioSliderValueIsCorrect()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep64_Check drag the 1 Core Ratio blocker on the slider bar to the " +
                    "right and 1 Core Ratio Slider Value is correct", null, tagsOfScenario, argumentsOfScenario);
#line 17
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 18
 testRunner.When("user hover specific title in the CPU Overclock area \'1 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 19
 testRunner.When("user drag the \'1 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "left\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
 testRunner.Then("Take Screen Shot 1_Core_Ratio_Slider_right_before_TestStep64  in 21722 under X50C" +
                        "PUPreCoreOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 21
 testRunner.When("user click \'3\' times \'1 Core Ratio\' plus or minus \'+\' icon in the CPU Overclock a" +
                        "rea", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 22
 testRunner.Then("Take Screen Shot 1_Core_Ratio_Slider_right_after_TestStep64   in 21722 under X50C" +
                        "PUPreCoreOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 23
 testRunner.Then("the value should be less or larger than before in the CPU Overclock area \'larger\'" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 24
 testRunner.Then("The \'1 Core Ratio\' value in the CPU Overclock area should be same and consistent " +
                        "with Spec definition \'53\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep65_Check 2 Core Ratio Slider on the slider bar should be at the " +
            "far right")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep65_Check2CoreRatioSliderOnTheSliderBarShouldBeAtTheFarRight()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep65_Check 2 Core Ratio Slider on the slider bar should be at the " +
                    "far right", null, tagsOfScenario, argumentsOfScenario);
#line 27
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 28
 testRunner.When("user hover specific title in the CPU Overclock area \'2 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 29
 testRunner.When("user drag the \'2 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "right\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 30
 testRunner.Then("Take Screen Shot 2_Core_Ratio_Slider_Right_TestStep65  in 21722 under X50CPUPreCo" +
                        "reOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 31
 testRunner.Then("The \'2 Core Ratio\' value in the CPU Overclock area should be same and consistent " +
                        "with Spec definition \'MaxValue\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep66_Check 2 Core Ratio Slider MaxValue is 56")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep66_Check2CoreRatioSliderMaxValueIs56()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep66_Check 2 Core Ratio Slider MaxValue is 56", null, tagsOfScenario, argumentsOfScenario);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 35
 testRunner.When("user hover specific title in the CPU Overclock area \'2 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 36
 testRunner.When("user drag the \'2 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "right\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 37
 testRunner.Then("The \'2 Core Ratio\' value in the CPU Overclock area should be same and consistent " +
                        "with Spec definition \'MaxValue\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep67_Check 2 Core Ratio Slider MaxValue is 56 and plus icon unclic" +
            "kable and minus icon clickable")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep67_Check2CoreRatioSliderMaxValueIs56AndPlusIconUnclickableAndMinusIconClickable()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep67_Check 2 Core Ratio Slider MaxValue is 56 and plus icon unclic" +
                    "kable and minus icon clickable", null, tagsOfScenario, argumentsOfScenario);
#line 40
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 41
 testRunner.When("user hover specific title in the CPU Overclock area \'2 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 42
 testRunner.When("user drag the \'2 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "right\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 43
 testRunner.Then("The \'2 Core Ratio\' value in the CPU Overclock area should be same and consistent " +
                        "with Spec definition \'MaxValue\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 44
 testRunner.Then("The \'2 Core Ratio\' plus icon status \'unclickable\'or minus icon status \'clickable\'" +
                        " in the CPU Overclock area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep68_Check 2 Core Ratio Slider on the slider bar should be at the " +
            "far left")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep68_Check2CoreRatioSliderOnTheSliderBarShouldBeAtTheFarLeft()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep68_Check 2 Core Ratio Slider on the slider bar should be at the " +
                    "far left", null, tagsOfScenario, argumentsOfScenario);
#line 47
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 48
 testRunner.When("user hover specific title in the CPU Overclock area \'2 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 49
 testRunner.When("user drag the \'2 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "left\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 50
 testRunner.Then("Take Screen Shot 2_Core_Ratio_Slider_Left_TestStep68  in 21722 under X50CPUPreCor" +
                        "eOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 51
 testRunner.Then("The \'2 Core Ratio\' value in the CPU Overclock area should be same and consistent " +
                        "with Spec definition \'MinValue\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep69_Check 2 Core Ratio Slider MinValue is 50")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep69_Check2CoreRatioSliderMinValueIs50()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep69_Check 2 Core Ratio Slider MinValue is 50", null, tagsOfScenario, argumentsOfScenario);
#line 54
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 55
 testRunner.When("user hover specific title in the CPU Overclock area \'2 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 56
 testRunner.When("user drag the \'2 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "left\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 57
 testRunner.Then("The \'2 Core Ratio\' value in the CPU Overclock area should be same and consistent " +
                        "with Spec definition \'MinValue\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep70_Check 2 Core Ratio Slider MinValue is 50 and plus icon clicka" +
            "ble and minus icon unclickable")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep70_Check2CoreRatioSliderMinValueIs50AndPlusIconClickableAndMinusIconUnclickable()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep70_Check 2 Core Ratio Slider MinValue is 50 and plus icon clicka" +
                    "ble and minus icon unclickable", null, tagsOfScenario, argumentsOfScenario);
#line 60
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 61
 testRunner.When("user hover specific title in the CPU Overclock area \'2 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 62
 testRunner.When("user drag the \'2 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "left\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 63
 testRunner.Then("The \'2 Core Ratio\' value in the CPU Overclock area should be same and consistent " +
                        "with Spec definition \'MinValue\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 64
 testRunner.Then("The \'2 Core Ratio\' plus icon status \'clickable\'or minus icon status \'unclickable\'" +
                        " in the CPU Overclock area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep71_Check 2 Core Ratio Slider MinValue is 50 and the other Core R" +
            "atio items values should not be changed.")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep71_Check2CoreRatioSliderMinValueIs50AndTheOtherCoreRatioItemsValuesShouldNotBeChanged_()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep71_Check 2 Core Ratio Slider MinValue is 50 and the other Core R" +
                    "atio items values should not be changed.", null, tagsOfScenario, argumentsOfScenario);
#line 67
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 68
 testRunner.When("user hover specific title in the CPU Overclock area \'2 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 69
 testRunner.Given("Get slider bar value in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 70
 testRunner.When("user drag the \'2 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "left\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table203 = new TechTalk.SpecFlow.Table(new string[] {
                            "item",
                            "changestatus"});
                table203.AddRow(new string[] {
                            "1 Core Ratio",
                            "no"});
                table203.AddRow(new string[] {
                            "2 Core Ratio",
                            "yes"});
                table203.AddRow(new string[] {
                            "3 Core Ratio",
                            "no"});
                table203.AddRow(new string[] {
                            "4 Core Ratio",
                            "no"});
                table203.AddRow(new string[] {
                            "5 Core Ratio",
                            "no"});
                table203.AddRow(new string[] {
                            "6 Core Ratio",
                            "no"});
                table203.AddRow(new string[] {
                            "7 Core Ratio",
                            "no"});
                table203.AddRow(new string[] {
                            "8 Core Ratio",
                            "no"});
                table203.AddRow(new string[] {
                            "9 Core Ratio",
                            "no"});
                table203.AddRow(new string[] {
                            "10 Core Ratio",
                            "no"});
#line 71
 testRunner.Then("the items values should not be changed or changed", ((string)(null)), table203, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep72_Check drag the 2 Core Ratio blocker on the slider bar to the " +
            "right and 2 Core Ratio Slider Value is correct")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep72_CheckDragThe2CoreRatioBlockerOnTheSliderBarToTheRightAnd2CoreRatioSliderValueIsCorrect()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep72_Check drag the 2 Core Ratio blocker on the slider bar to the " +
                    "right and 2 Core Ratio Slider Value is correct", null, tagsOfScenario, argumentsOfScenario);
#line 85
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 86
 testRunner.When("user hover specific title in the CPU Overclock area \'1 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 87
 testRunner.When("user drag the \'2 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "left\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 88
 testRunner.Then("Take Screen Shot 2_Core_Ratio_Slider_right_before_TestStep72  in 21722 under X50C" +
                        "PUPreCoreOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 89
 testRunner.When("user drag the \'2 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "3\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 90
 testRunner.Then("Take Screen Shot 2_Core_Ratio_Slider_right_after_TestStep72  in 21722 under X50CP" +
                        "UPreCoreOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 91
 testRunner.Then("the value should be less or larger than before in the CPU Overclock area \'larger\'" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 92
 testRunner.Then("The \'2 Core Ratio\' value in the CPU Overclock area should be same and consistent " +
                        "with Spec definition \'53\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep73_Check drag the 2 Core Ratio blocker on the slider bar to the " +
            "right and plus and minus icon clicable")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep73_CheckDragThe2CoreRatioBlockerOnTheSliderBarToTheRightAndPlusAndMinusIconClicable()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep73_Check drag the 2 Core Ratio blocker on the slider bar to the " +
                    "right and plus and minus icon clicable", null, tagsOfScenario, argumentsOfScenario);
#line 95
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 96
 testRunner.When("user hover specific title in the CPU Overclock area \'2 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 97
 testRunner.When("user drag the \'2 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "center\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 98
 testRunner.Then("The \'2 Core Ratio\' plus icon status \'clickable\'or minus icon status \'clickable\' i" +
                        "n the CPU Overclock area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep74_Check drag the 2 Core Ratio blocker on the slider bar to the " +
            "right and the other Core Ratio items values should not be changed")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep74_CheckDragThe2CoreRatioBlockerOnTheSliderBarToTheRightAndTheOtherCoreRatioItemsValuesShouldNotBeChanged()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep74_Check drag the 2 Core Ratio blocker on the slider bar to the " +
                    "right and the other Core Ratio items values should not be changed", null, tagsOfScenario, argumentsOfScenario);
#line 101
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 102
 testRunner.When("user hover specific title in the CPU Overclock area \'2 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 103
 testRunner.Given("Get slider bar value in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 104
 testRunner.When("user drag the \'2 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "3\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table204 = new TechTalk.SpecFlow.Table(new string[] {
                            "item",
                            "changestatus"});
                table204.AddRow(new string[] {
                            "1 Core Ratio",
                            "no"});
                table204.AddRow(new string[] {
                            "2 Core Ratio",
                            "yes"});
                table204.AddRow(new string[] {
                            "3 Core Ratio",
                            "no"});
                table204.AddRow(new string[] {
                            "4 Core Ratio",
                            "no"});
                table204.AddRow(new string[] {
                            "5 Core Ratio",
                            "no"});
                table204.AddRow(new string[] {
                            "6 Core Ratio",
                            "no"});
                table204.AddRow(new string[] {
                            "7 Core Ratio",
                            "no"});
                table204.AddRow(new string[] {
                            "8 Core Ratio",
                            "no"});
                table204.AddRow(new string[] {
                            "9 Core Ratio",
                            "no"});
                table204.AddRow(new string[] {
                            "10 Core Ratio",
                            "no"});
#line 105
 testRunner.Then("the items values should not be changed or changed", ((string)(null)), table204, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep75_Check click 2 Core Ratio minus icon and the value should be l" +
            "ess than before")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep75_CheckClick2CoreRatioMinusIconAndTheValueShouldBeLessThanBefore()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep75_Check click 2 Core Ratio minus icon and the value should be l" +
                    "ess than before", null, tagsOfScenario, argumentsOfScenario);
#line 119
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 120
 testRunner.When("user hover specific title in the CPU Overclock area \'2 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 121
 testRunner.Given("Get slider bar value in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 122
 testRunner.When("user click \'1\' times \'2 Core Ratio\' plus or minus \'-\' icon in the CPU Overclock a" +
                        "rea", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 123
 testRunner.Then("the value should be less or larger than before in the CPU Overclock area \'less\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep76_Check click 2 Core Ratio minus icon and the other Core Ratio " +
            "items values should not be changed")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep76_CheckClick2CoreRatioMinusIconAndTheOtherCoreRatioItemsValuesShouldNotBeChanged()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep76_Check click 2 Core Ratio minus icon and the other Core Ratio " +
                    "items values should not be changed", null, tagsOfScenario, argumentsOfScenario);
#line 126
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 127
 testRunner.When("user hover specific title in the CPU Overclock area \'2 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 128
 testRunner.Given("Get slider bar value in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 129
 testRunner.When("user click \'3\' times \'2 Core Ratio\' plus or minus \'-\' icon in the CPU Overclock a" +
                        "rea", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table205 = new TechTalk.SpecFlow.Table(new string[] {
                            "item",
                            "changestatus"});
                table205.AddRow(new string[] {
                            "1 Core Ratio",
                            "no"});
                table205.AddRow(new string[] {
                            "2 Core Ratio",
                            "yes"});
                table205.AddRow(new string[] {
                            "3 Core Ratio",
                            "no"});
                table205.AddRow(new string[] {
                            "4 Core Ratio",
                            "no"});
                table205.AddRow(new string[] {
                            "5 Core Ratio",
                            "no"});
                table205.AddRow(new string[] {
                            "6 Core Ratio",
                            "no"});
                table205.AddRow(new string[] {
                            "7 Core Ratio",
                            "no"});
                table205.AddRow(new string[] {
                            "8 Core Ratio",
                            "no"});
                table205.AddRow(new string[] {
                            "9 Core Ratio",
                            "no"});
                table205.AddRow(new string[] {
                            "10 Core Ratio",
                            "no"});
#line 130
 testRunner.Then("the items values should not be changed or changed", ((string)(null)), table205, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep77_Check drag the 2 Core Ratio blocker on the slider bar to the " +
            "left and 2 Core Ratio Slider Value is correct")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep77_CheckDragThe2CoreRatioBlockerOnTheSliderBarToTheLeftAnd2CoreRatioSliderValueIsCorrect()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep77_Check drag the 2 Core Ratio blocker on the slider bar to the " +
                    "left and 2 Core Ratio Slider Value is correct", null, tagsOfScenario, argumentsOfScenario);
#line 144
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 145
 testRunner.When("user hover specific title in the CPU Overclock area \'2 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 146
 testRunner.When("user drag the \'2 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "right\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 147
 testRunner.Then("Take Screen Shot 2_Core_Ratio_Slider_left_before_TestStep77  in 21722 under X50CP" +
                        "UPreCoreOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 148
 testRunner.When("user click \'3\' times \'2 Core Ratio\' plus or minus \'-\' icon in the CPU Overclock a" +
                        "rea", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 149
 testRunner.Then("Take Screen Shot 2_Core_Ratio_Slider_left_after_TestStep77   in 21722 under X50CP" +
                        "UPreCoreOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 150
 testRunner.Then("the value should be less or larger than before in the CPU Overclock area \'less\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 151
 testRunner.Then("The \'2 Core Ratio\' value in the CPU Overclock area should be same and consistent " +
                        "with Spec definition \'53\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep78_Check click 2 Core Ratio plus icon and the value should be la" +
            "rger than before")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep78_CheckClick2CoreRatioPlusIconAndTheValueShouldBeLargerThanBefore()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep78_Check click 2 Core Ratio plus icon and the value should be la" +
                    "rger than before", null, tagsOfScenario, argumentsOfScenario);
#line 154
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 155
 testRunner.When("user hover specific title in the CPU Overclock area \'2 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 156
 testRunner.When("user click \'3\' times \'2 Core Ratio\' plus or minus \'+\' icon in the CPU Overclock a" +
                        "rea", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 157
 testRunner.Then("the value should be less or larger than before in the CPU Overclock area \'larger\'" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep79_Check click 2 Core Ratio plus icon and the other Core Ratio i" +
            "tems values should not be changed")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep79_CheckClick2CoreRatioPlusIconAndTheOtherCoreRatioItemsValuesShouldNotBeChanged()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep79_Check click 2 Core Ratio plus icon and the other Core Ratio i" +
                    "tems values should not be changed", null, tagsOfScenario, argumentsOfScenario);
#line 160
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 161
 testRunner.When("user hover specific title in the CPU Overclock area \'2 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 162
 testRunner.Given("Get slider bar value in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 163
 testRunner.When("user click \'2\' times \'2 Core Ratio\' plus or minus \'+\' icon in the CPU Overclock a" +
                        "rea", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table206 = new TechTalk.SpecFlow.Table(new string[] {
                            "item",
                            "changestatus"});
                table206.AddRow(new string[] {
                            "1 Core Ratio",
                            "no"});
                table206.AddRow(new string[] {
                            "2 Core Ratio",
                            "yes"});
                table206.AddRow(new string[] {
                            "3 Core Ratio",
                            "no"});
                table206.AddRow(new string[] {
                            "4 Core Ratio",
                            "no"});
                table206.AddRow(new string[] {
                            "5 Core Ratio",
                            "no"});
                table206.AddRow(new string[] {
                            "6 Core Ratio",
                            "no"});
                table206.AddRow(new string[] {
                            "7 Core Ratio",
                            "no"});
                table206.AddRow(new string[] {
                            "8 Core Ratio",
                            "no"});
                table206.AddRow(new string[] {
                            "9 Core Ratio",
                            "no"});
                table206.AddRow(new string[] {
                            "10 Core Ratio",
                            "no"});
#line 164
 testRunner.Then("the items values should not be changed or changed", ((string)(null)), table206, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep80_Check drag the 2 Core Ratio blocker on the slider bar to the " +
            "right and 2 Core Ratio Slider Value is correct")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep80_CheckDragThe2CoreRatioBlockerOnTheSliderBarToTheRightAnd2CoreRatioSliderValueIsCorrect()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep80_Check drag the 2 Core Ratio blocker on the slider bar to the " +
                    "right and 2 Core Ratio Slider Value is correct", null, tagsOfScenario, argumentsOfScenario);
#line 178
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 179
 testRunner.When("user hover specific title in the CPU Overclock area \'2 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 180
 testRunner.When("user drag the \'2 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "left\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 181
 testRunner.Then("Take Screen Shot 2_Core_Ratio_Slider_right_before_TestStep80  in 21722 under X50C" +
                        "PUPreCoreOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 182
 testRunner.When("user click \'3\' times \'2 Core Ratio\' plus or minus \'+\' icon in the CPU Overclock a" +
                        "rea", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 183
 testRunner.Then("Take Screen Shot 2_Core_Ratio_Slider_right_after_TestStep80   in 21722 under X50C" +
                        "PUPreCoreOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 184
 testRunner.Then("the value should be less or larger than before in the CPU Overclock area \'larger\'" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 185
 testRunner.Then("The \'2 Core Ratio\' value in the CPU Overclock area should be same and consistent " +
                        "with Spec definition \'53\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep81_Check 3 Core Ratio Slider on the slider bar should be at the " +
            "far right")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep81_Check3CoreRatioSliderOnTheSliderBarShouldBeAtTheFarRight()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep81_Check 3 Core Ratio Slider on the slider bar should be at the " +
                    "far right", null, tagsOfScenario, argumentsOfScenario);
#line 188
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 189
 testRunner.When("user hover specific title in the CPU Overclock area \'3 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 190
 testRunner.When("user drag the \'3 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "right\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 191
 testRunner.Then("Take Screen Shot 3_Core_Ratio_Slider_Right_TestStep81  in 21722 under X50CPUPreCo" +
                        "reOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 192
 testRunner.Then("The \'3 Core Ratio\' value in the CPU Overclock area should be same and consistent " +
                        "with Spec definition \'MaxValue\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep82_Check 3 Core Ratio Slider MaxValue is 54")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep82_Check3CoreRatioSliderMaxValueIs54()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep82_Check 3 Core Ratio Slider MaxValue is 54", null, tagsOfScenario, argumentsOfScenario);
#line 195
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 196
 testRunner.When("user hover specific title in the CPU Overclock area \'3 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 197
 testRunner.When("user drag the \'3 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "right\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 198
 testRunner.Then("The \'3 Core Ratio\' value in the CPU Overclock area should be same and consistent " +
                        "with Spec definition \'MaxValue\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep83_Check 3 Core Ratio Slider MaxValue is 56 and plus icon unclic" +
            "kable and minus icon clickable")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep83_Check3CoreRatioSliderMaxValueIs56AndPlusIconUnclickableAndMinusIconClickable()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep83_Check 3 Core Ratio Slider MaxValue is 56 and plus icon unclic" +
                    "kable and minus icon clickable", null, tagsOfScenario, argumentsOfScenario);
#line 201
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 202
 testRunner.When("user hover specific title in the CPU Overclock area \'3 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 203
 testRunner.When("user drag the \'3 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "right\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 204
 testRunner.Then("The \'3 Core Ratio\' value in the CPU Overclock area should be same and consistent " +
                        "with Spec definition \'MaxValue\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 205
 testRunner.Then("The \'3 Core Ratio\' plus icon status \'unclickable\'or minus icon status \'clickable\'" +
                        " in the CPU Overclock area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("VAN21722_TestStep84_Check 3 Core Ratio Slider on the slider bar should be at the " +
            "far left")]
        [NUnit.Framework.CategoryAttribute("GamingX50CPUPreCoreOC")]
        public virtual void VAN21722_TestStep84_Check3CoreRatioSliderOnTheSliderBarShouldBeAtTheFarLeft()
        {
            string[] tagsOfScenario = new string[] {
                    "GamingX50CPUPreCoreOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAN21722_TestStep84_Check 3 Core Ratio Slider on the slider bar should be at the " +
                    "far left", null, tagsOfScenario, argumentsOfScenario);
#line 208
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 209
 testRunner.When("user hover specific title in the CPU Overclock area \'3 Core Ratio\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 210
 testRunner.When("user drag the \'3 Core Ratio\' blocker on the slider bar to the specific location \'" +
                        "left\' in the CPU Overclock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 211
 testRunner.Then("Take Screen Shot 3_Core_Ratio_Slider_Left_TestStep84  in 21722 under X50CPUPreCor" +
                        "eOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 212
 testRunner.Then("The \'3 Core Ratio\' value in the CPU Overclock area should be same and consistent " +
                        "with Spec definition \'MinValue\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
